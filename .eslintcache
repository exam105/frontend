[{"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reportWebVitals.js":"1","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\index.js":"2","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\Board.js":"3","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js":"4","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\theory.js":"5","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js":"6","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js":"7","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js":"8","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js":"9","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\action\\index.js":"10","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\index.js":"11","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\App.js":"12","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\PresistedState.js":"13","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js":"14","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\LoginAndLogout.js":"15","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js":"16","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddImages.js":"17","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js":"18","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\mcq.js":"19","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js":"20","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js":"21","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js":"22","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddImagesComponent.js":"23","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js":"24","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AddDataOperator.js":"25","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ModelNotification.js":"26","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ConfirmDialog.js":"27","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\SelectDialog.js":"28","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\EnhancedTableToolbar.js":"29","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\EditQuestions.js":"30","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\QuestionList.js":"31","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\DialogModalMetaData.js":"32","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\AddQuestion.js":"33","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\SeeQuestion.js":"34"},{"size":375,"mtime":1611326404380,"results":"35","hashOfConfig":"36"},{"size":346,"mtime":1612244982949,"results":"37","hashOfConfig":"36"},{"size":647,"mtime":1611374785657,"results":"38","hashOfConfig":"36"},{"size":347,"mtime":1611374785625,"results":"39","hashOfConfig":"36"},{"size":821,"mtime":1612244982950,"results":"40","hashOfConfig":"36"},{"size":380,"mtime":1611374785618,"results":"41","hashOfConfig":"36"},{"size":2555,"mtime":1612244982942,"results":"42","hashOfConfig":"36"},{"size":18630,"mtime":1612595068065,"results":"43","hashOfConfig":"36"},{"size":5422,"mtime":1613195067345,"results":"44","hashOfConfig":"36"},{"size":1874,"mtime":1612244982948,"results":"45","hashOfConfig":"36"},{"size":2541,"mtime":1613119736257,"results":"46","hashOfConfig":"36"},{"size":1492,"mtime":1613194762016,"results":"47","hashOfConfig":"36"},{"size":704,"mtime":1611374785660,"results":"48","hashOfConfig":"36"},{"size":361,"mtime":1612244982944,"results":"49","hashOfConfig":"36"},{"size":257,"mtime":1612244982949,"results":"50","hashOfConfig":"36"},{"size":334,"mtime":1612244982945,"results":"51","hashOfConfig":"36"},{"size":384,"mtime":1611374785622,"results":"52","hashOfConfig":"36"},{"size":5753,"mtime":1613577283401,"results":"53","hashOfConfig":"36"},{"size":807,"mtime":1612244982950,"results":"54","hashOfConfig":"36"},{"size":874,"mtime":1612244982944,"results":"55","hashOfConfig":"36"},{"size":12291,"mtime":1613627259129,"results":"56","hashOfConfig":"36"},{"size":21814,"mtime":1612933542469,"results":"57","hashOfConfig":"36"},{"size":3432,"mtime":1612943677087,"results":"58","hashOfConfig":"36"},{"size":877,"mtime":1613279259851,"results":"59","hashOfConfig":"36"},{"size":9413,"mtime":1612595412126,"results":"60","hashOfConfig":"36"},{"size":1510,"mtime":1612594800384,"results":"61","hashOfConfig":"36"},{"size":1671,"mtime":1613114471513,"results":"62","hashOfConfig":"36"},{"size":878,"mtime":1612596303136,"results":"63","hashOfConfig":"36"},{"size":5292,"mtime":1613456407707,"results":"64","hashOfConfig":"36"},{"size":16712,"mtime":1613578699475,"results":"65","hashOfConfig":"36"},{"size":7688,"mtime":1613584413359,"results":"66","hashOfConfig":"36"},{"size":7216,"mtime":1613456619182,"results":"67","hashOfConfig":"36"},{"size":13317,"mtime":1613578680754,"results":"68","hashOfConfig":"36"},{"size":3780,"mtime":1613583520370,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"1ef6jmr",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"72"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"72"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"72"},"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reportWebVitals.js",[],["156","157"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\index.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\Board.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\theory.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js",["158"],"import React, {useEffect} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {FcRemoveImage, FcPlus, FcTodoList, FcDeleteDatabase} from \"react-icons/fc\"\r\nimport {BsFillCaretRightFill} from 'react-icons/bs'\r\nimport '../css/AdminSideBar.css'\r\nimport $ from 'jquery'\r\nimport {useHistory} from 'react-router-dom'\r\nimport { connect , useSelector } from 'react-redux'\r\nimport { reset_board, reset_theory, reset_mcq } from '../../action/index'\r\n\r\nfunction AdminSideBar(props) {\r\n    const history = useHistory();\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    useEffect(()=> {\r\n        if (loginReducer === \"\"){\r\n            history.push(\"/admin/panel\")\r\n        }\r\n    }, [])\r\n    const sidebar_open = () => {\r\n        $('.Admin_Sidebar').toggleClass(\"open_sidebar\")\r\n        $('.Admin_Sidebar').blur(()=>{\r\n            $(this).toggleClass(\"open_sidebar\")\r\n        })\r\n    }\r\n    const logout = () => {\r\n        props.set_logout();\r\n        history.push(\"/admin/panel/\")\r\n    }\r\n\r\n    const clear_cache = () => {\r\n        props.reset_board();\r\n        props.reset_mcq();\r\n        props.reset_theory();\r\n        history.push('/admin/panel/add/papers/')\r\n        $('.Admin_Sidebar').toggleClass(\"open_sidebar\")\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"Admin_Sidebar\">\r\n        <ul className=\"sidebar_ul\">\r\n                <li className=\"admin_panel_heading_li\"><h4 exact to=\"/admin/panel/\">Admin Panel</h4></li>\r\n                <li><NavLink exact to=\"/admin/panel/papers\"><FcTodoList /> Papers List</NavLink></li>\r\n                <li><NavLink exact to=\"/admin/panel/add/papers\"><FcPlus /> Add Paper</NavLink></li>\r\n                <li><NavLink exact to=\"/admin/panel/add/images\"><FcPlus /> Add Images</NavLink></li>\r\n                <li onClick={clear_cache}><NavLink to=\"#\"><FcRemoveImage /> Clear Caches</NavLink></li>\r\n                <li onClick={logout}><NavLink to=\"#\"><FcDeleteDatabase /> Logout</NavLink></li>\r\n            </ul>\r\n            <BsFillCaretRightFill className=\"sidebar_open_icon\" onClick={sidebar_open} />\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        set_logout: () => {\r\n            dispatch({type: 'logout'})\r\n        },\r\n        reset_board: () => {\r\n            dispatch(reset_board())\r\n        },\r\n        reset_mcq: () => {\r\n            dispatch(reset_mcq())\r\n        },\r\n        reset_theory: () => {\r\n            dispatch(reset_theory())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminSideBar);","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js",["159","160","161","162","163","164","165"],"import React, { useEffect, useState } from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { add_theory, remove_theory, update_theory } from '../../action/index'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from '../../Modals/ModelNotification'\r\nimport LinearProgressWithLabel from './LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n   },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AdminAddTheoryComponent(props) {\r\n    const classes = useStyles();\r\n    // React State hooks\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [topics, setTopics] = useState([])\r\n    const [openAlert, setOpenAlert] = useState(false);\r\n    const [AlertValue, setAlertValue] = useState(false);\r\n    const [ConfirmDialog, setConfirmDialog] = useState(false);\r\n    const [ProgressBarStatus , setProgressBarStatus] = useState(false)\r\n    const [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n    // Dialog Hooks\r\n    const [DialogStatus, setDialogStatus] = useState(false);\r\n    const [DialogDesc, setDialogDesc] = useState(\"Are you Sure?\");\r\n    const [DialogTitle, setDialogTitle] = useState(\"Notification\");\r\n    const [DialogOk, setDialogOk] = useState(\"Ok\");\r\n    const [progress, setProgress] = useState(10);\r\n    // React Redux\r\n    const theoryReducer = useSelector(state => state.theoryReducer)\r\n    const boardReducer = useSelector(state => state.boardReducer)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (boardReducer.length === 0) {\r\n            history.push(\"/admin/panel/add/papers/\")\r\n        }\r\n        $('.answer_output').slideUp();\r\n        $('.question_output').slideUp();\r\n        const timer = setInterval(() => {\r\n            setProgress((prevProgress) => (prevProgress >= 90 ? 10 : prevProgress + 7));\r\n        }, 800);\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, [])\r\n    // Math compiler\r\n    // question input changehandler\r\n    const questionChange = (e) => {\r\n        setQuestion(e.target.value);\r\n    }\r\n    // SetTime Out Functions\r\n    const mcqButtonChangeBorder = (e) => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < theoryReducer.length; i++) {\r\n                if (i === e) {\r\n                    $(`.question${e}`).css({ border: '3px solid black' })\r\n                } else {\r\n                    $(`.question${i}`).css({ border: '3px solid white' })\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    // on mcq added\r\n    const add_theory_question = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || answer === \"\") {\r\n            setDialogDesc(\"All Fields Are Required?\")\r\n            setDialogStatus(true)\r\n        } else {\r\n            const data = {\r\n                question: question,\r\n                answer: answer,\r\n                marks: mark,\r\n                topics: topics\r\n            }\r\n            props.changeState(data)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n        }\r\n    }\r\n    // Get Old Mcq for Update\r\n    const getOldTheroyQuestion = (e) => {\r\n        window.value = e;\r\n        mcqButtonChangeBorder(e)\r\n        setTopics([])\r\n        setQuestion(theoryReducer[e].question)\r\n        setAnswer(theoryReducer[e].answer)\r\n        $('.marks').val(theoryReducer[e].marks);\r\n        setTopics(theoryReducer[e].topics)\r\n        // // Hide and show buttons\r\n        $('.next_theory_button').css(\"display\", \"none\")\r\n        $('.update_theory_button').css(\"display\", \"inline\");\r\n        $('.delete_theory_button').css(\"display\", \"inline\");\r\n    }\r\n    // // Update Mcq By its Id\r\n    const update_theory_question_by_id = () => {\r\n        if (window.value != null) {\r\n            const mark = $('.marks').val();\r\n            if (question === \"\" || mark === \"\" || answer === \"\") {\r\n                setDialogDesc(\"All Fields Are Required?\")\r\n                setDialogStatus(true)\r\n            } else {\r\n                const mark = $('.marks').val();\r\n                const data = {\r\n                    question: question,\r\n                    answer: answer,\r\n                    marks: mark,\r\n                    topics: topics,\r\n                    index: window.value\r\n                }\r\n                props.updateState(data)\r\n                setQuestion(\"\")\r\n                setAnswer(\"\")\r\n                setTopics([])\r\n                mcqButtonChangeBorder(-1)\r\n                $('.next_theory_button').css(\"display\", \"inline\")\r\n                $('.update_theory_button').css(\"display\", \"none\");\r\n                $('.delete_theory_button').css(\"display\", \"none\");\r\n                setAlertValue(\"Updated Successfull\")\r\n                setOpenAlert(true)\r\n            }\r\n        } else {\r\n            setDialogDesc(\"Select MCQ For Delete?\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // // Delete Mcq By its Id\r\n    const delete_theory_question = () => {\r\n        setConfirmDialog(false)\r\n        if (window.value != null) {\r\n            const index = window.value;\r\n            props.deleteState(index)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n            mcqButtonChangeBorder(-1)\r\n            setAlertValue(\"Deleted Successfull\")\r\n            setOpenAlert(true)\r\n            $('.next_mcq_button').css(\"display\", \"inline\")\r\n            $('.update_mcq_button').css(\"display\", \"none\");\r\n            $('.delete_mcq_button').css(\"display\", \"none\");\r\n        } else {\r\n            setDialogDesc(\"Please Select MCQ for Delete\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Add Topics\r\n    const submitTopic = (e) => {\r\n        e.preventDefault()\r\n        setTopics([...topics, { topic: topic }])\r\n        setTopic(\"\")\r\n    }\r\n    // Delete Topics\r\n    const deleteTopic = (e) => {\r\n        const deleteTopic = topics.filter((item, index) => e !== index);\r\n        setTopics(deleteTopic)\r\n    }\r\n    // Questinon Output Toggle\r\n    const question_output_hide_show = () => {\r\n        $('.question_output').slideToggle();\r\n    }\r\n    const answer_output_hide_show = () => {\r\n        $('.answer_output').slideToggle();\r\n    }\r\n    // // Create JSON\r\n    // const send_json = () => {\r\n    //     const array = new Array(boardReducer[0]);\r\n    //     mcqReducer.map((item, i) => {\r\n    //         array.push(item)\r\n    //     })\r\n    //     const jsonData = JSON.stringify(array);\r\n    //     document.write(jsonData)\r\n    // }\r\n    // // Close Alert\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlert(false)\r\n        setDialogStatus(false);\r\n        setConfirmDialog(false)\r\n    };\r\n    return (\r\n        <section className=\"add_mcq_main pt-3\">\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-2 mb-5 mcqs_list_main \">\r\n                        <div className=\"bg-white py-3 container-fluid\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            {theoryReducer.map((item, i) => (\r\n                                <button key={i} style={{ width: '40px' }} className={`col-3 text-center bg-success text-white question${i}`} onClick={() => getOldTheroyQuestion(i)}>{i + 1}</button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-7 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        {/* Responsive Meta Data */}\r\n                        <div className=\"table-responsive mx-auto\">\r\n                            <table className=\"table p-0 m-0\">\r\n                                <tbody>\r\n                                    {boardReducer.map((item, i) => (\r\n                                        <tr className=\"text-center\">\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.system}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.board}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.subject}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.year}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.month}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.series}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.paper}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"container-fluid\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={question_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group question_output col-12\" style={{ fontSize: markdownFontSize, borderRadius: \"5px\"}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <textarea className=\"form-control\" placeholder=\"Enter Answer\" rows=\"5\" value={answer} onChange={(e) => setAnswer(e.target.value)} required></textarea>\r\n                            <div className=\"row mt-3\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={answer_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group answer_output col-12\" style={{ fontSize: markdownFontSize, borderRadius: \"5px\"}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={answer} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-between w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={() => history.push(\"/admin/panel/add/images\")} className=\"bg-success mx-2 mt-2 btn mybutton\">Next Step</button>\r\n                                            <button type=\"button\" className=\"bg-success mx-2 mt-2 btn mybutton\">Finish</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={() => setConfirmDialog(true)} className=\"mr-2 bg-info border mt-2 mybutton delete_theory_button btn\">delete</button>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={update_theory_question_by_id} className=\"border bg-info mt-2 mybutton update_theory_button btn mybutton\">update</button>\r\n                                            <Button variant=\"contained\" onClick={add_theory_question} className=\"mybutton bg-info next_theory_button\">Next</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-3\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay pb-1 h5 `}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {/* Alerts */}\r\n            <Snackbar open={openAlert} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {AlertValue}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* Dialog Box */}\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n            {/* Confirm Dialog Box */}\r\n            <Dialog\r\n                open={ConfirmDialog}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Notification</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Are You sure you want to delete this field?\r\n                        </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        cancel\r\n                        </Button>\r\n                    <Button color=\"primary\" onClick={delete_theory_question}>\r\n                        Yes\r\n                        </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {/* Progress Bar */}\r\n            <Backdrop className={classes.backdrop} open={ProgressBarStatus}>\r\n                <LinearProgressWithLabel value={progress} />;\r\n            </Backdrop>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeState: (data) => {\r\n            dispatch(add_theory(data))\r\n        },\r\n        updateState: (data) => {\r\n            dispatch(update_theory(data))\r\n        },\r\n        deleteState: (index) => {\r\n            dispatch({ type: \"remove_theory\", index: index })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddTheoryComponent);\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js",["166"],"import React, {useEffect, useState} from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport {add_board } from '../../action/index'\r\nimport {connect} from 'react-redux'\r\nimport {useHistory} from 'react-router-dom'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport ModelNotification from '../../Modals/ModelNotification'\r\n\r\nfunction AdminAddBoardComponent(props) {\r\n    const history = useHistory();\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [notificationStatus, setNotificationStatus] = useState(false)\r\n    const [paper, setPaper] = useState({\r\n        system: '',\r\n        board: '',\r\n        subject: '',\r\n        year: '',\r\n        month: '',\r\n        series: '',\r\n        paper: ''\r\n    });\r\n\r\n    const submit_data = (e) => {\r\n        e.preventDefault()\r\n        if (paper.month === \"\" || paper.year === \"\") {\r\n            setNotificationStatus(true)\r\n        }else{\r\n            props.add_board(paper)\r\n            history.push(\"/admin/panel/add/\")\r\n        }\r\n        \r\n    }\r\n\r\n    const change_input = (e) => {\r\n        setPaper({...paper, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const change_month_and_year = (date) => {\r\n        setStartDate(date)\r\n        const monthNumber = date.getMonth();\r\n        const year = date.getFullYear();\r\n        var month = \"\";\r\n        switch(monthNumber.toString()){\r\n            case \"0\":\r\n                month=\"January\";\r\n                break;\r\n            case \"1\":\r\n                month=\"February\";\r\n                break;\r\n            case \"2\":\r\n                month=\"March\"\r\n                break;\r\n            case \"3\":\r\n                month=\"April\"\r\n                break;\r\n            case \"4\":\r\n                month=\"May\"\r\n                break;\r\n            case \"5\":\r\n                month=\"June\"\r\n                break;\r\n            case \"6\":\r\n                month=\"July\"\r\n                break;\r\n            case \"7\":\r\n                month=\"August\"\r\n                break;\r\n            case \"8\":\r\n                month=\"September\"\r\n                break;\r\n            case \"9\":\r\n                month=\"October\"\r\n                break;\r\n            case \"10\":\r\n                month=\"November\"\r\n                break;\r\n            case \"11\":\r\n                month=\"December\"\r\n                break;\r\n            default:\r\n                alert(\"please try again\")\r\n        }\r\n        setPaper({...paper, year: year.toString(), month: month})\r\n    }\r\n\r\n    return (\r\n        <section className=\"add_board_main\">\r\n            <div className=\"add_board_child px-md-5 px-4\">\r\n                <h1 className=\"text-center board_titile py-3\">Add Paper</h1>\r\n                <form className=\"board_form mx-auto\" onSubmit={submit_data}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter System :</label>\r\n                        <input type=\"text\" autoFocus className=\"form-control\" name=\"system\" onChange={change_input} value={paper.system} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Board :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"board\" value={paper.board} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Subject :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"subject\" value={paper.subject} required/>\r\n                    </div>\r\n                    <div className=\"form-group datepicker_main\">\r\n                        <label htmlFor=\"\">Select Year And Month :</label><br />\r\n                        <DatePicker className=\"form-control w-100\" selected={startDate} showMonthYearPicker peekNextMonth onChangeRaw={e => e.preventDefault()} onFocus={e => e.preventDefault()} onKeyDown={e => e.preventDefault()} disabledKeyboardNavigation dateFormat=\"MMMM yyyy\" onChange={change_month_and_year} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Series :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"series\" value={paper.series} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Paper:</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"paper\" value={paper.paper} required/>\r\n                    </div>\r\n                    <div className=\"form-group justify-content-center d-flex\">\r\n                        <button type=\"submit\" className=\"btn px-5 py-2 bg-info mybutton\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            <ModelNotification DialogStatus={notificationStatus} DialogTitle=\"Notification\" DialogDesc=\"Please Select Year and month.\" handleClose={() => setNotificationStatus(false)} DialogOk=\"Ok\" />\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        add_board: (data) => {\r\n            dispatch(add_board(data))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddBoardComponent);","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\action\\index.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\index.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\App.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\PresistedState.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\LoginAndLogout.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddImages.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js",["167"],"import React, {useEffect, useState} from 'react'\r\nimport '../css/Style.css'\r\n// import { IconButton, Input , InputLabel , InputAdornment , FormControl, TextField } from '@material-ui/core';\r\n// import { Visibility , VisibilityOff } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { connect , useSelector } from 'react-redux'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button , TextField} from '@material-ui/core'\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction AdminIndex(props) {\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        password: '',\r\n        useremail: '',\r\n        showPassword: false,\r\n    });\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n\r\n\r\n    const history = useHistory();\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    useEffect(()=> {\r\n        if (loginReducer){\r\n            history.push(\"/admin/panel/papers\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    const handleChange = (prop) => (e) => {\r\n        setValues({ ...values, [prop]: e.target.value });\r\n    };\r\n\r\n    // const handleClickShowPassword = () => {\r\n    //     setValues({ ...values, showPassword: !values.showPassword });\r\n    // };\r\n\r\n    // const handleMouseDownPassword = (e) => {\r\n    //     e.preventDefault();\r\n    // };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch(\"/superuser/login\",{\r\n            method: 'post',\r\n            headers: {\r\n              'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n            },\r\n            data: `username=${values.username}&useremail=${values.useremail}`,\r\n        })\r\n          .then(res => {\r\n              props.set_login(res.data.token);\r\n              history.push(\"/admin/panel/papers\")\r\n          })\r\n          .catch(err => \r\n            setDialogStatus(true)\r\n          )\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"admnh_login_main\">\r\n            <form class=\"admin_login_form py-4\" onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center mb-5\">Admin Login</h2>\r\n                <div style={{ width: '60%', margin: '5px auto', display: 'flex' }}>\r\n                    <TextField onChange={handleChange(\"username\")} value={values.username} id=\"standard-basic\" label=\"User Name\" className=\"AdminUserField w-100\" type=\"text\" required />\r\n                </div><br />\r\n                <div style={{ width: '60%', margin: '0 auto', display: 'flex' }}>\r\n                    <TextField onChange={handleChange(\"useremail\")} value={values.useremail} id=\"standard-basic\" label=\"User Email\" className=\"AdminUserField w-100\" type=\"text\" required />\r\n                </div><br />\r\n                {/* <FormControl style={{ width: '60%', margin: '0 auto', display: 'flex' }} variant=\"fille\">\r\n                    <InputLabel htmlFor=\"filled-adornment-password\">Password *</InputLabel>\r\n                    <Input\r\n                        id=\"filled-adornment-password\"\r\n                        type={values.showPassword ? 'text' : 'password'}\r\n                        required\r\n                        value={values.password}\r\n                        onChange={handleChange('password')}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    /><br /><br />\r\n                </FormControl> */}\r\n                <Button type=\"submit\" variant=\"contained\" className=\"mx-auto my-4 d-flex px-5 py-2\" color=\"primary\">\r\n                    Log In\r\n                </Button>\r\n            </form>\r\n            <Dialog\r\n                open={DialogStatus}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Error</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Please Enter Valid Username or Password\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialogStatus(false)} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        set_login: (token) => {\r\n            dispatch({type: 'login', token: token})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminIndex)\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\mcq.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js",["168"],"import React from 'react'\r\nimport AdminSideBar from '../Components/AdminSideBar'\r\nimport {Button } from '@material-ui/core'\r\nimport {useHistory, NavLink} from 'react-router-dom'\r\n\r\nfunction AdminChoiceAndTheory() {\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <AdminSideBar />\r\n            <div className=\"d-flex align-items-center justify-content-center\" style={{ height: '100vh' }}>\r\n                <div>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/mcqs\")} className=\"mr-3\" variant=\"contained\">Add Multiple Choice Question</Button>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/theory\")}variant=\"contained\">Add Theory Question</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminChoiceAndTheory;\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Button } from '@material-ui/core'\r\nimport { MdModeEdit } from \"react-icons/md\"\r\nimport SelectDialog from '../../Modals/SelectDialog'\r\nimport { useHistory } from 'react-router-dom'\r\nimport EnhancedTableToolbar from './EnhancedTableToolbar'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'system', numeric: false, disablePadding: true, label: 'System' },\r\n  { id: 'board', numeric: false, disablePadding: false, label: 'Board' },\r\n  { id: 'subject', numeric: false, disablePadding: false, label: 'Subject' },\r\n  { id: 'year', numeric: false, disablePadding: false, label: 'Year' },\r\n  { id: 'month', numeric: false, disablePadding: false, label: 'Month' },\r\n  { id: 'series', numeric: false, disablePadding: false, label: 'Series' },\r\n  { id: 'paper', numeric: false, disablePadding: false, label: 'Paper' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminPapersComponent() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = React.useState([]);\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(true);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [id, setId] = React.useState([])\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [getData, setGetData] = React.useState(\"\")\r\n  const [progressBarStatus, setProgressBarStatus] = React.useState(\"\")\r\n\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    setProgressBarStatus('')\r\n    fetch(\"/dashboard/de/metadata\", {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${loginReducer}`\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.message) {\r\n          setRows([])\r\n          console.log(res)\r\n          setSelected([])\r\n        } else {\r\n          console.log(res)\r\n          setProgressBarStatus('d-none')\r\n          setRows(res)\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }, [getData])\r\n\r\n\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n, index) => index);\r\n      setSelected(newSelecteds);\r\n      const newId = rows.map((n, index) => n.id)\r\n      setId(newId)\r\n      return;\r\n    }\r\n    setId([])\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, index, id2) => {\r\n    const selectedIndex = selected.indexOf(index);\r\n    const selectedId = id.indexOf(id2)\r\n    let newSelected = [];\r\n    let newId = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, index);\r\n      newId = newId.concat(id, id2);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n      newId = newId.concat(id.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n      newId = newId.concat(id.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newId = newId.concat(\r\n        id.slice(0, selectedId),\r\n        id.slice(selectedId + 1)\r\n      )\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setId(newId)\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const callUseEffect = () => {\r\n    if (!getData) {\r\n      setGetData(true)\r\n    } else {\r\n      setGetData(false)\r\n    }\r\n  }\r\n\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setSelected([])\r\n    setId([])\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={`${classes.root} container d-flex align-items-center flex-column mt-5`}>\r\n      <Paper className={`${classes.paper} `}>\r\n        <EnhancedTableToolbar data={rows} progressBarStatus={progressBarStatus} id={id} selected={selected} callUseEffect={callUseEffect} />\r\n        <TableContainer style={{ boxShadow: \"0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\" }}>\r\n          <Table\r\n            className={`${classes.table} text-white`}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(index);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, index, row.id)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={index}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.system}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.board}</TableCell>\r\n                      <TableCell align=\"left\">{row.subject}</TableCell>\r\n                      <TableCell align=\"left\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.month}</TableCell>\r\n                      <TableCell align=\"left\">{row.series}</TableCell>\r\n                      <TableCell align=\"left\">{row.paper}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          style={{ border: 'none' }}\r\n          rowsPerPageOptions={[5, 10, 15]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      {/* <FormControlLabel\r\n        control={<Switch color=\"primary\" checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      /> */}\r\n    </div>\r\n  );\r\n}","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js",["186","187","188","189","190","191","192","193"],"import React, { useEffect, useState } from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { add_mcq, remove_mcq, reset_mcq , reset_board , update_mcq } from '../../action/index'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport axios from 'axios'\r\n// Dialog Box\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from '../../Modals/ModelNotification'\r\nimport ConfirmDialog from '../../Modals/ConfirmDialog'\r\nimport LinearProgressWithLabel from './LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n   },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AdminAddmcqsComponent(props) {\r\n    // React State hooks\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [topics, setTopics] = useState([])\r\n    const [openAlertDelete, setOpenAlertDelete] = React.useState(false);\r\n    const [openAlertUpdate, setOpenAlertUpdate] = React.useState(false);\r\n    const [ConfirmDialogStatus, setConfirmDialog] = React.useState(false);\r\n    const [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n    // Dialog Hooks\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n    const [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\n    const [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\n    const [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\n    const [ProgressBarStatus , setProgressBarStatus] = useState(false)\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = useState(10);\r\n    // React Redux\r\n    const mcqReducer = useSelector(state => state.mcqReducer)\r\n    const boardReducer = useSelector(state => state.boardReducer)\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    // for navigation\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (boardReducer.length === 0) {\r\n            history.push(\"/admin/panel/add/papers/\")\r\n        }\r\n        const timer = setInterval(() => {\r\n            setProgress((prevProgress) => (prevProgress >= 90 ? 10 : prevProgress + 7));\r\n         }, 800);\r\n         return () => {\r\n            clearInterval(timer);\r\n         };\r\n    }, [])\r\n    // Math compiler\r\n    // question input changehandler\r\n    const questionChange = (e) => {\r\n        setQuestion(e.target.value);\r\n    }\r\n    // SetTime Out Functions\r\n    const mcqButtonChangeBorder = (e) => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < mcqReducer.length; i++) {\r\n                if (i === e) {\r\n                    $(`.question${e}`).css({ border: '3px solid black' })\r\n                } else {\r\n                    $(`.question${i}`).css({ border: '3px solid white' })\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    const SelectedOptionsBackgroundChange = optionsbyindex => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < optionsbyindex.length; i++) {\r\n                if (optionsbyindex[i].correct === true) {\r\n                    $(`.mcq${i}`).addClass(\"mcq_selected\")\r\n                } else {\r\n                    $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    // on option created\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        let opt = $('.static_option').val();\r\n        const option = opt.trim();\r\n        if (option.length > 0) {\r\n            setOptions([...options, { correct: false, option: option }]);\r\n            $('.static_option').val(\"\");\r\n        }\r\n        SelectedOptionsBackgroundChange(options)\r\n    }\r\n    // on option delete\r\n    const deleteOption = (e) => {\r\n        const newOptions = options.filter((_, index) => index !== e);\r\n        setOptions(newOptions);\r\n        var optionsbyindex = newOptions;\r\n        SelectedOptionsBackgroundChange(optionsbyindex)\r\n    }\r\n    // on option selected\r\n    const onselect = (e) => {\r\n        let items = [...options];\r\n        let item = { ...items[e] };\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].correct === true) {\r\n                $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n                item.correct = true;\r\n                let item2 = { ...items[i] }\r\n                item2.correct = false\r\n                items[i] = item2\r\n            } else {\r\n                $(`.mcq${e}`).addClass(\"mcq_selected\")\r\n                item.correct = true;\r\n            }\r\n        }\r\n        if (item.correct === true) {\r\n            $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n            item.correct = true\r\n        }\r\n        items[e] = item;\r\n        setOptions(items)\r\n    }\r\n    // on mcq added\r\n    const add_mcq = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || options.length === 0) {\r\n            if (question === \"\") { setDialogDesc(\"Question Field Are Required!\")  }\r\n            else if (mark === \"\") { setDialogDesc(\"Marks Field Are Required!\")  }\r\n            else { setDialogDesc(\"Options are Missing!\") }\r\n            \r\n            setDialogStatus(true)\r\n        } else {\r\n            const items = [...options];\r\n            let status = 0;\r\n            for (var i = 0; i < items.length; i++) {\r\n                if (items[i].correct === true) {\r\n                    status = 1;\r\n                }\r\n            }\r\n            if (status === 1) {\r\n                const data = {\r\n                    question: question,\r\n                    marks: mark,\r\n                    options: options,\r\n                    topics: topics\r\n                }\r\n                props.changeState(data)\r\n                setOptions([])\r\n                setQuestion(\"\")\r\n                setTopics([])\r\n            } else {\r\n                setDialogDesc(\"Chose The correct Option\")\r\n                setDialogStatus(true)\r\n            }\r\n        }\r\n    }\r\n    // Get Old Mcq for Update\r\n    const getOldMcq = (e) => {\r\n        window.value = e;\r\n        mcqButtonChangeBorder(e)\r\n        setTopics([])\r\n        setOptions(mcqReducer[e].options)\r\n        setQuestion(mcqReducer[e].questions)\r\n        $('.marks').val(mcqReducer[e].marks);\r\n        setTopics(mcqReducer[e].topics)\r\n        // Selected Options\r\n        var optionsbyindex = mcqReducer[e].options;\r\n        SelectedOptionsBackgroundChange(optionsbyindex)\r\n        // Hide and show buttons\r\n        $('.next_mcq_button').css(\"display\", \"none\")\r\n        $('.update_mcq_button').css(\"display\", \"inline\");\r\n        $('.delete_mcq_button').css(\"display\", \"inline\");\r\n    }\r\n    // Update Mcq By its Id\r\n    const update_mcq_by_id = () => {\r\n        if (window.value != null) {\r\n            const mark = $('.marks').val();\r\n            if (question === \"\" || mark === \"\" || options.length === 0) {\r\n                setDialogDesc(\"All Fields Are Required?\")\r\n                setDialogStatus(true)\r\n            } else {\r\n                const items = [...options];\r\n                let status = 0;\r\n                for (var i = 0; i < items.length; i++) {\r\n                    if (items[i].correct === true) {\r\n                        status = 1;\r\n                    }\r\n                }\r\n                if (status === 1) {\r\n                    const mark = $('.marks').val();\r\n                    const data = { question: question, marks: mark, options: options, topics: topics, index: window.value }\r\n                    props.updateState(data)\r\n                    setQuestion(\"\")\r\n                    setOptions([])\r\n                    setTopics([])\r\n                    setOpenAlertUpdate(true)\r\n                    mcqButtonChangeBorder(-1)\r\n                    $('.next_mcq_button').css(\"display\", \"inline\")\r\n                    $('.update_mcq_button').css(\"display\", \"none\");\r\n                    $('.delete_mcq_button').css(\"display\", \"none\");\r\n                } else {\r\n                    setDialogDesc(\"Chose The Correct Option\")\r\n                    setDialogStatus(true)\r\n                }\r\n            }\r\n        } else {\r\n            setDialogDesc(\"Select MCQ For Delete?\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Delete Mcq By its Id\r\n    const delete_mcq_by_id = () => {\r\n        if (window.value != null) {\r\n            const index = window.value;\r\n            setConfirmDialog(false)\r\n            props.deleteState(index)\r\n            setQuestion(\"\")\r\n            setOptions([])\r\n            setTopics([])\r\n            mcqButtonChangeBorder(-1)\r\n            setOpenAlertDelete(true);\r\n            $('.next_mcq_button').css(\"display\", \"inline\")\r\n            $('.update_mcq_button').css(\"display\", \"none\");\r\n            $('.delete_mcq_button').css(\"display\", \"none\");\r\n        } else {\r\n            setDialogDesc(\"Please Select MCQ for Delete\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Add Topics\r\n    const submitTopic = (e) => {\r\n        e.preventDefault()\r\n        setTopics([...topics, { topic: topic }])\r\n        setTopic(\"\")\r\n    }\r\n    // Delete Topics\r\n    const deleteTopic = (e) => {\r\n        const deleteTopic = topics.filter((item, index) => e !== index);\r\n        setTopics(deleteTopic)\r\n    }\r\n    // Questinon Output Toggle\r\n    const question_output_hide_show = () => {\r\n        $('.question_output').slideToggle();\r\n    }\r\n    // Create JSON\r\n    const send_json = () => {\r\n        const array = new Array(boardReducer[0]);\r\n        mcqReducer.map((item, i) => {\r\n            array.push(item)\r\n        })\r\n        const jsonData = JSON.stringify(array);\r\n        document.write(jsonData)\r\n    }\r\n    // Close Alert\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlertDelete(false);\r\n        setOpenAlertUpdate(false);\r\n        setDialogStatus(false);\r\n        setConfirmDialog(false)\r\n    };\r\n    // Finish Exam\r\n    const finish_paper = () => {\r\n        setProgressBarStatus(true)\r\n        const data = new Array(boardReducer[0]);\r\n        mcqReducer.map((item, i) => {\r\n            data.push(item)\r\n        })\r\n        fetch(\"/dashboard/de/questions\",{\r\n            method: 'POST', \r\n            headers: {\r\n               'Content-Type': 'application/json',\r\n               'Authorization': `Bearer ${loginReducer}`\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            props.resetState();\r\n            props.resetBoard();\r\n            setProgressBarStatus(false)\r\n            history.push(\"/admin/panel/papers\")\r\n        })\r\n        .catch((err)=> {\r\n                console.log(err)\r\n                setProgressBarStatus(false)\r\n                setDialogDesc(\"Some went wrong. please try Again..\")\r\n                setDialogStatus(true)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <section className=\"add_mcq_main pt-3\">\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-2 mb-5 mcqs_list_main \">\r\n                        <div className=\"bg-white py-3 container-fluid\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            {mcqReducer.map((item, i) => (\r\n                                <button key={i} style={{ width: '40px' }} className={`col-3 text-center bg-success text-white question${i}`} onClick={() => getOldMcq(i)}>{i + 1}</button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-7 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        {/* Responsive Meta Data */}\r\n                        <div className=\"table-responsive mx-auto\">\r\n                            <table className=\"table p-0 m-0\">\r\n                                <tbody>\r\n                                    {boardReducer.map((item, i) => (\r\n                                        <tr className=\"text-center\">\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.system}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.board}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.subject}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.year}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.month}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.series}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.paper}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <form onSubmit={submit} className=\"container-fluid\" autoComplete=\"off\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={question_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group question_output col-12\" style={{fontSize: markdownFontSize}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <div className=\"form-group m-0\">\r\n                                <input type=\"text\" name=\"option_input\" placeholder=\"Enter Option\" style={{ width: \"90%\" }} className=\"d-inline static_option form-control\" required /> <button type=\"submit\" className=\"p-1 mt-1\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                            </div>\r\n                            {options.map((item, i) => {\r\n                                return <div key={i} className={`mcqDisplay mcq${i}`}><p style={{ width: '80%', fontSize: '15px', wordWrap: 'break-word' }} className=\"option_text py-auto mb-2\">{item.option}</p><div className=\"mcqDisplay__button\"><svg onClick={() => onselect(i)} className=\"MuiSvgIcon-root mcqDisplay__correct\" style={{ cursor: 'pointer' }} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path></svg><svg onClick={() => deleteOption(i)} style={{ cursor: 'pointer' }} className=\"MuiSvgIcon-root mcqDisplay__delete\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path></svg></div></div>\r\n                            })}\r\n                        </form>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-between w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={() => history.push(\"/admin/panel/add/images\")} className=\"bg-success mx-2 mt-2 btn mybutton\">Next Step</button>\r\n                                            <button type=\"button\" onClick={finish_paper} className=\"bg-success mx-2 mt-2 btn mybutton\">Finish</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={() => setConfirmDialog(true)} className=\"border mx-2 mt-2 mybutton delete_mcq_button btn btn-info\">delete</button>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={update_mcq_by_id} className=\"border mt-2 mybutton update_mcq_button btn mybutton btn-info\">update</button>\r\n                                            <Button variant=\"contained\" onClick={add_mcq} className=\"bg-info mybutton next_mcq_button\">Next</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-3\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay`} style={{fontSize: '12px',fontWeight: '500'}}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" style={{fontSize: '16px'}} onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {/* Alerts */}\r\n            <Snackbar open={openAlertDelete} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Deleted Successfull\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openAlertUpdate} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Updated Successfull\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* Dialog Box */}\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n            {/*   Confirm Dialog Box   */}\r\n            <ConfirmDialog delete_mcq_by_id={delete_mcq_by_id} ConfirmDialog={ConfirmDialogStatus} ConfirmDesc=\"Are you sure you want to delete this field?\" handleClose={handleClose} />\r\n            {/* Progress Bar */}\r\n            <Backdrop className={classes.backdrop} open={ProgressBarStatus}>\r\n                <LinearProgressWithLabel value={progress} />;\r\n            </Backdrop>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeState: (data) => {\r\n            dispatch(add_mcq(data))\r\n        },\r\n        updateState: (data) => {\r\n            dispatch(update_mcq(data))\r\n        },\r\n        deleteState: (data) => {\r\n            dispatch(remove_mcq(data))\r\n        },\r\n        resetState: () => {\r\n            dispatch(reset_mcq())\r\n        },\r\n        resetBoard: () => {\r\n            dispatch(reset_board())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddmcqsComponent);","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddImagesComponent.js",["194","195","196"],"import React, { useState, useEffect } from 'react'\r\nimport { FcAddImage } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { useSelector } from 'react-redux'\r\nimport LinearProgressWithLabel from './LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n   },\r\n}));\r\n\r\n\r\nconst AdminAddImagesComponent = () => {\r\n   const mcqReducer = useSelector(state => state.mcqReducer)\r\n   const boardReducer = useSelector(state => state.boardReducer)\r\n   const [open, setOpen] = React.useState(false);\r\n   // Create Progress\r\n   const classes = useStyles();\r\n   const [progress, setProgress] = useState(10);\r\n   useEffect(() => {\r\n      const timer = setInterval(() => {\r\n         setProgress((prevProgress) => (prevProgress >= 90 ? 10 : prevProgress + 7));\r\n      }, 800);\r\n      return () => {\r\n         clearInterval(timer);\r\n      };\r\n   }, []);\r\n   // Upload images\r\n   const upload_imgaes = (files) => {\r\n      handleToggle();\r\n      console.log(files)\r\n      $('.upload-icon').removeClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#fff' })\r\n   }\r\n   // on Drag Enter\r\n   const handleDragEnter = (e) => {\r\n      e.preventDefault();\r\n   }\r\n   // On Drag Over\r\n   const handleDragOver = (e) => {\r\n      e.preventDefault();\r\n      $('.upload-icon').addClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#96a599' })\r\n   }\r\n   // On Drag Leave\r\n   const handleDragLeave = (e) => {\r\n      e.preventDefault();\r\n      $('.upload-icon').removeClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#fff' })\r\n   }\r\n   // On Dropg images\r\n   const handleDrop = (e) => {\r\n      e.preventDefault();\r\n      let images = e.dataTransfer.files\r\n      // Upload Images function callings\r\n      upload_imgaes(images)\r\n\r\n   }\r\n   // On custom add images\r\n   const handleAddImage = (e) => {\r\n      e.preventDefault();\r\n      let images = e.target.files\r\n      // Upload Images function callings\r\n      upload_imgaes(images)\r\n   }\r\n   // progressbra close\r\n   const handleClose = () => {\r\n      setOpen(false);\r\n   };\r\n   //  Propgressbar toogle\r\n   const handleToggle = () => {\r\n      setOpen(!open);\r\n   };\r\n\r\n   return (\r\n      <div className=\"image-uploader-wrapper\">\r\n         <div className=\"display-box\">\r\n            <div className=\"icon-text-box\">\r\n               <div className=\"upload-icon\">\r\n                  <FcAddImage className=\"upload_icon\" />\r\n               </div>\r\n            </div>\r\n            <div>\r\n               <input\r\n                  type=\"file\"\r\n                  id=\"upload-image-input\"\r\n                  className=\"upload-image-input\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  onDrop={handleDrop}\r\n                  onDragEnter={handleDragEnter}\r\n                  onDragOver={handleDragOver}\r\n                  onDragLeave={handleDragLeave}\r\n                  onChange={handleAddImage}\r\n               />\r\n            </div>\r\n         </div>\r\n         <div>\r\n         </div>\r\n         <Backdrop className={classes.backdrop} open={open}>\r\n            <LinearProgressWithLabel value={progress} />;\r\n      </Backdrop>\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\n\r\n\r\nexport default AdminAddImagesComponent\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js",["197"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n    return (\r\n      <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        width=\"100\"\r\n        heigth=\"100\"\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" className=\"text-white\">{`${Math.round(\r\n          props.value\r\n)}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n    )\r\n  }\r\n\r\n  export default LinearProgressWithLabel;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AddDataOperator.js",["198","199","200","201"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useSelector } from 'react-redux'\r\nimport { FcEditImage, FcDeleteDatabase } from \"react-icons/fc\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport ConfirmDialog from \"../../Modals/ConfirmDialog\";\r\nimport $ from 'jquery'\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst DataOperatorUI = () => {\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    const [data, setData] = useState({\r\n        username: \"\",\r\n        email: \"\"\r\n    })\r\n    const [rows, setRows] = React.useState([])\r\n    const [openSnakBar, setOpenSnakBar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState(\"\")\r\n    const [confirmDialogStatus, setConfirmDialogStatus] = React.useState(false)\r\n    const [confirmDialogDesc, setConfirmDialogDesc] = React.useState(false)\r\n    const [callUseEffect, setCallUseEffect] = useState(false)\r\n\r\n    // Get Operator Data\r\n    React.useEffect(() => {\r\n        fetch(\"/superuser/operators\")\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.message) {\r\n                setRows([])\r\n            }else {\r\n                setRows(res)\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    },[callUseEffect])\r\n\r\n\r\n    // Call Use Effect \r\n    const fetchData = () => {\r\n        if (callUseEffect){\r\n            setCallUseEffect(false)\r\n        }else {\r\n            setCallUseEffect(true)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch(\"/superuser/operator\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            setSnackbarMessage(\"Operator Added Successful!\")\r\n            setOpenSnakBar(true)\r\n            setData({ username: \"\", email: \"\" })\r\n            fetchData();\r\n        })\r\n        .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleChange = (e, name) => {\r\n        setData({ ...data, [name]: e.target.value })\r\n    }\r\n\r\n\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setOpenSnakBar(false);\r\n      };\r\n\r\n    const setOperatorData = (id) => {\r\n        rows.map((item ,i )=> {\r\n            if (item.id == id) {\r\n                window.updateId = item.id;\r\n                setData({username: item.username, email: item.email})\r\n                // Update Button Show\r\n                $('.updateButton').removeClass(\"d-none\")\r\n                $('.updateButton').addClass('d-flex')\r\n                // Add Button Hide\r\n                $('.addButton').addClass(\"d-none\")\r\n                $('.addButton').removeClass(\"d-flex\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const updateOperator = (id) => {\r\n        if (window.updateId !== \"\") {\r\n        const body = {\r\n            id: window.updateId,\r\n            username: data.username,\r\n            email: data.email\r\n        \r\n        }  \r\n        fetch(`/superuser/operator/${window.updateId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(body),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res !== 0){\r\n                setSnackbarMessage(\"Operator Updated Successful!\")\r\n                setOpenSnakBar(true)\r\n                // Update Button Hide\r\n                $('.updateButton').removeClass(\"d-flex\")\r\n                $('.updateButton').addClass('d-none')\r\n                // Add Button Show\r\n                $('.addButton').addClass(\"d-flex\")\r\n                $('.addButton').removeClass(\"d-none\")\r\n                setData({ username: \"\", email: \"\"})\r\n                fetchData();\r\n            }\r\n        })\r\n        .catch((err) => console.log(err))\r\n        window.updateId = \"\"\r\n    }\r\n}\r\n\r\n    const openConfirmDialog = (id) => {\r\n        window.deleteId = id;\r\n        setConfirmDialogDesc(\"Are you sure you want to delete this field!\")\r\n        setConfirmDialogStatus(true)\r\n    }\r\n\r\n    const deleteOperator = () => {\r\n        if (window.deleteId === \"\") {\r\n            alert('Some went wrong please try again')\r\n        }else {\r\n            fetch(`/superuser/operator/${window.deleteId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': \"application/json\"\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                setConfirmDialogStatus(false)\r\n                setSnackbarMessage(\"Operator Deleted Successful!\")\r\n                setOpenSnakBar(true)\r\n                fetchData();\r\n            })\r\n            .catch((err) => console.log(err))\r\n            window.deleteId = \"\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid py-5\" style={{ background: '#E5E5E5', minHeight: '100vh' }}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <form onSubmit={handleSubmit} className=\"py-4 rounded bg-white\">\r\n                        <h2 className=\"text-center\">Add Operator</h2><br />\r\n                        <TextField type=\"text\" value={data.username} onChange={(e) => handleChange(e, \"username\")} id=\"standard-basic\" label=\"User Name\" className=\"mx-auto d-flex\" style={{ width: '80%' }} required /><br />\r\n                        <TextField type=\"email\" value={data.email} onChange={(e) => handleChange(e, \"email\")} id=\"standard-basic\" label=\"User Email\" className=\"mx-auto d-flex\" style={{ width: '80%' }} required />\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"mx-auto addButton d-flex mt-5\">Add</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={updateOperator} className=\"d-none updateButton mx-auto mt-5\">Update</Button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"rounded bg-white\">\r\n                        <h1 className=\"text-center m-0 shadow border py-4\">All Operators</h1>\r\n                        <TableContainer className=\"pb-3\" component={Paper} style={{ maxHeight: \"70vh\", overflowY: 'scroll' }}>\r\n                            <Table aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"border font-weight-bold\" align=\"center\">User Name</TableCell>\r\n                                        <TableCell className=\"border font-weight-bold\" align=\"center\">User Email</TableCell>\r\n                                        <TableCell className=\"border font-weight-bold\" colSpan=\"2\" align=\"center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.map((row, index) => (\r\n                                        <TableRow key={row.name}>\r\n                                            <TableCell className=\"border\" align=\"center\">\r\n                                                {row.username}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\">{row.email}</TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\"><FcEditImage onClick={() => setOperatorData(row.id)} style={{ cursor: 'pointer', fontSize: \"23px\" }} /></TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\"><FcDeleteDatabase onClick={() => openConfirmDialog(row.id)} style={{ cursor: 'pointer', fontSize: \"23px\" }} /></TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Snak Bar */}\r\n\r\n            <Snackbar open={openSnakBar} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            {/* Model For Information */}\r\n\r\n            {/*   Confirm Dialog Box   */}\r\n            <ConfirmDialog delete_mcq_by_id={deleteOperator} ConfirmDialog={confirmDialogStatus} ConfirmDesc={confirmDialogDesc} handleClose={() => setConfirmDialogStatus(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataOperatorUI;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ModelNotification.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ConfirmDialog.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\SelectDialog.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\EnhancedTableToolbar.js",["202","203"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Button } from '@material-ui/core'\r\nimport { MdModeEdit } from \"react-icons/md\"\r\nimport { useHistory } from 'react-router-dom'\r\nimport QuestionList from \"./UpdatePaper/QuestionList\";\r\nimport { BsFillEyeFill } from \"react-icons/bs\";\r\nimport DialogModalMetaData from './UpdatePaper/DialogModalMetaData'\r\nimport { useSelector } from 'react-redux'\r\nimport ConfirmDialog from '../../Modals/ConfirmDialog'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const [editQuestion, setEditQuestion] = useState(false)\r\n  const { selected, id, data } = props;\r\n  const [dialogMetaData, setDialogMetaData] = useState(false)\r\n  const numSelected = selected.length;\r\n  const history = useHistory();\r\n  const [singleIdMetaData, setSingleIdMetaData] = useState([])\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [confirmDialogStatus, setConfirmDialogStatus] = useState(false)\r\n  const { callUseEffect } = props\r\n\r\n\r\n  const openDialogMetaData = () => {\r\n    data.map((item, i) => {\r\n      if (item.id === id[0]) {\r\n        setSingleIdMetaData(item)\r\n      }\r\n    })\r\n    setDialogMetaData(true)\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setEditQuestion(true);\r\n  };\r\n\r\n\r\n  const deletePapers = () => {\r\n    fetch(`/dashboard/de/metadata/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${loginReducer}`\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log(res)\r\n        setConfirmDialogStatus(false)\r\n        callUseEffect();\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  const onHideQuestionList = () => {\r\n    setEditQuestion(false)\r\n  }\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n\r\n      {/* Edit Papers */}\r\n      <QuestionList open={editQuestion} id={id} onClose={onHideQuestionList} />\r\n\r\n      {/* Modal Dialog MetaData */}\r\n      <DialogModalMetaData callUseEffect={callUseEffect} data={singleIdMetaData} DialogStatus={dialogMetaData} id={id} handleClose={() => setDialogMetaData(false)} />\r\n\r\n      {/* Confirm Modal Dialog Status */}\r\n      <ConfirmDialog delete_mcq_by_id={deletePapers} ConfirmDialog={confirmDialogStatus} ConfirmDesc=\"Are you sure you want to delete this Paper?\" handleClose={() => setConfirmDialogStatus(false)} />\r\n\r\n\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n            <Typography className={`${classes.title} align-items-center d-flex`} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n              <div className={`spinner-border mr-3 ${props.progressBarStatus}`} role=\"status\"></div>\r\n              Papers List\r\n            </Typography>\r\n        )}\r\n\r\n      {numSelected > 0 ? (\r\n        (numSelected !== 1 ? (\r\n          <IconButton aria-label=\"Delete Paper\" onClick={() => setConfirmDialogStatus(true)}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        ) : (\r\n            <div className=\"d-flex\">\r\n              <IconButton aria-label=\"Delete Paper\" onClick={() => setConfirmDialogStatus(true)}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n              <IconButton aria-label=\"Edit Paper\" onClick={openDialogMetaData}>\r\n                <MdModeEdit />\r\n              </IconButton>\r\n              <IconButton aria-label=\"See Questions\" onClick={handleClickOpen}>\r\n                <BsFillEyeFill />\r\n              </IconButton>\r\n            </div>\r\n          ))\r\n      ) : (\r\n          <div className=\"d-flex justify-content-end w-50\">\r\n            <Tooltip title=\"Add Paper\">\r\n              <Button className=\"py-0\" size=\"small\" variant=\"outlined\" color=\"primary\" onClick={() => history.push(\"/admin/panel/add/papers\")}>\r\n                Add Paper\r\n                  </Button>\r\n            </Tooltip>\r\n            <Tooltip title=\"Refresh Data\">\r\n              <IconButton aria-label=\"See Questions\" onClick={() => callUseEffect()}>\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\n\r\nexport default EnhancedTableToolbar;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\EditQuestions.js",["204","205","206","207","208","209","210","211","212","213","214"],"import React, { useEffect, useState } from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from '../../../Modals/ModelNotification'\r\nimport LinearProgressWithLabel from '../LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport { Fab } from '@material-ui/core'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition2 = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction EditQuestion(props) {\r\n  const classes2 = useStyles2();\r\n  const { open, onClose } = props\r\n\r\n  const handleCloseDialogBox = () => {\r\n    onClose(false)\r\n  };\r\n\r\n\r\n  // Edit Questions Code\r\n  // React State hooks\r\n  const [question, setQuestion] = useState(\"\")\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [options, setOptions] = useState([]);\r\n  const [topics, setTopics] = useState([])\r\n  const [openAlertDelete, setOpenAlertDelete] = React.useState(false);\r\n  const [openAlertUpdate, setOpenAlertUpdate] = React.useState(false);\r\n  const [ConfirmDialogStatus, setConfirmDialog] = React.useState(false);\r\n  const [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n  // Dialog Hooks\r\n  const [DialogStatus, setDialogStatus] = React.useState(false);\r\n  const [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\n  const [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\n  const [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\n  const [ProgressBarStatus, setProgressBarStatus] = useState(false)\r\n  const classes = useStyles();\r\n  const [progress, setProgress] = useState(10);\r\n  // React Redux\r\n  const mcqReducer = useSelector(state => state.mcqReducer)\r\n  const boardReducer = useSelector(state => state.boardReducer)\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [getData, setGetData] = useState(\"\")\r\n  // for navigation\r\n  const history = useHistory();\r\n\r\n\r\n  const RefreshData = () => {\r\n    if (getData === true) {\r\n      setGetData(false)\r\n    } else {\r\n      setGetData(true)\r\n    }\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // question input changehandler\r\n  const questionChange = (e) => {\r\n    setQuestion(e.target.value);\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Change the background of selected options\r\n  const SelectedOptionsBackgroundChange = optionsbyindex => {\r\n    setTimeout(() => {\r\n      for (var i = 0; i < optionsbyindex.length; i++) {\r\n        if (optionsbyindex[i].correct === true) {\r\n          $(`.mcq${i}`).addClass(\"mcq_selected\")\r\n        } else {\r\n          $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n        }\r\n      }\r\n    }, 100)\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Get Mcqs From API\r\n  React.useEffect(() => {\r\n    if (window.EditQuestionId !== undefined) {\r\n      fetch(`/dashboard/de/question/${window.EditQuestionId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${loginReducer}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (!res.message) {\r\n            setQuestion(res.questions)\r\n            setOptions(res.options)\r\n            SelectedOptionsBackgroundChange(res.options)\r\n            $('.marks').val(res.marks);\r\n            if (res.topics === undefined) {\r\n              setTopics([])\r\n            } else {\r\n              setTopics(res.topics)\r\n            }\r\n          }\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n  }, [window.EditQuestionId, getData])\r\n  // on option created\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    let opt = $('.static_option').val();\r\n    const option = opt.trim();\r\n    if (option.length > 0) {\r\n      setOptions([...options, { correct: false, option: option }]);\r\n      $('.static_option').val(\"\");\r\n    }\r\n    SelectedOptionsBackgroundChange(options)\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // on option delete\r\n  const deleteOption = (e) => {\r\n    const newOptions = options.filter((_, index) => index !== e);\r\n    setOptions(newOptions);\r\n    var optionsbyindex = newOptions;\r\n    SelectedOptionsBackgroundChange(optionsbyindex)\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // on option selected\r\n  const onselect = (e) => {\r\n    let items = [...options];\r\n    let item = { ...items[e] };\r\n    for (var i = 0; i < items.length; i++) {\r\n      if (items[i].correct === true) {\r\n        $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n        item.correct = true;\r\n        let item2 = { ...items[i] }\r\n        item2.correct = false\r\n        items[i] = item2\r\n      } else {\r\n        $(`.mcq${e}`).addClass(\"mcq_selected\")\r\n        item.correct = true;\r\n      }\r\n    }\r\n    if (item.correct === true) {\r\n      $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n      item.correct = true\r\n    }\r\n    items[e] = item;\r\n    setOptions(items)\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Add Topics\r\n  const submitTopic = (e) => {\r\n    e.preventDefault()\r\n    setTopics([...topics, { topic: topic }])\r\n    setTopic(\"\")\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Delete Topics\r\n  const deleteTopic = (e) => {\r\n    const deleteTopic = topics.filter((item, index) => e !== index);\r\n    setTopics(deleteTopic)\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Questinon Output Toggle\r\n  const question_output_hide_show = () => {\r\n    $('.question_output').slideToggle();\r\n  }\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Close Alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenAlertDelete(false);\r\n    setOpenAlertUpdate(false);\r\n    setDialogStatus(false);\r\n    setConfirmDialog(false)\r\n  };\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  // Update Question\r\n  const update_question = () => {\r\n    // /dashboard/de/question/:id\r\n    if (window.EditQuestionId !== undefined) {\r\n      // Validation\r\n      const mark = $('.marks').val();\r\n      if (question === \"\" || mark === \"\" || options.length === 0) {\r\n        if (question === \"\") { setDialogDesc(\"Question Field Are Required!\") }\r\n        else if (mark === \"\") { setDialogDesc(\"Marks Field Are Required!\") }\r\n        else { setDialogDesc(\"Options are Missing!\") }\r\n\r\n        setDialogStatus(true)\r\n      } else {\r\n        const items = [...options];\r\n        let status = 0;\r\n        for (var i = 0; i < items.length; i++) {\r\n          if (items[i].correct === true) {\r\n            status = 1;\r\n          }\r\n        }\r\n        if (status === 1) {\r\n          // Update Question\r\n          const data = {\r\n            \"id\": window.EditQuestionId,\r\n            \"questions\": question,\r\n            \"marks\": mark,\r\n            \"options\": options,\r\n            \"topic\": topics\r\n          }\r\n\r\n          fetch(`/dashboard/de/question/${window.EditQuestionId}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              'Authorization': `Bearer ${loginReducer}`\r\n            },\r\n            body: JSON.stringify(data)\r\n          })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n              props.getAllQuestions();\r\n              window.EditQuestionId = undefined\r\n              onClose(false)\r\n            })\r\n            .catch(err => console.log(err))\r\n        } else {\r\n          setDialogDesc(\"Chose The correct Option\")\r\n          setDialogStatus(true)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleCloseDialogBox} TransitionComponent={Transition2}>\r\n        <AppBar className={classes2.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes2.title}>\r\n              Update Questions\r\n            </Typography>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCloseDialogBox} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <section className=\"pt-3\" style={{ background: \"#F5F3F9\", height: 'auto', paddingBottom: \"70px\" }}>\r\n          {/* Add MCQs Child  */}\r\n          <div className=\"add_mcq_child container\">\r\n            <div className=\"row\">\r\n              {/* Mcqs Left Side */}\r\n              <div className=\"col-lg-8 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                <br />\r\n                <form onSubmit={submit} className=\"container-fluid\" autoComplete=\"off\" style={{ minHeight: '60vh' }}>\r\n                  <div className=\"form-group\">\r\n                    <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value)} className=\"small ml-3\" style={{ height: '25px' }}>\r\n                      <option value=\"12px\">12px</option>\r\n                      <option value=\"13px\">13px</option>\r\n                      <option value=\"14px\">14px</option>\r\n                      <option value=\"15px\">15px</option>\r\n                      <option value=\"16px\">16px</option>\r\n                    </select>\r\n                    <button type=\"button\" onClick={question_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                  </div>\r\n                  <div className=\"p-2 form-group question_output col-12\" style={{ fontSize: markdownFontSize }}>\r\n                    <MathpixLoader>\r\n                      <MathpixMarkdown text={question} />\r\n                    </MathpixLoader>\r\n                  </div>\r\n                  <div className=\"form-group m-0\">\r\n                    <input type=\"text\" name=\"option_input\" placeholder=\"Enter Option\" style={{ width: \"90%\" }} className=\"d-inline static_option form-control\" required /> <button type=\"submit\" className=\"p-1 mt-1\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                  </div>\r\n                  {options.map((item, i) => {\r\n                    return <div key={i} className={`mcqDisplay mcq${i}`}><p style={{ width: '80%', fontSize: '15px', wordWrap: 'break-word' }} className=\"option_text py-auto mb-2\">{item.option}</p><div className=\"mcqDisplay__button\"><svg onClick={() => onselect(i)} className=\"MuiSvgIcon-root mcqDisplay__correct\" style={{ cursor: 'pointer' }} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path></svg><svg onClick={() => deleteOption(i)} style={{ cursor: 'pointer' }} className=\"MuiSvgIcon-root mcqDisplay__delete\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path></svg></div></div>\r\n                  })}\r\n                </form>\r\n                <div className=\"container-fluid\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 mx-auto mt-4\">\r\n                      <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-center w-100 \">\r\n                        <div>\r\n                          <button type=\"button\" onClick={update_question} className=\"border mt-2 update_mcq_button btn mybutton btn-info\">update</button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Mcqs Right Side */}\r\n              <div className=\"col-lg-4\">\r\n                <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                  <div className=\"form-group mb-4\">\r\n                    <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                  </div>\r\n                  <div className=\"topics_main mt-3 container-fluid\">\r\n                    <div className=\"row\">\r\n                      <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                      <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      {topics.map((item, i) => {\r\n                        return <div key={i} className={`topicDisplay`} style={{ fontSize: '12px', fontWeight: '500' }}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" style={{ fontSize: '16px' }} onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n              <Fab color=\"primary\" style={{ position: \"fixed\", bottom: \"30px\", right: \"50px\" }} aria-label=\"add\" onClick={RefreshData} >\r\n              <RefreshIcon />\r\n            </Fab>\r\n          </div>\r\n          \r\n          <br />\r\n          {/* Alerts */}\r\n          <Snackbar open={openAlertDelete} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n              Deleted Successfull\r\n                </Alert>\r\n          </Snackbar>\r\n          <Snackbar open={openAlertUpdate} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"success\">\r\n              Updated Successfull\r\n                </Alert>\r\n          </Snackbar>\r\n          {/* Dialog Box */}\r\n          <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n          {/* Progress Bar */}\r\n          <Backdrop className={classes.backdrop} open={ProgressBarStatus}>\r\n            <LinearProgressWithLabel value={progress} />\r\n          </Backdrop>\r\n        </section>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default EditQuestion;",["215","216"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\QuestionList.js",["217","218","219","220","221"],"import React, { useEffect, useState } from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Button from '@material-ui/core/Button';\r\n// Dialog Box\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useSelector } from 'react-redux';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { MdModeEdit } from \"react-icons/md\"\r\nimport { BsFillEyeFill } from \"react-icons/bs\";\r\nimport ConfirmDialog from '../../../Modals/ConfirmDialog'\r\nimport EditQuestions from './EditQuestions'\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AddQuestion from '../UpdatePaper/AddQuestion'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport SeeQuestion from './SeeQuestion'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  }\r\n}));\r\n\r\nconst Transition2 = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction QuestionList(props) {\r\n  const classes = useStyles();\r\n  const { open, onClose, id } = props\r\n  const [rows, setRows] = React.useState([]);\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [openSeeDialog, setOpenSeeDialog] = React.useState(false);\r\n  const [confirmDialogStatus, setConfirmDialogStatus] = React.useState(false)\r\n  const [getQuestions, setGetQuestions] = React.useState(false)\r\n  const [editQuestionsStatus, setEditQuestionsStatus] = React.useState(false);\r\n  const [progressBarStatus, setProgressBarStatus] = React.useState(\"\")\r\n  const [openAddQuestion, setOpenAddQuestion] = React.useState(false);\r\n  \r\n\r\n  const getAllQuestions = () => {\r\n    if (getQuestions === false) {\r\n      setGetQuestions(true)\r\n    } else {\r\n      setGetQuestions(false)\r\n    }\r\n  }\r\n\r\n  const handleCloseDialogBox = () => {\r\n    onClose(false)\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setRows([])\r\n    setProgressBarStatus(\"\")\r\n    if (id.length === 1) {\r\n      fetch(`/dashboard/de/questions/${id}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${loginReducer}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          setRows(res)\r\n          setProgressBarStatus(\"d-none\")\r\n        })\r\n        .catch(err => console.log(err))\r\n    }else {\r\n      handleCloseDialogBox();\r\n    }\r\n  }, [id, getQuestions])\r\n\r\n  const deleteQuestion = () => {\r\n    if (window.DeleteQuestionsId !== \"\") {\r\n      if (id.length !== 0) {\r\n        fetch(`/dashboard/de/question/${window.DeleteQuestionsId}/meta/${id}`, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${loginReducer}`\r\n          }\r\n        })\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            setConfirmDialogStatus(false);\r\n            getAllQuestions();\r\n            window.DeleteQuestionsId = \"\";\r\n          })\r\n          .catch(err => console.log(err))\r\n      }\r\n    } else {\r\n      alert('Some Went Wrong. Please Try Again...')\r\n      setConfirmDialogStatus(false)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const openConfirmDialog = (Qid) => {\r\n    window.DeleteQuestionsId = Qid;\r\n    setConfirmDialogStatus(true)\r\n  }\r\n\r\n  return (\r\n    <div >\r\n      <Dialog fullScreen open={open} onClose={handleCloseDialogBox} TransitionComponent={Transition2} style={{ zIndex: '1' }}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Update Questions\r\n            </Typography>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleCloseDialogBox} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <br />\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div className={`${progressBarStatus} spinner-border`} role=\"status\"></div>\r\n        </div>\r\n        <TableContainer component={Paper}>\r\n          <Table className={`${classes.table}`} aria-label=\"simple table\">\r\n              {rows.map((row, index) => (\r\n                <TableRow key={index} className=\"border\">\r\n                  <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-10\">\r\n                        <TableCell className=\"font-weight-bolder\">{index + 1})</TableCell>\r\n                        <TableCell className=\"onHoverBoldText\" onClick={() => { window.SeeQuestionId = row.id; setOpenSeeDialog(true) }} style={{ cursor: 'pointer' }}>{(row.questions.length >= 100) ? row.questions.slice(0, 100)+'...' : row.questions }</TableCell>\r\n                      </div>\r\n                      <div className=\"col-2\">\r\n                        <div className=\"d-flex\">\r\n                          <IconButton aria-label=\"Delete Question\" onClick={() => openConfirmDialog(row.id)}>\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                          <IconButton aria-label=\"Edit Question\" onClick={() => { window.EditQuestionId = row.id; setEditQuestionsStatus(true) }}>\r\n                            <MdModeEdit />\r\n                          </IconButton>\r\n                          <IconButton aria-label=\"See Question\" onClick={() => { window.SeeQuestionId = row.id; setOpenSeeDialog(true) }}>\r\n                            <BsFillEyeFill />\r\n                          </IconButton>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </TableRow>\r\n              ))}\r\n            <Fab color=\"primary\" style={{ position: \"fixed\", bottom: \"100px\", right:\"50px\" }} aria-label=\"refresh\" onClick={getAllQuestions}>\r\n              <RefreshIcon />\r\n            </Fab>\r\n            <Fab color=\"primary\" style={{ position: \"fixed\", bottom: \"30px\", right:\"50px\" }} aria-label=\"add\" onClick={() => setOpenAddQuestion(true)}>\r\n              <AddIcon />\r\n            </Fab>\r\n            {/* Add Question Dialog */}\r\n            <AddQuestion getAllQuestions={getAllQuestions} id={id} open={openAddQuestion}  handleClose={() => setOpenAddQuestion(false)} />\r\n          </Table>\r\n          <br /><br /><br /><br /><br /><br /><br /><br />\r\n        </TableContainer>\r\n      </Dialog>\r\n\r\n      {/* Confirm Modal Dialog */}\r\n      <ConfirmDialog delete_mcq_by_id={deleteQuestion} ConfirmDialog={confirmDialogStatus} ConfirmDesc=\"Are you sure you want to delete this Question?\" handleClose={() => setConfirmDialogStatus(false)} />\r\n\r\n      {/* Edit Questions Modal Dialog */}\r\n      <EditQuestions open={editQuestionsStatus} getAllQuestions={getAllQuestions} onClose={() => setEditQuestionsStatus(false)} />\r\n      {/* See Quesion Modal Dialog */}\r\n      <SeeQuestion open={openSeeDialog} handleClose={() => setOpenSeeDialog(false)} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default QuestionList;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\DialogModalMetaData.js",["222","223"],"import React, { useState, useEffect } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { useSelector } from 'react-redux'\r\nimport DatePicker from \"react-datepicker\";\r\nimport ModelNotification from '../../../Modals/ModelNotification'\r\n\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nfunction DialogModalMetaData(props) {\r\n  const [open, setOpen] = React.useState(props.DialogStatus);\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const { callUseEffect } = props;\r\n  \r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [notificationStatus, setNotificationStatus] = useState(false)\r\n  const [paper, setPaper] = useState({\r\n      system: '',\r\n      board: '',\r\n      subject: '',\r\n      year: '',\r\n      month: '',\r\n      series: '',\r\n      paper: ''\r\n  });\r\n\r\n  const submit_data = (e) => {\r\n      e.preventDefault()\r\n      fetch(`/dashboard/de/metadata/${props.id}`,{\r\n        method: 'POST', \r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${loginReducer}`\r\n        },\r\n        body: JSON.stringify(paper)\r\n      })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        props.handleClose();\r\n        callUseEffect();\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  \r\n  React.useEffect(() => {\r\n    setOpen(props.DialogStatus)\r\n    setPaper(props.data)\r\n    let year = props.data.year;\r\n    let month = props.data.month;\r\n    let monthNumber = \"\";\r\n      switch(month){\r\n          case \"January\":\r\n              monthNumber= 0\r\n              break;\r\n          case \"February\":\r\n              monthNumber= 1;\r\n              break;\r\n          case \"March\":\r\n              monthNumber= 2;\r\n              break;\r\n          case \"April\":\r\n              monthNumber= 3;\r\n              break;\r\n          case \"May\":\r\n              monthNumber= 4;\r\n              break;\r\n          case \"June\":\r\n              monthNumber= 5;\r\n              break;\r\n          case \"July\":\r\n              monthNumber= 6;\r\n              break;\r\n          case \"August\":\r\n              monthNumber= 7;\r\n              break;\r\n          case \"September\":\r\n              monthNumber= 8;\r\n              break;\r\n          case \"October\":\r\n              monthNumber= 9;\r\n              break;\r\n          case \"November\":\r\n              monthNumber= 10;\r\n              break;\r\n          case \"December\":\r\n              monthNumber= 11;\r\n              break;\r\n          default:\r\n              monthNumber=1\r\n              year = 2020\r\n      }\r\n    const newDate = new Date(year, monthNumber)\r\n    setStartDate(newDate)\r\n  }, [props.DialogStatus])\r\n\r\n  const change_input = (e) => {\r\n      setPaper({...paper, [e.target.name]: e.target.value})\r\n  }\r\n\r\n  const change_month_and_year = (date) => {\r\n      setStartDate(date)\r\n      const monthNumber = date.getMonth();\r\n      const year = date.getFullYear();\r\n      var month = \"\";\r\n      switch(monthNumber.toString()){\r\n          case \"0\":\r\n              month=\"January\";\r\n              break;\r\n          case \"1\":\r\n              month=\"February\";\r\n              break;\r\n          case \"2\":\r\n              month=\"March\"\r\n              break;\r\n          case \"3\":\r\n              month=\"April\"\r\n              break;\r\n          case \"4\":\r\n              month=\"May\"\r\n              break;\r\n          case \"5\":\r\n              month=\"June\"\r\n              break;\r\n          case \"6\":\r\n              month=\"July\"\r\n              break;\r\n          case \"7\":\r\n              month=\"August\"\r\n              break;\r\n          case \"8\":\r\n              month=\"September\"\r\n              break;\r\n          case \"9\":\r\n              month=\"October\"\r\n              break;\r\n          case \"10\":\r\n              month=\"November\"\r\n              break;\r\n          case \"11\":\r\n              month=\"December\"\r\n              break;\r\n          default:\r\n              alert(\"please try again\")\r\n      }\r\n      setPaper({...paper, year: year.toString(), month: month})\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        fullWidth=\"true\"\r\n        maxWidth=\"sm\"\r\n        onClose={props.handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogContent className=\"px-5\">\r\n                <form className=\"board_form mx-auto\" onSubmit={submit_data}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter System :</label>\r\n                        <input type=\"text\" autoFocus className=\"form-control\" name=\"system\" onChange={change_input} value={paper.system} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Board :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"board\" value={paper.board} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Subject :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"subject\" value={paper.subject} required/>\r\n                    </div>\r\n                    <div className=\"form-group datepicker_main\">\r\n                        <label htmlFor=\"\">Select Year And Month :</label><br />\r\n                        <DatePicker className=\"form-control w-100\" selected={startDate} showMonthYearPicker peekNextMonth onChangeRaw={e => e.preventDefault()} onFocus={e => e.preventDefault()} onKeyDown={e => e.preventDefault()} disabledKeyboardNavigation dateFormat=\"MMMM yyyy\" onChange={change_month_and_year} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Series :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"series\" value={paper.series} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Paper:</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"paper\" value={paper.paper} required/>\r\n                    </div>\r\n                    <div className=\"form-group justify-content-center d-flex\">\r\n                        <button type=\"submit\" className=\"btn px-5 py-2 bg-info mybutton\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            <ModelNotification DialogStatus={notificationStatus} DialogTitle=\"Notification\" DialogDesc=\"Please Select Year and month.\" handleClose={() => setNotificationStatus(false)} DialogOk=\"Ok\" />\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default DialogModalMetaData;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\AddQuestion.js",["224","225","226","227","228","229","230","231","232"],"import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Dialog, Typography, Slide, Toolbar, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { useSelector } from 'react-redux'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport ModelNotification from '../../../Modals/ModelNotification'\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition2 = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n       zIndex: theme.zIndex.drawer + 1,\r\n       color: '#fff',\r\n    },\r\n }));\r\n \r\n const Transition = React.forwardRef(function Transition(props, ref) {\r\n     return <Slide direction=\"up\" ref={ref} {...props} />;\r\n });\r\n \r\n function Alert(props) {\r\n     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n }\r\n\r\nfunction AddQuestion(props) {\r\n  const classes2 = useStyles2();\r\n  const { open } = props\r\n\r\n\r\n//   Add Question\r\n// React State hooks\r\nconst [question, setQuestion] = useState(\"\")\r\nconst [topic, setTopic] = useState(\"\");\r\nconst [options, setOptions] = useState([]);\r\nconst [topics, setTopics] = useState([])\r\nconst [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n// Dialog Hooks\r\nconst [DialogStatus, setDialogStatus] = React.useState(false);\r\nconst [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\nconst [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\nconst [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\nconst classes = useStyles();\r\n// React Redux\r\nconst loginReducer = useSelector(state => state.loginReducer)\r\n\r\n// question input changehandler\r\nconst questionChange = (e) => {\r\n    setQuestion(e.target.value);\r\n}\r\n\r\nconst SelectedOptionsBackgroundChange = optionsbyindex => {\r\n    setTimeout(() => {\r\n        for (var i = 0; i < optionsbyindex.length; i++) {\r\n            if (optionsbyindex[i].correct === true) {\r\n                $(`.mcq${i}`).addClass(\"mcq_selected\")\r\n            } else {\r\n                $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n            }\r\n        }\r\n    }, 100)\r\n}\r\n// on option created\r\nconst submit = (e) => {\r\n    e.preventDefault();\r\n    let opt = $('.static_option').val();\r\n    const option = opt.trim();\r\n    if (option.length > 0) {\r\n        setOptions([...options, { correct: false, option: option }]);\r\n        $('.static_option').val(\"\");\r\n    }\r\n    SelectedOptionsBackgroundChange(options)\r\n}\r\n// on option delete\r\nconst deleteOption = (e) => {\r\n    const newOptions = options.filter((_, index) => index !== e);\r\n    setOptions(newOptions);\r\n    var optionsbyindex = newOptions;\r\n    SelectedOptionsBackgroundChange(optionsbyindex)\r\n}\r\n// on option selected\r\nconst onselect = (e) => {\r\n    let items = [...options];\r\n    let item = { ...items[e] };\r\n    for (var i = 0; i < items.length; i++) {\r\n        if (items[i].correct === true) {\r\n            $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n            item.correct = true;\r\n            let item2 = { ...items[i] }\r\n            item2.correct = false\r\n            items[i] = item2\r\n        } else {\r\n            $(`.mcq${e}`).addClass(\"mcq_selected\")\r\n            item.correct = true;\r\n        }\r\n    }\r\n    if (item.correct === true) {\r\n        $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n        item.correct = true\r\n    }\r\n    items[e] = item;\r\n    setOptions(items)\r\n}\r\n// Add Topics\r\nconst submitTopic = (e) => {\r\n    e.preventDefault()\r\n    setTopics([...topics, { topic: topic }])\r\n    setTopic(\"\")\r\n}\r\n// Delete Topics\r\nconst deleteTopic = (e) => {\r\n    const deleteTopic = topics.filter((item, index) => e !== index);\r\n    setTopics(deleteTopic)\r\n}\r\n// Questinon Output Toggle\r\nconst question_output_hide_show = () => {\r\n    $('.question_output').slideToggle();\r\n}\r\n// Close Alert\r\nconst handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n        return;\r\n    }\r\n    setDialogStatus(false);\r\n};\r\n\r\n    // on mcq added\r\n    const add_mcq = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || options.length === 0) {\r\n            if (question === \"\") { setDialogDesc(\"Question Field Are Required!\")  }\r\n            else if (mark === \"\") { setDialogDesc(\"Marks Field Are Required!\")  }\r\n            else { setDialogDesc(\"Options are Missing!\") }\r\n            \r\n            setDialogStatus(true)\r\n        } else {\r\n            const items = [...options];\r\n            let status = 0;\r\n            for (var i = 0; i < items.length; i++) {\r\n                if (items[i].correct === true) {\r\n                    status = 1;\r\n                }\r\n            }\r\n            if (status === 1) {\r\n                if (props.id.length !== 0) {\r\n                    const data = {\r\n                        \"questions\": question,\r\n                        \"marks\": mark,\r\n                        \"options\": options,\r\n                        \"topics\": topics\r\n                    }\r\n                    fetch(`/dashboard/de/question/meta/${props.id}`, {\r\n                      method: 'PUT',\r\n                      headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${loginReducer}`\r\n                      },\r\n                      body: JSON.stringify(data)\r\n                    })\r\n                      .then(res => res.json())\r\n                      .then(res => {\r\n                        props.getAllQuestions();\r\n                        setTopics([])\r\n                        setOptions([])\r\n                        setQuestion(\"\")\r\n                        props.handleClose();\r\n                        const mark = $('.marks').val(\"\");\r\n                      })\r\n                      .catch(err => console.log(err))\r\n                  }else {\r\n                    props.handleClose();\r\n                  }\r\n            } else {\r\n                setDialogDesc(\"Chose The correct Option\")\r\n                setDialogStatus(true)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={props.handleClose} TransitionComponent={Transition2}>\r\n        <AppBar className={classes2.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes2.title}>\r\n              Add Question\r\n            </Typography>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={props.handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <main>\r\n\r\n\r\n\r\n    {/* Add Question UI */}\r\n    {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n    <section className=\"pt-3\" style={{ background: \"#F5F3F9\", height: 'auto', paddingBottom: \"70px\" }}>\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container\">\r\n                <div className=\"row\">\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-8 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        <form onSubmit={submit} className=\"mt-4 container-fluid\" autoComplete=\"off\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={question_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group question_output col-12\" style={{fontSize: markdownFontSize}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <div className=\"form-group m-0\">\r\n                                <input type=\"text\" name=\"option_input\" placeholder=\"Enter Option\" style={{ width: \"90%\" }} className=\"d-inline static_option form-control\" required /> <button type=\"submit\" className=\"p-1 mt-1\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                            </div>\r\n                            {options.map((item, i) => {\r\n                                return <div key={i} className={`mcqDisplay mcq${i}`}><p style={{ width: '80%', fontSize: '15px', wordWrap: 'break-word' }} className=\"option_text py-auto mb-2\">{item.option}</p><div className=\"mcqDisplay__button\"><svg onClick={() => onselect(i)} className=\"MuiSvgIcon-root mcqDisplay__correct\" style={{ cursor: 'pointer' }} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path></svg><svg onClick={() => deleteOption(i)} style={{ cursor: 'pointer' }} className=\"MuiSvgIcon-root mcqDisplay__delete\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path></svg></div></div>\r\n                            })}\r\n                        </form>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-center w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={add_mcq} className=\"bg-success mx-2 mt-2 btn mybutton\">Add</button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-4\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay`} style={{fontSize: '12px',fontWeight: '500'}}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" style={{fontSize: '16px'}} onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n        </section>\r\n\r\n        </main>\r\n        \r\n\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default AddQuestion;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\SeeQuestion.js",["233","234","235","236"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { useSelector } from 'react-redux'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function SeeQuestion(props) {\r\n  const { handleClose, open } = props;\r\n  const [data, setData] = React.useState([]);\r\n  const loginReducer = useSelector(state => state.loginReducer);\r\n  const [question, setQuestion] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([]);\r\n  const [topics, setTopics] = React.useState([])\r\n\r\n  React.useEffect(() => {\r\n    if (window.SeeQuestionId !== undefined) {\r\n      fetch(`/dashboard/de/question/${window.SeeQuestionId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${loginReducer}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          setQuestion(res.questions)\r\n          setOptions(res.options)\r\n          console.log(res.topics)\r\n          if (res.topics) {\r\n            setTopics(res.topics)\r\n          } else {\r\n            setTopics([])\r\n          }\r\n          console.log(res)\r\n          window.SeeQuestionId = undefined\r\n        })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      handleClose();\r\n    }\r\n    console.log('windowid is :' + window.SeeQuestionId)\r\n  }, [window.SeeQuestionId])\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n\r\n        <DialogContent>\r\n          <DialogTitle id=\"alert-dialog-slide-title\">\r\n            <MathpixLoader>\r\n              <MathpixMarkdown text={question} />\r\n            </MathpixLoader>\r\n          </DialogTitle>\r\n          <hr />\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <h3 className=\"py-3\">Options</h3>\r\n                <div>\r\n                  {options.map((item, i) => (\r\n                    <div className=\"pt-3 d-flex\" style={{ borderBottom: \"1px solid rgba(0,0,0,0.3)\" }}>\r\n                      {(item.correct === true) ? <CheckCircleIcon /> : <CancelIcon />}\r\n                      <p> &nbsp;{item.option}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                {(topics !== \"\")}\r\n                <h3 className=\"py-3\">Topics</h3>\r\n                <div>\r\n                  {topics.map((item, i) => (\r\n                    <>\r\n                      <p>{item.topic}</p>\r\n                      <hr />\r\n                    </>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":18,"column":8,"nodeType":"243","endLine":18,"endColumn":10,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":6,"column":22,"nodeType":"247","messageId":"248","endLine":6,"endColumn":35},{"ruleId":"245","severity":1,"message":"249","line":17,"column":8,"nodeType":"247","messageId":"248","endLine":17,"endColumn":19},{"ruleId":"245","severity":1,"message":"250","line":23,"column":10,"nodeType":"247","messageId":"248","endLine":23,"endColumn":21},{"ruleId":"245","severity":1,"message":"251","line":51,"column":32,"nodeType":"247","messageId":"248","endLine":51,"endColumn":52},{"ruleId":"245","severity":1,"message":"252","line":56,"column":25,"nodeType":"247","messageId":"248","endLine":56,"endColumn":39},{"ruleId":"245","severity":1,"message":"253","line":57,"column":22,"nodeType":"247","messageId":"248","endLine":57,"endColumn":33},{"ruleId":"241","severity":1,"message":"254","line":76,"column":8,"nodeType":"243","endLine":76,"endColumn":10,"suggestions":"255"},{"ruleId":"245","severity":1,"message":"256","line":1,"column":16,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":35,"column":8,"nodeType":"243","endLine":35,"endColumn":10,"suggestions":"257"},{"ruleId":"245","severity":1,"message":"258","line":4,"column":21,"nodeType":"247","messageId":"248","endLine":4,"endColumn":28},{"ruleId":"245","severity":1,"message":"259","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"256","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"260","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":12},{"ruleId":"245","severity":1,"message":"261","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":15},{"ruleId":"245","severity":1,"message":"262","line":14,"column":8,"nodeType":"247","messageId":"248","endLine":14,"endColumn":18},{"ruleId":"245","severity":1,"message":"263","line":17,"column":8,"nodeType":"247","messageId":"248","endLine":17,"endColumn":18},{"ruleId":"245","severity":1,"message":"264","line":18,"column":8,"nodeType":"247","messageId":"248","endLine":18,"endColumn":15},{"ruleId":"245","severity":1,"message":"265","line":19,"column":8,"nodeType":"247","messageId":"248","endLine":19,"endColumn":24},{"ruleId":"245","severity":1,"message":"266","line":20,"column":8,"nodeType":"247","messageId":"248","endLine":20,"endColumn":14},{"ruleId":"245","severity":1,"message":"267","line":21,"column":8,"nodeType":"247","messageId":"248","endLine":21,"endColumn":18},{"ruleId":"245","severity":1,"message":"268","line":22,"column":10,"nodeType":"247","messageId":"248","endLine":22,"endColumn":16},{"ruleId":"245","severity":1,"message":"269","line":23,"column":10,"nodeType":"247","messageId":"248","endLine":23,"endColumn":20},{"ruleId":"245","severity":1,"message":"270","line":24,"column":8,"nodeType":"247","messageId":"248","endLine":24,"endColumn":20},{"ruleId":"245","severity":1,"message":"271","line":25,"column":10,"nodeType":"247","messageId":"248","endLine":25,"endColumn":20},{"ruleId":"245","severity":1,"message":"272","line":119,"column":7,"nodeType":"247","messageId":"248","endLine":119,"endColumn":23},{"ruleId":"241","severity":1,"message":"273","line":204,"column":6,"nodeType":"243","endLine":204,"endColumn":15,"suggestions":"274"},{"ruleId":"245","severity":1,"message":"275","line":276,"column":9,"nodeType":"247","messageId":"248","endLine":276,"endColumn":26},{"ruleId":"245","severity":1,"message":"276","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":13},{"ruleId":"245","severity":1,"message":"277","line":29,"column":7,"nodeType":"247","messageId":"248","endLine":29,"endColumn":17},{"ruleId":"245","severity":1,"message":"252","line":50,"column":25,"nodeType":"247","messageId":"248","endLine":50,"endColumn":39},{"ruleId":"245","severity":1,"message":"253","line":51,"column":22,"nodeType":"247","messageId":"248","endLine":51,"endColumn":33},{"ruleId":"241","severity":1,"message":"254","line":72,"column":8,"nodeType":"243","endLine":72,"endColumn":10,"suggestions":"278"},{"ruleId":"245","severity":1,"message":"279","line":265,"column":11,"nodeType":"247","messageId":"248","endLine":265,"endColumn":20},{"ruleId":"280","severity":1,"message":"281","line":267,"column":34,"nodeType":"282","messageId":"283","endLine":267,"endColumn":36},{"ruleId":"280","severity":1,"message":"281","line":287,"column":34,"nodeType":"282","messageId":"283","endLine":287,"endColumn":36},{"ruleId":"245","severity":1,"message":"284","line":19,"column":10,"nodeType":"247","messageId":"248","endLine":19,"endColumn":20},{"ruleId":"245","severity":1,"message":"285","line":20,"column":10,"nodeType":"247","messageId":"248","endLine":20,"endColumn":22},{"ruleId":"245","severity":1,"message":"286","line":72,"column":10,"nodeType":"247","messageId":"248","endLine":72,"endColumn":21},{"ruleId":"245","severity":1,"message":"287","line":2,"column":8,"nodeType":"247","messageId":"248","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"256","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"288","line":23,"column":11,"nodeType":"247","messageId":"248","endLine":23,"endColumn":23},{"ruleId":"280","severity":1,"message":"281","line":92,"column":28,"nodeType":"282","messageId":"283","endLine":92,"endColumn":30},{"ruleId":"289","severity":1,"message":"290","line":93,"column":25,"nodeType":"291","messageId":"292","endLine":93,"endColumn":27},{"ruleId":"245","severity":1,"message":"256","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"280","severity":1,"message":"281","line":55,"column":24,"nodeType":"282","messageId":"283","endLine":55,"endColumn":26},{"ruleId":"245","severity":1,"message":"256","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"277","line":33,"column":7,"nodeType":"247","messageId":"248","endLine":33,"endColumn":17},{"ruleId":"245","severity":1,"message":"293","line":72,"column":10,"nodeType":"247","messageId":"248","endLine":72,"endColumn":29},{"ruleId":"245","severity":1,"message":"252","line":77,"column":23,"nodeType":"247","messageId":"248","endLine":77,"endColumn":37},{"ruleId":"245","severity":1,"message":"253","line":78,"column":20,"nodeType":"247","messageId":"248","endLine":78,"endColumn":31},{"ruleId":"245","severity":1,"message":"251","line":79,"column":29,"nodeType":"247","messageId":"248","endLine":79,"endColumn":49},{"ruleId":"245","severity":1,"message":"294","line":81,"column":20,"nodeType":"247","messageId":"248","endLine":81,"endColumn":31},{"ruleId":"245","severity":1,"message":"284","line":83,"column":9,"nodeType":"247","messageId":"248","endLine":83,"endColumn":19},{"ruleId":"245","severity":1,"message":"285","line":84,"column":9,"nodeType":"247","messageId":"248","endLine":84,"endColumn":21},{"ruleId":"245","severity":1,"message":"295","line":88,"column":9,"nodeType":"247","messageId":"248","endLine":88,"endColumn":16},{"ruleId":"241","severity":1,"message":"296","line":145,"column":6,"nodeType":"243","endLine":145,"endColumn":38,"suggestions":"297"},{"ruleId":"237","replacedBy":"298"},{"ruleId":"239","replacedBy":"299"},{"ruleId":"245","severity":1,"message":"256","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"259","line":1,"column":28,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"268","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":14},{"ruleId":"245","severity":1,"message":"300","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":17},{"ruleId":"241","severity":1,"message":"301","line":90,"column":6,"nodeType":"243","endLine":90,"endColumn":24,"suggestions":"302"},{"ruleId":"245","severity":1,"message":"256","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"303","line":102,"column":6,"nodeType":"243","endLine":102,"endColumn":26,"suggestions":"304"},{"ruleId":"245","severity":1,"message":"256","line":1,"column":26,"nodeType":"247","messageId":"248","endLine":1,"endColumn":35},{"ruleId":"245","severity":1,"message":"268","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":14},{"ruleId":"245","severity":1,"message":"305","line":10,"column":8,"nodeType":"247","messageId":"248","endLine":10,"endColumn":16},{"ruleId":"245","severity":1,"message":"277","line":37,"column":8,"nodeType":"247","messageId":"248","endLine":37,"endColumn":18},{"ruleId":"245","severity":1,"message":"306","line":41,"column":11,"nodeType":"247","messageId":"248","endLine":41,"endColumn":16},{"ruleId":"245","severity":1,"message":"252","line":60,"column":21,"nodeType":"247","messageId":"248","endLine":60,"endColumn":35},{"ruleId":"245","severity":1,"message":"253","line":61,"column":18,"nodeType":"247","messageId":"248","endLine":61,"endColumn":29},{"ruleId":"245","severity":1,"message":"307","line":62,"column":7,"nodeType":"247","messageId":"248","endLine":62,"endColumn":14},{"ruleId":"245","severity":1,"message":"308","line":186,"column":31,"nodeType":"247","messageId":"248","endLine":186,"endColumn":35},{"ruleId":"245","severity":1,"message":"309","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":25},{"ruleId":"245","severity":1,"message":"310","line":20,"column":10,"nodeType":"247","messageId":"248","endLine":20,"endColumn":14},{"ruleId":"245","severity":1,"message":"311","line":20,"column":16,"nodeType":"247","messageId":"248","endLine":20,"endColumn":23},{"ruleId":"241","severity":1,"message":"312","line":53,"column":6,"nodeType":"243","endLine":53,"endColumn":28,"suggestions":"313"},"no-native-reassign",["314"],"no-negated-in-lhs",["315"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'loginReducer'. Either include them or remove the dependency array.","ArrayExpression",["316"],"no-unused-vars","'remove_theory' is defined but never used.","Identifier","unusedVar","'DialogTitle' is defined but never used.","'ProgressBar' is defined but never used.","'setProgressBarStatus' is assigned a value but never used.","'setDialogTitle' is assigned a value but never used.","'setDialogOk' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardReducer.length' and 'history'. Either include them or remove the dependency array.",["317"],"'useEffect' is defined but never used.",["318"],"'NavLink' is defined but never used.","'useState' is defined but never used.","'clsx' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'DeleteIcon' is defined but never used.","'Button' is defined but never used.","'MdModeEdit' is defined but never used.","'SelectDialog' is defined but never used.","'useHistory' is defined but never used.","'useToolbarStyles' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'loginReducer'. Either include it or remove the dependency array.",["319"],"'handleChangeDense' is assigned a value but never used.","'axios' is defined but never used.","'Transition' is assigned a value but never used.",["320"],"'send_json' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'mcqReducer' is assigned a value but never used.","'boardReducer' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'PropTypes' is defined but never used.","'loginReducer' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ConfirmDialogStatus' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'loginReducer'. Either include it or remove the dependency array. Outer scope values like 'window.EditQuestionId' aren't valid dependencies because mutating them doesn't re-render the component.",["321"],["314"],["315"],"'TableBody' is defined but never used.","React Hook React.useEffect has missing dependencies: 'handleCloseDialogBox' and 'loginReducer'. Either include them or remove the dependency array.",["322"],"React Hook React.useEffect has a missing dependency: 'props.data'. Either include it or remove the dependency array. If 'setPaper' needs the current value of 'props.data', you can also switch to useReducer instead of useState and read 'props.data' in the reducer.",["323"],"'Snackbar' is defined but never used.","'Alert' is defined but never used.","'classes' is assigned a value but never used.","'mark' is assigned a value but never used.","'DialogContentText' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'handleClose' and 'loginReducer'. Either include them or remove the dependency array. Outer scope values like 'window.SeeQuestionId' aren't valid dependencies because mutating them doesn't re-render the component.",["324"],"no-global-assign","no-unsafe-negation",{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"325","fix":"329"},{"desc":"330","fix":"331"},{"desc":"327","fix":"332"},{"desc":"330","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [history, loginReducer]",{"range":"340","text":"341"},"Update the dependencies array to be: [boardReducer.length, history]",{"range":"342","text":"343"},{"range":"344","text":"341"},"Update the dependencies array to be: [getData, loginReducer]",{"range":"345","text":"346"},{"range":"347","text":"343"},{"range":"348","text":"346"},"Update the dependencies array to be: [id, getQuestions, loginReducer, handleCloseDialogBox]",{"range":"349","text":"350"},"Update the dependencies array to be: [props.DialogStatus, props.data]",{"range":"351","text":"352"},"Update the dependencies array to be: [handleClose, loginReducer]",{"range":"353","text":"354"},[703,705],"[history, loginReducer]",[3148,3150],"[boardReducer.length, history]",[1374,1376],[6683,6692],"[getData, loginReducer]",[2976,2978],[5070,5102],[3110,3128],"[id, getQuestions, loginReducer, handleCloseDialogBox]",[2891,2911],"[props.DialogStatus, props.data]",[1972,1994],"[handleClose, loginReducer]"]