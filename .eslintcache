[{"F:\\exam105\\frontend\\frontend\\src\\index.js":"1","F:\\exam105\\frontend\\frontend\\src\\App.js":"2","F:\\exam105\\frontend\\frontend\\src\\reportWebVitals.js":"3","F:\\exam105\\frontend\\frontend\\src\\reducers\\index.js":"4","F:\\exam105\\frontend\\frontend\\src\\reducers\\PresistedState.js":"5","F:\\exam105\\frontend\\frontend\\src\\reducers\\Board.js":"6","F:\\exam105\\frontend\\frontend\\src\\reducers\\mcq.js":"7","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js":"8","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js":"9","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js":"10","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js":"11","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js":"12","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js":"13","F:\\exam105\\frontend\\frontend\\src\\action\\index.js":"14","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddImages.js":"15","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddImagesComponent.js":"16","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js":"17","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js":"18","F:\\exam105\\frontend\\frontend\\src\\reducers\\LoginAndLogout.js":"19","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js":"20","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js":"21","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js":"22","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js":"23","F:\\exam105\\frontend\\frontend\\src\\reducers\\theory.js":"24","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\ModelNotification.js":"25","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\ConfirmDialog.js":"26"},{"size":922,"mtime":1608397188142,"results":"27","hashOfConfig":"28"},{"size":1322,"mtime":1610190393620,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":346,"mtime":1610190393625,"results":"31","hashOfConfig":"28"},{"size":704,"mtime":1608382819746,"results":"32","hashOfConfig":"28"},{"size":647,"mtime":1608279040905,"results":"33","hashOfConfig":"28"},{"size":805,"mtime":1608479072386,"results":"34","hashOfConfig":"28"},{"size":347,"mtime":1608373037204,"results":"35","hashOfConfig":"28"},{"size":5008,"mtime":1610190393556,"results":"36","hashOfConfig":"28"},{"size":380,"mtime":1608386222255,"results":"37","hashOfConfig":"28"},{"size":1927,"mtime":1610190393490,"results":"38","hashOfConfig":"28"},{"size":19240,"mtime":1610190393217,"results":"39","hashOfConfig":"28"},{"size":4924,"mtime":1610190391560,"results":"40","hashOfConfig":"28"},{"size":1874,"mtime":1610190393621,"results":"41","hashOfConfig":"28"},{"size":384,"mtime":1609228513739,"results":"42","hashOfConfig":"28"},{"size":3927,"mtime":1610190393035,"results":"43","hashOfConfig":"28"},{"size":887,"mtime":1610190393515,"results":"44","hashOfConfig":"28"},{"size":874,"mtime":1610190393547,"results":"45","hashOfConfig":"28"},{"size":255,"mtime":1610190393624,"results":"46","hashOfConfig":"28"},{"size":334,"mtime":1610190393557,"results":"47","hashOfConfig":"28"},{"size":13461,"mtime":1610190393374,"results":"48","hashOfConfig":"28"},{"size":361,"mtime":1610190393546,"results":"49","hashOfConfig":"28"},{"size":16297,"mtime":1610190393036,"results":"50","hashOfConfig":"28"},{"size":821,"mtime":1610190393628,"results":"51","hashOfConfig":"28"},{"size":1510,"mtime":1610190393536,"results":"52","hashOfConfig":"28"},{"size":1691,"mtime":1610190393514,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1n6kll4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"56"},"F:\\exam105\\frontend\\frontend\\src\\index.js",[],["117","118"],"F:\\exam105\\frontend\\frontend\\src\\App.js",[],"F:\\exam105\\frontend\\frontend\\src\\reportWebVitals.js",[],"F:\\exam105\\frontend\\frontend\\src\\reducers\\index.js",[],"F:\\exam105\\frontend\\frontend\\src\\reducers\\PresistedState.js",[],"F:\\exam105\\frontend\\frontend\\src\\reducers\\Board.js",[],"F:\\exam105\\frontend\\frontend\\src\\reducers\\mcq.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js",["119"],"import React, {useEffect, useState} from 'react'\r\nimport '../css/Style.css'\r\nimport { IconButton, Input , Button , InputLabel , InputAdornment , FormControl, TextField } from '@material-ui/core';\r\nimport { Visibility , VisibilityOff } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { connect , useSelector } from 'react-redux'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction AdminIndex(props) {\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        password: '',\r\n        showPassword: false,\r\n    });\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n\r\n\r\n    const history = useHistory();\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    useEffect(()=> {\r\n        if (loginReducer){\r\n            history.push(\"/admin/panel/papers\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    const handleChange = (prop) => (e) => {\r\n        setValues({ ...values, [prop]: e.target.value });\r\n    };\r\n\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n\r\n    const handleMouseDownPassword = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (values.username === \"admin\" && values.password === \"password\"){\r\n            props.set_login();\r\n            history.push(\"/admin/panel/papers\")\r\n        }else{\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"admnh_login_main\">\r\n            <form class=\"admin_login_form py-4\" onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center mb-5\">Admin Login</h2>\r\n                <div style={{ width: '60%', margin: '5px auto', display: 'flex' }}>\r\n                    <TextField onChange={handleChange(\"username\")} value={values.username} id=\"standard-basic\" label=\"Username\" className=\"AdminUserField w-100\" type=\"text\" required />\r\n                </div><br />\r\n                <FormControl style={{ width: '60%', margin: '0 auto', display: 'flex' }} variant=\"fille\">\r\n                    <InputLabel htmlFor=\"filled-adornment-password\">Password *</InputLabel>\r\n                    <Input\r\n                        id=\"filled-adornment-password\"\r\n                        type={values.showPassword ? 'text' : 'password'}\r\n                        value={values.password}\r\n                        onChange={handleChange('password')}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    /><br /><br />\r\n                </FormControl>\r\n                <Button type=\"submit\" variant=\"contained\" className=\"mx-auto d-flex px-5 py-2\" color=\"primary\">\r\n                    Log In\r\n                </Button>\r\n            </form>\r\n            <Dialog\r\n                open={DialogStatus}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Error</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Please Enter Valid Username or Password\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialogStatus(false)} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        set_login: () => {\r\n            dispatch({type: 'login'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminIndex)\r\n","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js",["120","121"],"import React, {useEffect} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {FcHome, FcPlus, FcTodoList, FcDeleteDatabase} from \"react-icons/fc\"\r\nimport {BsFillCaretRightFill} from 'react-icons/bs'\r\nimport '../css/AdminSideBar.css'\r\nimport $ from 'jquery'\r\nimport {useHistory} from 'react-router-dom'\r\nimport { connect , useSelector } from 'react-redux'\r\nimport { setLogout } from '../../action/index'\r\n\r\n\r\nfunction AdminSideBar(props) {\r\n    const history = useHistory();\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    useEffect(()=> {\r\n        if (!loginReducer){\r\n            history.push(\"/admin/panel/\")\r\n        }\r\n    }, [])\r\n    const sidebar_open = () => {\r\n        $('.Admin_Sidebar').toggleClass(\"open_sidebar\")\r\n        $('.Admin_Sidebar').blur(()=>{\r\n            $(this).toggleClass(\"open_sidebar\")\r\n        })\r\n    }\r\n    const logout = () => {\r\n        props.set_logout();\r\n        history.push(\"/admin/panel/\")\r\n    }\r\n\r\n    return (\r\n        <section className=\"Admin_Sidebar\">\r\n        <ul className=\"sidebar_ul\">\r\n                <li className=\"admin_panel_heading_li\"><h4 exact to=\"/admin/panel/\">Admin Panel</h4></li>\r\n                <li><NavLink exact to=\"/admin/panel/papers\"><FcHome /> Home</NavLink></li>\r\n                <li><NavLink exact to=\"/admin/panel/add/papers\"><FcPlus /> Add Paper</NavLink></li>\r\n                <li><NavLink exact to=\"/admin/panel/papers\"><FcTodoList /> Paper List</NavLink></li>\r\n                <li onClick={logout}><NavLink to=\"#\"><FcDeleteDatabase /> Logout</NavLink></li>\r\n            </ul>\r\n            <BsFillCaretRightFill className=\"sidebar_open_icon\" onClick={sidebar_open} />\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        set_logout: () => {\r\n            dispatch({type: 'logout'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminSideBar);","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js",["122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React, { useEffect, useState } from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { add_mcq, remove_mcq, update_mcq } from '../../action/index'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from './ModelNotification'\r\nimport ConfirmDialog from './ConfirmDialog'\r\n\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AdminAddmcqsComponent(props) {\r\n    // React State hooks\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [topics, setTopics] = useState([])\r\n    const [openAlertDelete, setOpenAlertDelete] = React.useState(false);\r\n    const [openAlertUpdate, setOpenAlertUpdate] = React.useState(false);\r\n    const [openAlertAdd, setOpenAlertAdd] = React.useState(false);\r\n    const [ConfirmDialogStatus, setConfirmDialogStatus] = React.useState(false);\r\n    // Dialog Hooks\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n    const [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\n    const [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\n    const [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\n\r\n    // React Redux\r\n    const mcqReducer = useSelector(state => state.mcqReducer)\r\n    const boardReducer = useSelector(state => state.boardReducer)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (boardReducer.length === 0) {\r\n            history.push(\"/admin/panel/add/papers/\")\r\n        }\r\n    }, [])\r\n    // Math compiler\r\n    // question input changehandler\r\n    const questionChange = (e) => {\r\n        setQuestion(e.target.value);\r\n    }\r\n    // SetTime Out Functions\r\n    const mcqButtonChangeBorder = (e) => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < mcqReducer.length; i++) {\r\n                if (i === e) {\r\n                    $(`.question${e}`).css({ border: '3px solid black' })\r\n                } else {\r\n                    $(`.question${i}`).css({ border: '3px solid white' })\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    const SelectedOptionsBackgroundChange = optionsbyindex => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < optionsbyindex.length; i++) {\r\n                if (optionsbyindex[i].status === true) {\r\n                    $(`.mcq${i}`).addClass(\"mcq_selected\")\r\n                } else {\r\n                    $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    // on option created\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        let opt = $('.static_option').val();\r\n        const option = opt.trim();\r\n        if (option.length > 0) {\r\n            setOptions([...options, { status: false, option: option }]);\r\n            $('.static_option').val(\"\");\r\n        }\r\n        SelectedOptionsBackgroundChange(options)\r\n    }\r\n    // on option delete\r\n    const deleteOption = (e) => {\r\n        let items = [...options];\r\n        let item = { ...items[e] };\r\n        const newTodos = options.filter((_, index) => index !== e);\r\n        setOptions(newTodos);\r\n        var optionsbyindex = newTodos;\r\n        SelectedOptionsBackgroundChange(optionsbyindex)\r\n    }\r\n    // on option selected\r\n    const onselect = (e) => {\r\n        let items = [...options];\r\n        let item = { ...items[e] };\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].status === true) {\r\n                $(`.mcq${i}`).removeClass(\"mcq_selected\")\r\n                item.status = true;\r\n                let item2 = { ...items[i] }\r\n                item2.status = false\r\n                items[i] = item2\r\n            } else {\r\n                $(`.mcq${e}`).addClass(\"mcq_selected\")\r\n                item.status = true;\r\n            }\r\n        }\r\n        if (item.status === true) {\r\n            $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n            item.status = true\r\n        }\r\n        items[e] = item;\r\n        setOptions(items)\r\n    }\r\n    // on mcq added\r\n    const add_mcq = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || options.length === 0) {\r\n            setDialogDesc(\"All Fields Are Required?\")\r\n            setDialogStatus(true)\r\n        } else {\r\n            const items = [...options];\r\n            let status = 0;\r\n            for (var i = 0; i < items.length; i++) {\r\n                if (items[i].status === true) {\r\n                    status = 1;\r\n                }\r\n            }\r\n            if (status === 1) {\r\n                const data = {\r\n                    question: question,\r\n                    marks: mark,\r\n                    options: options,\r\n                    topics: topics\r\n                }\r\n                props.changeState(data)\r\n                setOpenAlertAdd(true)\r\n                setOptions([])\r\n                setQuestion(\"\")\r\n                setTopics([])\r\n            } else {\r\n                setDialogDesc(\"Chose The correct Option\")\r\n                setDialogStatus(true)\r\n            }\r\n        }\r\n    }\r\n    // Get Old Mcq for Update\r\n    const getOldMcq = (e) => {\r\n        window.value = e;\r\n        mcqButtonChangeBorder(e)\r\n        setTopics([])\r\n        setOptions(mcqReducer[e].options)\r\n        setQuestion(mcqReducer[e].question)\r\n        $('.marks').val(mcqReducer[e].marks);\r\n        setTopics(mcqReducer[e].topics)\r\n        // Selected Options\r\n        var optionsbyindex = mcqReducer[e].options;\r\n        SelectedOptionsBackgroundChange(optionsbyindex)\r\n        // Hide and show buttons\r\n        $('.next_mcq_button').css(\"display\", \"none\")\r\n        $('.update_mcq_button').css(\"display\", \"inline\");\r\n        $('.delete_mcq_button').css(\"display\", \"inline\");\r\n    }\r\n    // Update Mcq By its Id\r\n    const update_mcq_by_id = () => {\r\n        if (window.value != null) {\r\n            const mark = $('.marks').val();\r\n            if (question === \"\" || mark === \"\" || options.length === 0) {\r\n                setDialogDesc(\"All Fields Are Required?\")\r\n                setDialogStatus(true)\r\n            } else {\r\n                const items = [...options];\r\n                let status = 0;\r\n                for (var i = 0; i < items.length; i++) {\r\n                    if (items[i].status === true) {\r\n                        status = 1;\r\n                    }\r\n                }\r\n                if (status === 1) {\r\n                    const mark = $('.marks').val();\r\n                    const data = { question: question, marks: mark, options: options, topics: topics, index: window.value }\r\n                    props.updateState(data)\r\n                    setQuestion(\"\")\r\n                    setOptions([])\r\n                    setTopics([])\r\n                    setOpenAlertUpdate(true)\r\n                    mcqButtonChangeBorder(-1)\r\n                    $('.next_mcq_button').css(\"display\", \"inline\")\r\n                    $('.update_mcq_button').css(\"display\", \"none\");\r\n                    $('.delete_mcq_button').css(\"display\", \"none\");\r\n                } else {\r\n                    setDialogDesc(\"Chose The Correct Option\")\r\n                    setDialogStatus(true)\r\n                }\r\n            }\r\n        } else {\r\n            setDialogDesc(\"Select MCQ For Delete?\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Delete Mcq By its Id\r\n    const delete_mcq_by_id = () => {\r\n        if (window.value != null) {\r\n            const index = window.value;\r\n            setConfirmDialogStatus(false)\r\n            props.deleteState(index)\r\n            setQuestion(\"\")\r\n            setOptions([])\r\n            setTopics([])\r\n            mcqButtonChangeBorder(-1)\r\n            setOpenAlertDelete(true);\r\n            $('.next_mcq_button').css(\"display\", \"inline\")\r\n            $('.update_mcq_button').css(\"display\", \"none\");\r\n            $('.delete_mcq_button').css(\"display\", \"none\");\r\n        } else {\r\n            setDialogDesc(\"Please Select MCQ for Delete\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Add Topics\r\n    const submitTopic = (e) => {\r\n        e.preventDefault()\r\n        setTopics([...topics, { topic: topic }])\r\n        setTopic(\"\")\r\n    }\r\n    // Delete Topics\r\n    const deleteTopic = (e) => {\r\n        const deleteTopic = topics.filter((item, index) => e !== index);\r\n        setTopics(deleteTopic)\r\n    }\r\n    // Questinon Output Toggle\r\n    const question_output_hide_show = () => {\r\n        $('.question_output').slideToggle();\r\n    }\r\n    // Create JSON\r\n    const send_json = () => {\r\n        const array = new Array(boardReducer[0]);\r\n        mcqReducer.map((item, i) => {\r\n            array.push(item)\r\n        })\r\n        const jsonData = JSON.stringify(array);\r\n        document.write(jsonData)\r\n    }\r\n    // Close Alert\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlertDelete(false);\r\n        setOpenAlertUpdate(false);\r\n        setOpenAlertAdd(false);\r\n        setDialogStatus(false);\r\n        setConfirmDialogStatus(false)\r\n    };\r\n    return (\r\n        <section className=\"add_mcq_main pt-3\">\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-2 mb-5 mcqs_list_main \">\r\n                        <div className=\"bg-white py-3 container-fluid\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            {mcqReducer.map((item, i) => (\r\n                                <button key={i} style={{ width: '40px' }} className={`col-3 text-center bg-success text-white question${i}`} onClick={() => getOldMcq(i)}>{i + 1}</button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-7 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        {/* Responsive Meta Data */}\r\n                        <div className=\"table-responsive mx-auto\">\r\n                            <table className=\"table p-0 m-0\">\r\n                                <tbody>\r\n                                    {boardReducer.map((item, i) => (\r\n                                        <tr className=\"text-center\">\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.system}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.board}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.subject}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.year}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.month}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.series}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.paper}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <form onSubmit={submit} className=\"container-fluid\" autoComplete=\"off\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <button type=\"button\" onClick={question_output_hide_show} className=\"btn btn-sm mybutton py-1 mb-2 px-2 d-flex ml-auto m-0\">hide / show</button>\r\n                            <div className=\"p-2 form-group question_output bg-info text-white col-12\" style={{ height: \"160px\", borderRadius: \"5px\", overflowY: 'scroll' }}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <div className=\"form-group m-0\">\r\n                                <input type=\"text\" name=\"option_input\" placeholder=\"Enter Option\" style={{ width: \"90%\" }} className=\"d-inline static_option form-control\" required /> <button type=\"submit\" className=\"p-1 mt-1\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                            </div>\r\n                            {options.map((item, i) => {\r\n                                return <div key={i} className={`mcqDisplay mcq${i}`}><p style={{ width: '80%', fontSize: '15px', wordWrap: 'break-word' }} className=\"option_text py-auto mb-2\">{item.option}</p><div className=\"mcqDisplay__button\"><svg onClick={() => onselect(i)} className=\"MuiSvgIcon-root mcqDisplay__correct\" style={{ cursor: 'pointer' }} focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path></svg><svg onClick={() => deleteOption(i)} style={{ cursor: 'pointer' }} className=\"MuiSvgIcon-root mcqDisplay__delete\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path></svg></div></div>\r\n                            })}\r\n                        </form>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-between w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={() => history.push(\"/admin/panel/add/images\")} className=\"bg-success mx-2 mt-2 btn mybutton\">Next Step</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={() => setConfirmDialogStatus(true)} className=\"border mt-2 mybutton delete_mcq_button btn\">delete</button>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={update_mcq_by_id} className=\"border mt-2 mybutton update_mcq_button btn mybutton\">update</button>\r\n                                            <Button variant=\"contained\" onClick={add_mcq} className=\"mybutton next_mcq_button\">Next</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-3\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay pb-1 h5 `}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {/* Alerts */}\r\n            <Snackbar open={openAlertDelete} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Deleted Successfull\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openAlertUpdate} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Updated Successfull\r\n                </Alert>\r\n            </Snackbar>\r\n            <Snackbar open={openAlertAdd} autoHideDuration={5000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    Added Successfull\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* Dialog Box */}\r\n            <ConfirmDialog ConfirmDialog={ConfirmDialogStatus} ConfirmDesc=\"Are you sure you want to delete this field?\" handleClose={handleClose} />\r\n            {/*   Confirm Dialog Box   */}\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeState: (data) => {\r\n            dispatch(add_mcq(data))\r\n        },\r\n        updateState: (data) => {\r\n            dispatch(update_mcq(data))\r\n        },\r\n        deleteState: (data) => {\r\n            dispatch(remove_mcq(data))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddmcqsComponent);","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js",["135"],"import React, {useEffect, useState} from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport {add_board } from '../../action/index'\r\nimport {connect} from 'react-redux'\r\nimport {useHistory} from 'react-router-dom'\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nfunction AdminAddBoardComponent(props) {\r\n    const history = useHistory();\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [paper, setPaper] = useState({\r\n        system: '',\r\n        board: '',\r\n        subject: '',\r\n        year: '',\r\n        month: '',\r\n        series: '',\r\n        paper: ''\r\n    });\r\n\r\n    const submit_data = (e) => {\r\n        e.preventDefault()\r\n        props.add_board(paper)\r\n        history.push(\"/admin/panel/add/\")\r\n    }\r\n\r\n    const change_input = (e) => {\r\n        setPaper({...paper, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const change_month_and_year = (date) => {\r\n        setStartDate(date)\r\n        const monthNumber = date.getMonth();\r\n        const year = date.getFullYear();\r\n        var month = \"\";\r\n        switch(monthNumber.toString()){\r\n            case \"0\":\r\n                month=\"January\";\r\n                break;\r\n            case \"1\":\r\n                month=\"February\";\r\n                break;\r\n            case \"2\":\r\n                month=\"March\"\r\n                break;\r\n            case \"3\":\r\n                month=\"April\"\r\n                break;\r\n            case \"4\":\r\n                month=\"May\"\r\n                break;\r\n            case \"5\":\r\n                month=\"June\"\r\n                break;\r\n            case \"6\":\r\n                month=\"July\"\r\n                break;\r\n            case \"7\":\r\n                month=\"August\"\r\n                break;\r\n            case \"8\":\r\n                month=\"September\"\r\n                break;\r\n            case \"9\":\r\n                month=\"October\"\r\n                break;\r\n            case \"10\":\r\n                month=\"November\"\r\n                break;\r\n            case \"11\":\r\n                month=\"December\"\r\n                break;\r\n            default:\r\n                alert(\"please try again\")\r\n        }\r\n        setPaper({...paper, year: year, month: month})\r\n    }\r\n\r\n    return (\r\n        <section className=\"add_board_main\">\r\n            <div className=\"add_board_child px-md-5 px-4\">\r\n                <h1 className=\"text-center board_titile\">Add Paper</h1>\r\n                <form className=\"board_form mx-auto mt-5\" onSubmit={submit_data}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter System :</label>\r\n                        <input type=\"text\" autoFocus className=\"form-control\" name=\"system\" onChange={change_input} value={paper.system} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Board :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"board\" value={paper.board} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Subject :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"subject\" value={paper.subject} required/>\r\n                    </div>\r\n                    <div className=\"form-group datepicker_main\">\r\n                        <label htmlFor=\"\">Select Year And Month :</label><br />\r\n                        <DatePicker className=\"form-control w-100\" selected={startDate} showMonthYearPicker peekNextMonth onChangeRaw={e => e.preventDefault()} onFocus={e => e.preventDefault()} onKeyDown={e => e.preventDefault()} disabledKeyboardNavigation dateFormat=\"MMMM yyyy\" onChange={change_month_and_year} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Series :</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"series\" value={paper.series} required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Enter Paper:</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={change_input} name=\"paper\" value={paper.paper} required/>\r\n                    </div>\r\n                    <div className=\"form-group justify-content-center d-flex\">\r\n                        <button type=\"submit\" className=\"btn px-5 py-2 mybutton\">Submit</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        add_board: (data) => {\r\n            dispatch(add_board(data))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddBoardComponent);","F:\\exam105\\frontend\\frontend\\src\\action\\index.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddImages.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddImagesComponent.js",["136","137","138","139","140"],"import React, { useState, useEffect } from 'react'\r\nimport { FcAddImage } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { useSelector } from 'react-redux'\r\nimport LinearProgressWithLabel from './LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n   },\r\n}));\r\n\r\n\r\nconst AdminAddImagesComponent = () => {\r\n   const mcqReducer = useSelector(state => state.mcqReducer)\r\n   const boardReducer = useSelector(state => state.boardReducer)\r\n   const [open, setOpen] = React.useState(false);\r\n   // Create Progress\r\n   const classes = useStyles();\r\n   const [progress, setProgress] = useState(10);\r\n   useEffect(() => {\r\n      const timer = setInterval(() => {\r\n         setProgress((prevProgress) => (prevProgress >= 90 ? 10 : prevProgress + 7));\r\n      }, 800);\r\n      return () => {\r\n         clearInterval(timer);\r\n      };\r\n   }, []);\r\n   // Upload images\r\n   const upload_imgaes = (files) => {\r\n      handleToggle();\r\n      console.log(files)\r\n      $('.upload-icon').removeClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#fff' })\r\n      // const array = new Array(boardReducer[0]);\r\n      // mcqReducer.map((item, i) => {\r\n      //    array.push(item)\r\n      // })\r\n      // const jsonData = JSON.stringify(array);\r\n      // document.write(jsonData)\r\n   }\r\n   // on Drag Enter\r\n   const handleDragEnter = (e) => {\r\n      e.preventDefault();\r\n   }\r\n   // On Drag Over\r\n   const handleDragOver = (e) => {\r\n      e.preventDefault();\r\n      $('.upload-icon').addClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#96a599' })\r\n   }\r\n   // On Drag Leave\r\n   const handleDragLeave = (e) => {\r\n      e.preventDefault();\r\n      $('.upload-icon').removeClass('hover_image_upload')\r\n      $('.icon-text-box').css({ backgroundColor: '#fff' })\r\n   }\r\n   // On Dropg images\r\n   const handleDrop = (e) => {\r\n      e.preventDefault();\r\n      let images = e.dataTransfer.files\r\n      // Upload Images function callings\r\n      upload_imgaes(images)\r\n\r\n   }\r\n   // On custom add images\r\n   const handleAddImage = (e) => {\r\n      e.preventDefault();\r\n      let images = e.target.files\r\n      // Upload Images function callings\r\n      upload_imgaes(images)\r\n   }\r\n   // progressbra close\r\n   const handleClose = () => {\r\n      setOpen(false);\r\n   };\r\n   //  Propgressbar toogle\r\n   const handleToggle = () => {\r\n      setOpen(!open);\r\n   };\r\n\r\n   return (\r\n      <div className=\"image-uploader-wrapper\">\r\n         <div className=\"display-box\">\r\n            <div className=\"icon-text-box\">\r\n               <div className=\"upload-icon\">\r\n                  <FcAddImage className=\"upload_icon\" />\r\n               </div>\r\n            </div>\r\n            <div>\r\n               <input\r\n                  type=\"file\"\r\n                  id=\"upload-image-input\"\r\n                  className=\"upload-image-input\"\r\n                  multiple\r\n                  onDrop={handleDrop}\r\n                  onDragEnter={handleDragEnter}\r\n                  onDragOver={handleDragOver}\r\n                  onDragLeave={handleDragLeave}\r\n                  onChange={handleAddImage}\r\n               />\r\n            </div>\r\n         </div>\r\n         <div>\r\n         </div>\r\n         <Backdrop className={classes.backdrop} open={open}>\r\n            <LinearProgressWithLabel value={progress} />;\r\n      </Backdrop>\r\n         {/* Full Width Progress bar */}\r\n         {/*<div style={{ width: '100%' }} className=\"Full_Page_Progress\">\r\n               <LinearProgressWithLabel value={progress} />\r\n   </div>*/}\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\n\r\n\r\nexport default AdminAddImagesComponent\r\n","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js",["141"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n    return (\r\n      <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        width=\"100\"\r\n        heigth=\"100\"\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" className=\"text-white\">{`${Math.round(\r\n          props.value,\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n    );\r\n  }\r\n\r\n  export default LinearProgressWithLabel;","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js",["142"],"import React from 'react'\r\nimport AdminSideBar from '../Components/AdminSideBar'\r\nimport {Button } from '@material-ui/core'\r\nimport {useHistory, NavLink} from 'react-router-dom'\r\n\r\nfunction AdminChoiceAndTheory() {\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <AdminSideBar />\r\n            <div className=\"d-flex align-items-center justify-content-center\" style={{ height: '100vh' }}>\r\n                <div>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/mcqs\")} className=\"mr-3\" variant=\"contained\">Add Multiple Choice Question</Button>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/theory\")}variant=\"contained\">Add Theory Question</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminChoiceAndTheory;\r\n","F:\\exam105\\frontend\\frontend\\src\\reducers\\LoginAndLogout.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js",["143","144"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport {Button} from '@material-ui/core'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport { MdModeEdit } from \"react-icons/md\"\r\n\r\nfunction createData(system, board, subject, year, month, series, paper, operations) {\r\n  return { system, board, subject, year, month, series, paper, operations };\r\n}\r\n\r\nconst rows = [\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n  createData('SYSTEM', 'BOARD', 'SUBJECT', 'YEAR', 'MONTH', 'SERIES', 'PAPER'),\r\n];\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'system', numeric: false, disablePadding: true, label: 'System' },\r\n  { id: 'board', numeric: false, disablePadding: false, label: 'Board' },\r\n  { id: 'subject', numeric: false, disablePadding: false, label: 'Subject' },\r\n  { id: 'year', numeric: false, disablePadding: false, label: 'Year' },\r\n  { id: 'month', numeric: false, disablePadding: false, label: 'Month' },\r\n  { id: 'series', numeric: false, disablePadding: false, label: 'Series' },\r\n  { id: 'paper', numeric: false, disablePadding: false, label: 'Paper' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n  const history = useHistory();\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n          <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n            Papers List\r\n          </Typography>\r\n        )}\r\n\r\n      {numSelected === 1 ? (\r\n        <div className=\"d-flex\">\r\n          <IconButton aria-label=\"Delete Paper\">\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          <IconButton aria-label=\"Edit Paper\">\r\n            <MdModeEdit />\r\n          </IconButton>\r\n        </div>\r\n      ) : (\r\n          (numSelected > 0) ? (\r\n            <Tooltip title=\"Delete Papers\">\r\n              <IconButton aria-label=\"delete\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          ) : (\r\n\r\n              <Tooltip title=\"Add Paper\">\r\n                <Button variant=\"outlined\" color=\"primary\" style={{ width: '15%' }} onClick={() => history.push(\"/admin/panel/add/papers\")}>\r\n                        Add Paper\r\n                </Button>\r\n              </Tooltip>\r\n            ))}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminPapersComponent() {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('calories');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n, index) => index);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, index) => {\r\n    const selectedIndex = selected.indexOf(index);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, index);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={`${classes.root} container d-flex align-items-center flex-column mt-5`}>\r\n      <Paper className={`${classes.paper} `}>\r\n        <EnhancedTableToolbar numSelected={selected.length} />\r\n        <TableContainer>\r\n          <Table\r\n            className={`${classes.table} text-white`}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(index);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, index)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.system}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.board}</TableCell>\r\n                      <TableCell align=\"left\">{row.subject}</TableCell>\r\n                      <TableCell align=\"left\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.month}</TableCell>\r\n                      <TableCell align=\"left\">{row.series}</TableCell>\r\n                      <TableCell align=\"left\">{row.paper}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          style={{ border: 'none' }}\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}","F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js",["145","146","147","148","149"],"import React, { useEffect, useState } from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { add_theory, remove_theory, update_theory } from '../../action/index'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from './ModelNotification'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AdminAddTheoryComponent(props) {\r\n    // React State hooks\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [topics, setTopics] = useState([])\r\n    const [openAlert, setOpenAlert] = React.useState(false);\r\n    const [AlertValue, setAlertValue] = React.useState(false);\r\n    const [ConfirmDialog, setConfirmDialog] = React.useState(false);\r\n    // Dialog Hooks\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n    const [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\n    const [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\n    const [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\n\r\n    // React Redux\r\n    const theoryReducer = useSelector(state => state.theoryReducer)\r\n    const boardReducer = useSelector(state => state.boardReducer)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (boardReducer.length === 0) {\r\n            history.push(\"/admin/panel/add/papers/\")\r\n        }\r\n        $('.answer_output').slideUp();\r\n        $('.question_output').slideUp();\r\n    }, [])\r\n    // Math compiler\r\n    // question input changehandler\r\n    const questionChange = (e) => {\r\n        setQuestion(e.target.value);\r\n    }\r\n    // SetTime Out Functions\r\n    const mcqButtonChangeBorder = (e) => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < theoryReducer.length; i++) {\r\n                if (i === e) {\r\n                    $(`.question${e}`).css({ border: '3px solid black' })\r\n                } else {\r\n                    $(`.question${i}`).css({ border: '3px solid white' })\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    // on mcq added\r\n    const add_theory_question = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || answer === \"\") {\r\n            setDialogDesc(\"All Fields Are Required?\")\r\n            setDialogStatus(true)\r\n        } else {\r\n            const data = {\r\n                question: question,\r\n                answer: answer,\r\n                marks: mark,\r\n                topics: topics\r\n            }\r\n            props.changeState(data)\r\n            setAlertValue(\"Added Successfull\")\r\n            setOpenAlert(true)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n        }\r\n    }\r\n    // Get Old Mcq for Update\r\n    const getOldTheroyQuestion = (e) => {\r\n        window.value = e;\r\n        mcqButtonChangeBorder(e)\r\n        setTopics([])\r\n        setQuestion(theoryReducer[e].question)\r\n        setAnswer(theoryReducer[e].answer)\r\n        $('.marks').val(theoryReducer[e].marks);\r\n        setTopics(theoryReducer[e].topics)\r\n        // // Hide and show buttons\r\n        $('.next_theory_button').css(\"display\", \"none\")\r\n        $('.update_theory_button').css(\"display\", \"inline\");\r\n        $('.delete_theory_button').css(\"display\", \"inline\");\r\n    }\r\n    // // Update Mcq By its Id\r\n    const update_theory_question_by_id = () => {\r\n        if (window.value != null) {\r\n            const mark = $('.marks').val();\r\n            if (question === \"\" || mark === \"\" || answer === \"\") {\r\n                setDialogDesc(\"All Fields Are Required?\")\r\n                setDialogStatus(true)\r\n            } else {\r\n                const mark = $('.marks').val();\r\n                const data = {\r\n                    question: question,\r\n                    answer: answer,\r\n                    marks: mark,\r\n                    topics: topics,\r\n                    index: window.value\r\n                }\r\n                props.updateState(data)\r\n                setQuestion(\"\")\r\n                setAnswer(\"\")\r\n                setTopics([])\r\n                mcqButtonChangeBorder(-1)\r\n                $('.next_theory_button').css(\"display\", \"inline\")\r\n                $('.update_theory_button').css(\"display\", \"none\");\r\n                $('.delete_theory_button').css(\"display\", \"none\");\r\n                setAlertValue(\"Updated Successfull\")\r\n                setOpenAlert(true)\r\n            }\r\n        } else {\r\n            setDialogDesc(\"Select MCQ For Delete?\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // // Delete Mcq By its Id\r\n    const delete_theory_question = () => {\r\n        setConfirmDialog(false)\r\n        if (window.value != null) {\r\n            const index = window.value;\r\n            props.deleteState(index)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n            mcqButtonChangeBorder(-1)\r\n            setAlertValue(\"Deleted Successfull\")\r\n            setOpenAlert(true)\r\n            $('.next_mcq_button').css(\"display\", \"inline\")\r\n            $('.update_mcq_button').css(\"display\", \"none\");\r\n            $('.delete_mcq_button').css(\"display\", \"none\");\r\n        } else {\r\n            setDialogDesc(\"Please Select MCQ for Delete\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Add Topics\r\n    const submitTopic = (e) => {\r\n        e.preventDefault()\r\n        setTopics([...topics, { topic: topic }])\r\n        setTopic(\"\")\r\n    }\r\n    // Delete Topics\r\n    const deleteTopic = (e) => {\r\n        const deleteTopic = topics.filter((item, index) => e !== index);\r\n        setTopics(deleteTopic)\r\n    }\r\n    // Questinon Output Toggle\r\n    const question_output_hide_show = () => {\r\n        $('.question_output').slideToggle();\r\n    }\r\n    const answer_output_hide_show = () => {\r\n        $('.answer_output').slideToggle();\r\n    }\r\n    // // Create JSON\r\n    // const send_json = () => {\r\n    //     const array = new Array(boardReducer[0]);\r\n    //     mcqReducer.map((item, i) => {\r\n    //         array.push(item)\r\n    //     })\r\n    //     const jsonData = JSON.stringify(array);\r\n    //     document.write(jsonData)\r\n    // }\r\n    // // Close Alert\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlert(false)\r\n        setDialogStatus(false);\r\n        setConfirmDialog(false)\r\n    };\r\n    return (\r\n        <section className=\"add_mcq_main pt-3\">\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-2 mb-5 mcqs_list_main \">\r\n                        <div className=\"bg-white py-3 container-fluid\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            {theoryReducer.map((item, i) => (\r\n                                <button key={i} style={{ width: '40px' }} className={`col-3 text-center bg-success text-white question${i}`} onClick={() => getOldTheroyQuestion(i)}>{i + 1}</button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-7 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        {/* Responsive Meta Data */}\r\n                        <div className=\"table-responsive mx-auto\">\r\n                            <table className=\"table p-0 m-0\">\r\n                                <tbody>\r\n                                    {boardReducer.map((item, i) => (\r\n                                        <tr className=\"text-center\">\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.system}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.board}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.subject}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.year}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.month}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.series}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.paper}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"container-fluid\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <button type=\"button\" onClick={question_output_hide_show} className=\"btn btn-sm mybutton py-1 mb-2 px-2 d-flex ml-auto m-0\">hide / show</button>\r\n                            <div className=\"p-2 form-group question_output bg-info text-white col-12\" style={{ height: \"160px\", borderRadius: \"5px\", overflowY: 'scroll' }}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <textarea className=\"form-control\" placeholder=\"Enter Answer\" rows=\"5\" value={answer} onChange={(e) => setAnswer(e.target.value)} required></textarea>\r\n                            <button type=\"button\" onClick={answer_output_hide_show} className=\"btn btn-sm mybutton py-1 my-2 px-2 d-flex ml-auto m-0\">hide / show</button>\r\n                            <div className=\"p-2 form-group answer_output bg-info text-white col-12\" style={{ height: \"160px\", borderRadius: \"5px\", overflowY: 'scroll' }}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={answer} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-between w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={() => history.push(\"/admin/panel/add/images\")} className=\"bg-success mx-2 mt-2 btn mybutton\">Next Step</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={() => setConfirmDialog(true)} className=\"border mt-2 mybutton delete_theory_button btn\">delete</button>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={update_theory_question_by_id} className=\"border mt-2 mybutton update_theory_button btn mybutton\">update</button>\r\n                                            <Button variant=\"contained\" onClick={add_theory_question} className=\"mybutton next_theory_button\">Next</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-3\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay pb-1 h5 `}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {/* Alerts */}\r\n            <Snackbar open={openAlert} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {AlertValue}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* Dialog Box */}\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n            {/*   Confirm Dialog Box   */}\r\n            <Dialog\r\n                open={ConfirmDialog}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Notification</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Are You sure you want to delete this field?\r\n                        </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        cancel\r\n                        </Button>\r\n                    <Button color=\"primary\" onClick={delete_theory_question}>\r\n                        Yes\r\n                        </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeState: (data) => {\r\n            dispatch(add_theory(data))\r\n        },\r\n        updateState: (data) => {\r\n            dispatch(update_theory(data))\r\n        },\r\n        deleteState: (index) => {\r\n            dispatch({ type: \"remove_theory\", index: index })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddTheoryComponent);\r\n","F:\\exam105\\frontend\\frontend\\src\\reducers\\theory.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\ModelNotification.js",[],"F:\\exam105\\frontend\\frontend\\src\\AdminPanel\\Components\\ConfirmDialog.js",["150"],"import React from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from './ModelNotification'\r\nimport {Button} from '@material-ui/core'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction ConfirmDialog(props) {\r\n    return (\r\n        <Dialog\r\n            open={props.ConfirmDialog}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            maxWidth=\"xs\"\r\n            fullWidth=\"true\"\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Notification</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n                    {props.ConfirmDesc}\r\n                        </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.handleClose} color=\"primary\">\r\n                    cancel\r\n                        </Button>\r\n                <Button onClick={props.delete_mcq_by_id} color=\"primary\">\r\n                    Yes\r\n                        </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog\r\n",{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":33,"column":8,"nodeType":"157","endLine":33,"endColumn":10,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":9,"column":10,"nodeType":"161","messageId":"162","endLine":9,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":19,"column":8,"nodeType":"157","endLine":19,"endColumn":10,"suggestions":"163"},{"ruleId":"159","severity":1,"message":"164","line":13,"column":8,"nodeType":"161","messageId":"162","endLine":13,"endColumn":14},{"ruleId":"159","severity":1,"message":"165","line":14,"column":8,"nodeType":"161","messageId":"162","endLine":14,"endColumn":21},{"ruleId":"159","severity":1,"message":"166","line":15,"column":8,"nodeType":"161","messageId":"162","endLine":15,"endColumn":21},{"ruleId":"159","severity":1,"message":"167","line":16,"column":8,"nodeType":"161","messageId":"162","endLine":16,"endColumn":25},{"ruleId":"159","severity":1,"message":"168","line":17,"column":8,"nodeType":"161","messageId":"162","endLine":17,"endColumn":19},{"ruleId":"159","severity":1,"message":"169","line":23,"column":7,"nodeType":"161","messageId":"162","endLine":23,"endColumn":17},{"ruleId":"159","severity":1,"message":"170","line":44,"column":25,"nodeType":"161","messageId":"162","endLine":44,"endColumn":39},{"ruleId":"159","severity":1,"message":"171","line":45,"column":22,"nodeType":"161","messageId":"162","endLine":45,"endColumn":33},{"ruleId":"155","severity":1,"message":"172","line":56,"column":8,"nodeType":"157","endLine":56,"endColumn":10,"suggestions":"173"},{"ruleId":"159","severity":1,"message":"174","line":99,"column":13,"nodeType":"161","messageId":"162","endLine":99,"endColumn":17},{"ruleId":"159","severity":1,"message":"175","line":215,"column":11,"nodeType":"161","messageId":"162","endLine":215,"endColumn":27},{"ruleId":"159","severity":1,"message":"176","line":249,"column":11,"nodeType":"161","messageId":"162","endLine":249,"endColumn":20},{"ruleId":"177","severity":1,"message":"178","line":251,"column":34,"nodeType":"179","messageId":"180","endLine":251,"endColumn":36},{"ruleId":"159","severity":1,"message":"181","line":1,"column":16,"nodeType":"161","messageId":"162","endLine":1,"endColumn":25},{"ruleId":"159","severity":1,"message":"182","line":7,"column":8,"nodeType":"161","messageId":"162","endLine":7,"endColumn":24},{"ruleId":"159","severity":1,"message":"183","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":14},{"ruleId":"159","severity":1,"message":"184","line":22,"column":10,"nodeType":"161","messageId":"162","endLine":22,"endColumn":20},{"ruleId":"159","severity":1,"message":"185","line":23,"column":10,"nodeType":"161","messageId":"162","endLine":23,"endColumn":22},{"ruleId":"159","severity":1,"message":"186","line":81,"column":10,"nodeType":"161","messageId":"162","endLine":81,"endColumn":21},{"ruleId":"159","severity":1,"message":"187","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":17},{"ruleId":"159","severity":1,"message":"188","line":4,"column":21,"nodeType":"161","messageId":"162","endLine":4,"endColumn":28},{"ruleId":"159","severity":1,"message":"189","line":22,"column":8,"nodeType":"161","messageId":"162","endLine":22,"endColumn":22},{"ruleId":"159","severity":1,"message":"188","line":24,"column":10,"nodeType":"161","messageId":"162","endLine":24,"endColumn":17},{"ruleId":"159","severity":1,"message":"190","line":6,"column":22,"nodeType":"161","messageId":"162","endLine":6,"endColumn":35},{"ruleId":"159","severity":1,"message":"168","line":17,"column":8,"nodeType":"161","messageId":"162","endLine":17,"endColumn":19},{"ruleId":"159","severity":1,"message":"170","line":41,"column":25,"nodeType":"161","messageId":"162","endLine":41,"endColumn":39},{"ruleId":"159","severity":1,"message":"171","line":42,"column":22,"nodeType":"161","messageId":"162","endLine":42,"endColumn":33},{"ruleId":"155","severity":1,"message":"172","line":55,"column":8,"nodeType":"157","endLine":55,"endColumn":10,"suggestions":"191"},{"ruleId":"159","severity":1,"message":"192","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":25},"no-native-reassign",["193"],"no-negated-in-lhs",["194"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'loginReducer'. Either include them or remove the dependency array.","ArrayExpression",["195"],"no-unused-vars","'setLogout' is defined but never used.","Identifier","unusedVar",["196"],"'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'Transition' is assigned a value but never used.","'setDialogTitle' is assigned a value but never used.","'setDialogOk' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardReducer.length' and 'history'. Either include them or remove the dependency array.",["197"],"'item' is assigned a value but never used.","'delete_mcq_by_id' is assigned a value but never used.","'send_json' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'mcqReducer' is assigned a value but never used.","'boardReducer' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'PropTypes' is defined but never used.","'NavLink' is defined but never used.","'FilterListIcon' is defined but never used.","'remove_theory' is defined but never used.",["198"],"'ModelNotification' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"199","fix":"201"},{"desc":"202","fix":"203"},{"desc":"202","fix":"204"},"Update the dependencies array to be: [history, loginReducer]",{"range":"205","text":"206"},{"range":"207","text":"206"},"Update the dependencies array to be: [boardReducer.length, history]",{"range":"208","text":"209"},{"range":"210","text":"209"},[1298,1300],"[history, loginReducer]",[666,668],[2415,2417],"[boardReducer.length, history]",[2362,2364]]