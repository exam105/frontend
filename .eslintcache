[{"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\index.js":"1","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reportWebVitals.js":"2","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\App.js":"3","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\PresistedState.js":"4","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\index.js":"5","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js":"6","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js":"7","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js":"8","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js":"9","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js":"10","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\Board.js":"11","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js":"12","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\mcq.js":"13","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AddDataOperator.js":"14","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\LoginAndLogout.js":"15","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\theory.js":"16","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js":"17","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js":"18","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ConfirmDialog.js":"19","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js":"20","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js":"21","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js":"22","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ModelNotification.js":"23","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js":"24","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\EnhancedTableToolbar.js":"25","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\action\\index.js":"26","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\SelectDialog.js":"27","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\QuestionList.js":"28","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\DialogModalMetaData.js":"29","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\SeeQuestion.js":"30","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ImagesCarouselModal.js":"31","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\EditQuestions.js":"32","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\AddQuestion.js":"33"},{"size":2541,"mtime":1615229272872,"results":"34","hashOfConfig":"35"},{"size":375,"mtime":1611326404380,"results":"36","hashOfConfig":"35"},{"size":1343,"mtime":1615229272830,"results":"37","hashOfConfig":"35"},{"size":704,"mtime":1611374785660,"results":"38","hashOfConfig":"35"},{"size":346,"mtime":1612244982949,"results":"39","hashOfConfig":"35"},{"size":361,"mtime":1612244982944,"results":"40","hashOfConfig":"35"},{"size":380,"mtime":1611374785618,"results":"41","hashOfConfig":"35"},{"size":334,"mtime":1612244982945,"results":"42","hashOfConfig":"35"},{"size":347,"mtime":1611374785625,"results":"43","hashOfConfig":"35"},{"size":5576,"mtime":1615267409718,"results":"44","hashOfConfig":"35"},{"size":647,"mtime":1611374785657,"results":"45","hashOfConfig":"35"},{"size":874,"mtime":1612244982944,"results":"46","hashOfConfig":"35"},{"size":872,"mtime":1615229272873,"results":"47","hashOfConfig":"35"},{"size":9795,"mtime":1615229272829,"results":"48","hashOfConfig":"35"},{"size":257,"mtime":1612244982949,"results":"49","hashOfConfig":"35"},{"size":821,"mtime":1612244982950,"results":"50","hashOfConfig":"35"},{"size":2666,"mtime":1615624133247,"results":"51","hashOfConfig":"35"},{"size":18630,"mtime":1615229272819,"results":"52","hashOfConfig":"35"},{"size":1869,"mtime":1615229272906,"results":"53","hashOfConfig":"35"},{"size":11129,"mtime":1615624133237,"results":"54","hashOfConfig":"35"},{"size":9876,"mtime":1615659285631,"results":"55","hashOfConfig":"35"},{"size":31283,"mtime":1615711062374,"results":"56","hashOfConfig":"35"},{"size":1510,"mtime":1615229272905,"results":"57","hashOfConfig":"35"},{"size":885,"mtime":1615229272823,"results":"58","hashOfConfig":"35"},{"size":5694,"mtime":1615229272823,"results":"59","hashOfConfig":"35"},{"size":1934,"mtime":1615229272871,"results":"60","hashOfConfig":"35"},{"size":878,"mtime":1615229272870,"results":"61","hashOfConfig":"35"},{"size":9545,"mtime":1615624133371,"results":"62","hashOfConfig":"35"},{"size":12980,"mtime":1615229272825,"results":"63","hashOfConfig":"35"},{"size":6483,"mtime":1615646220215,"results":"64","hashOfConfig":"35"},{"size":5246,"mtime":1615646220260,"results":"65","hashOfConfig":"35"},{"size":28312,"mtime":1615711132221,"results":"66","hashOfConfig":"35"},{"size":21153,"mtime":1615624133284,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1qqfdq1",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"70"},"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\index.js",[],["150","151"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reportWebVitals.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\App.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\PresistedState.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\index.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddTheory.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddBoard.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminPapers.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminAddmcqs.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminIndex.js",["152"],"import React, {useEffect, useState} from 'react'\r\nimport '../css/Style.css'\r\n// import { IconButton, Input , InputLabel , InputAdornment , FormControl, TextField } from '@material-ui/core';\r\n// import { Visibility , VisibilityOff } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { connect , useSelector } from 'react-redux'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button , TextField} from '@material-ui/core'\r\nimport Slide from '@material-ui/core/Slide';\r\nimport axios from 'axios'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction AdminIndex(props) {\r\n    const [values, setValues] = useState({\r\n        username: '',\r\n        password: '',\r\n        useremail: '',\r\n        showPassword: false,\r\n    });\r\n    const [DialogStatus, setDialogStatus] = React.useState(false);\r\n\r\n\r\n    const history = useHistory();\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    useEffect(()=> {\r\n        if (loginReducer){\r\n            history.push(\"/admin/panel/papers\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    const handleChange = (prop) => (e) => {\r\n        setValues({ ...values, [prop]: e.target.value });\r\n    };\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        axios({\r\n            method: 'post',\r\n            url: '/superuser/login',\r\n            headers: {\r\n              'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n            },\r\n            data: `username=${values.username}&useremail=${values.useremail}`,\r\n          })\r\n          .then(res => {\r\n              props.set_login(res.data.token);\r\n              history.push(\"/admin/panel/papers\")\r\n          })\r\n          .catch(err => \r\n            setDialogStatus(true)\r\n          )\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"admnh_login_main\">\r\n            <form class=\"admin_login_form py-4\" onSubmit={handleSubmit}>\r\n                <h2 className=\"text-center mb-5\">Admin Login</h2>\r\n                <div style={{ width: '60%', margin: '5px auto', display: 'flex' }}>\r\n                    <TextField onChange={handleChange(\"username\")} value={values.username} id=\"standard-basic\" label=\"User Name\" className=\"AdminUserField w-100\" type=\"text\" required />\r\n                </div><br />\r\n                <div style={{ width: '60%', margin: '0 auto', display: 'flex' }}>\r\n                    <TextField onChange={handleChange(\"useremail\")} value={values.useremail} id=\"standard-basic\" label=\"User Email\" className=\"AdminUserField w-100\" type=\"text\" required />\r\n                </div><br />\r\n                {/* <FormControl style={{ width: '60%', margin: '0 auto', display: 'flex' }} variant=\"fille\">\r\n                    <InputLabel htmlFor=\"filled-adornment-password\">Password *</InputLabel>\r\n                    <Input\r\n                        id=\"filled-adornment-password\"\r\n                        type={values.showPassword ? 'text' : 'password'}\r\n                        required\r\n                        value={values.password}\r\n                        onChange={handleChange('password')}\r\n                        endAdornment={\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"toggle password visibility\"\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDownPassword}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    {values.showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        }\r\n                    /><br /><br />\r\n                </FormControl> */}\r\n                <Button type=\"submit\" variant=\"contained\" className=\"mx-auto my-4 d-flex px-5 py-2\" color=\"primary\">\r\n                    Log In\r\n                </Button>\r\n            </form>\r\n            <Dialog\r\n                open={DialogStatus}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Error</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Please Enter Valid Username or Password\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setDialogStatus(false)} color=\"primary\">\r\n                        OK\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        set_login: (token) => {\r\n            dispatch({type: 'login', token: token})\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminIndex)\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\Board.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AdminChoiceAndTheory.js",["153"],"import React from 'react'\r\nimport AdminSideBar from '../Components/AdminSideBar'\r\nimport {Button } from '@material-ui/core'\r\nimport {useHistory, NavLink} from 'react-router-dom'\r\n\r\nfunction AdminChoiceAndTheory() {\r\n    const history = useHistory();\r\n    return (\r\n        <div>\r\n            <AdminSideBar />\r\n            <div className=\"d-flex align-items-center justify-content-center\" style={{ height: '100vh' }}>\r\n                <div>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/mcqs\")} className=\"mr-3\" variant=\"contained\">Add Multiple Choice Question</Button>\r\n                    <Button color=\"primary\" onClick={() => history.push(\"/admin/panel/add/theory\")}variant=\"contained\">Add Theory Question</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AdminChoiceAndTheory;\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\mcq.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Pages\\AddDataOperator.js",["154","155","156","157"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useSelector } from 'react-redux'\r\nimport { FcEditImage, FcDeleteDatabase } from \"react-icons/fc\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport ConfirmDialog from \"../../Modals/ConfirmDialog\";\r\nimport $ from 'jquery'\r\n\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst DataOperatorUI = () => {\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    const [data, setData] = useState({\r\n        username: \"\",\r\n        email: \"\"\r\n    })\r\n    const [rows, setRows] = React.useState([])\r\n    const [openSnakBar, setOpenSnakBar] = React.useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = React.useState(\"\")\r\n    const [confirmDialogStatus, setConfirmDialogStatus] = React.useState(false)\r\n    const [confirmDialogDesc, setConfirmDialogDesc] = React.useState(false)\r\n    const [callUseEffect, setCallUseEffect] = useState(false)\r\n\r\n    // Get Operator Data\r\n    React.useEffect(() => {\r\n        fetch(\"/superuser/operators\")\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.message) {\r\n                setRows([])\r\n            }else {\r\n                setRows(res)\r\n            }\r\n        })\r\n        .catch(err => console.log(err))\r\n    },[callUseEffect])\r\n\r\n\r\n    // Call Use Effect \r\n    const fetchData = () => {\r\n        if (callUseEffect){\r\n            setCallUseEffect(false)\r\n        }else {\r\n            setCallUseEffect(true)\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch(\"/superuser/operator\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            setSnackbarMessage(\"Operator Added Successful!\")\r\n            setOpenSnakBar(true)\r\n            setData({ username: \"\", email: \"\" })\r\n            fetchData();\r\n        })\r\n        .catch((err) => console.log(err))\r\n    }\r\n\r\n    const handleChange = (e, name) => {\r\n        setData({ ...data, [name]: e.target.value })\r\n    }\r\n\r\n\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n        setOpenSnakBar(false);\r\n      };\r\n\r\n    const setOperatorData = (id) => {\r\n        rows.map((item ,i )=> {\r\n            if (item.id == id) {\r\n                window.updateId = item.id;\r\n                setData({username: item.username, email: item.email})\r\n                // Update Button Show\r\n                $('.updateButton').removeClass(\"d-none\")\r\n                $('.updateButton').addClass('d-flex')\r\n                // Add Button Hide\r\n                $('.addButton').addClass(\"d-none\")\r\n                $('.addButton').removeClass(\"d-flex\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const updateOperator = (id) => {\r\n        if (window.updateId !== \"\") {\r\n        const body = {\r\n            id: window.updateId,\r\n            username: data.username,\r\n            email: data.email\r\n        \r\n        }  \r\n        fetch(`/superuser/operator/${window.updateId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': \"application/json\"\r\n            },\r\n            body: JSON.stringify(body),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res !== 0){\r\n                setSnackbarMessage(\"Operator Updated Successful!\")\r\n                setOpenSnakBar(true)\r\n                // Update Button Hide\r\n                $('.updateButton').removeClass(\"d-flex\")\r\n                $('.updateButton').addClass('d-none')\r\n                // Add Button Show\r\n                $('.addButton').addClass(\"d-flex\")\r\n                $('.addButton').removeClass(\"d-none\")\r\n                setData({ username: \"\", email: \"\"})\r\n                fetchData();\r\n            }\r\n        })\r\n        .catch((err) => console.log(err))\r\n        window.updateId = \"\"\r\n    }\r\n}\r\n\r\n    const openConfirmDialog = (id) => {\r\n        window.deleteId = id;\r\n        setConfirmDialogDesc(\"Are you sure you want to delete this field!\")\r\n        setConfirmDialogStatus(true)\r\n    }\r\n\r\n    const deleteOperator = () => {\r\n        if (window.deleteId === \"\") {\r\n            alert('Some went wrong please try again')\r\n        }else {\r\n            fetch(`/superuser/operator/${window.deleteId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': \"application/json\"\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                $('.updateButton').removeClass(\"d-flex\")\r\n                $('.updateButton').addClass('d-none')\r\n                // Add Button Hide\r\n                $('.addButton').addClass(\"d-flex\")\r\n                $('.addButton').removeClass(\"d-none\")\r\n                setConfirmDialogStatus(false)\r\n                setSnackbarMessage(\"Operator Deleted Successful!\")\r\n                setOpenSnakBar(true)\r\n                setData({\r\n                    username: \"\",\r\n                    email: \"\"\r\n                })\r\n                fetchData();\r\n            })\r\n            .catch((err) => console.log(err))\r\n            window.deleteId = \"\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container-fluid py-5\" style={{ background: '#E5E5E5', minHeight: '100vh' }}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <form className=\"py-4 rounded bg-white\">\r\n                        <h2 className=\"text-center\">Add Operator</h2><br />\r\n                        <TextField type=\"text\" value={data.username} onChange={(e) => handleChange(e, \"username\")} id=\"standard-basic\" label=\"User Name\" className=\"mx-auto d-flex\" style={{ width: '80%' }} required /><br />\r\n                        <TextField type=\"email\" value={data.email} onChange={(e) => handleChange(e, \"email\")} id=\"standard-basic\" label=\"User Email\" className=\"mx-auto d-flex\" style={{ width: '80%' }} required />\r\n                        <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={updateOperator} className=\"d-none updateButton mx-auto mt-5\">Update</Button>\r\n                        <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={handleSubmit} className=\"mx-auto addButton d-flex mt-5\">Add</Button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"rounded bg-white\">\r\n                        <h1 className=\"text-center m-0 shadow border py-4\">All Operators</h1>\r\n                        <TableContainer className=\"pb-3\" component={Paper} style={{ maxHeight: \"70vh\", overflowY: 'scroll' }}>\r\n                            <Table aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className=\"border font-weight-bold\" align=\"center\">User Name</TableCell>\r\n                                        <TableCell className=\"border font-weight-bold\" align=\"center\">User Email</TableCell>\r\n                                        <TableCell className=\"border font-weight-bold\" colSpan=\"2\" align=\"center\">Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {rows.map((row, index) => (\r\n                                        <TableRow key={row.name}>\r\n                                            <TableCell className=\"border\" align=\"center\">\r\n                                                {row.username}\r\n                                            </TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\">{row.email}</TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\"><FcEditImage onClick={() => setOperatorData(row.id)} style={{ cursor: 'pointer', fontSize: \"23px\" }} /></TableCell>\r\n                                            <TableCell className=\"border\" align=\"center\"><FcDeleteDatabase onClick={() => openConfirmDialog(row.id)} style={{ cursor: 'pointer', fontSize: \"23px\" }} /></TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* Snak Bar */}\r\n\r\n            <Snackbar open={openSnakBar} autoHideDuration={3000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {snackbarMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            {/* Model For Information */}\r\n\r\n            {/*   Confirm Dialog Box   */}\r\n            <ConfirmDialog delete_mcq_by_id={deleteOperator} ConfirmDialog={confirmDialogStatus} ConfirmDesc={confirmDialogDesc} handleClose={() => setConfirmDialogStatus(false)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DataOperatorUI;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\LoginAndLogout.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\reducers\\theory.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminSideBar.js",["158","159"],"import React, { useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  FcRemoveImage,\r\n  FcPlus,\r\n  FcTodoList,\r\n  FcDeleteDatabase,\r\n} from \"react-icons/fc\";\r\nimport { BsFillCaretRightFill } from \"react-icons/bs\";\r\nimport \"../css/AdminSideBar.css\";\r\nimport $ from \"jquery\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { reset_board, reset_theory, reset_mcq } from \"../../action/index\";\r\n\r\nfunction AdminSideBar(props) {\r\n  const history = useHistory();\r\n  const loginReducer = useSelector((state) => state.loginReducer);\r\n  useEffect(() => {\r\n    if (loginReducer === \"\") {\r\n      history.push(\"/admin/panel\");\r\n    } else {\r\n      fetch(\"/dashboard/de/metadata\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${loginReducer}`,\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (res.message) {\r\n            props.set_logout();\r\n            history.push(\"/admin/panel/\");\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    }\r\n  }, []);\r\n  const sidebar_open = () => {\r\n    $(\".Admin_Sidebar\").toggleClass(\"open_sidebar\");\r\n    $(\".Admin_Sidebar\").blur(() => {\r\n      $(this).toggleClass(\"open_sidebar\");\r\n    });\r\n  };\r\n  const logout = () => {\r\n    props.set_logout();\r\n    history.push(\"/admin/panel/\");\r\n  };\r\n\r\n  return (\r\n    <section className=\"Admin_Sidebar\">\r\n      <ul className=\"sidebar_ul\">\r\n        <li className=\"admin_panel_heading_li\">\r\n          <h4 exact to=\"/admin/panel/\">\r\n            Admin Panel\r\n          </h4>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to=\"/admin/panel/papers\">\r\n            <FcTodoList /> Papers List\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to=\"/admin/panel/add/papers\">\r\n            <FcPlus /> Add Paper\r\n          </NavLink>\r\n        </li>\r\n        <li onClick={logout}>\r\n          <NavLink to=\"#\">\r\n            <FcDeleteDatabase /> Logout\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n      <BsFillCaretRightFill\r\n        className=\"sidebar_open_icon\"\r\n        onClick={sidebar_open}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    set_logout: () => {\r\n      dispatch({ type: \"logout\" });\r\n    },\r\n    reset_board: () => {\r\n      dispatch(reset_board());\r\n    },\r\n    reset_mcq: () => {\r\n      dispatch(reset_mcq());\r\n    },\r\n    reset_theory: () => {\r\n      dispatch(reset_theory());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminSideBar);\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddTheoryComponent.js",["160","161","162","163","164","165","166"],"import React, { useEffect, useState } from 'react'\r\nimport '../css/AdminAddmcqs.css'\r\nimport { FcPlus } from 'react-icons/fc'\r\nimport $ from 'jquery'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { add_theory, remove_theory, update_theory } from '../../action/index'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// Dialog Box\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ModelNotification from '../../Modals/ModelNotification'\r\nimport LinearProgressWithLabel from './LinearProgressBarWithLabel'\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n   },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AdminAddTheoryComponent(props) {\r\n    const classes = useStyles();\r\n    // React State hooks\r\n    const [question, setQuestion] = useState(\"\")\r\n    const [answer, setAnswer] = useState(\"\")\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [topics, setTopics] = useState([])\r\n    const [openAlert, setOpenAlert] = useState(false);\r\n    const [AlertValue, setAlertValue] = useState(false);\r\n    const [ConfirmDialog, setConfirmDialog] = useState(false);\r\n    const [ProgressBarStatus , setProgressBarStatus] = useState(false)\r\n    const [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n    // Dialog Hooks\r\n    const [DialogStatus, setDialogStatus] = useState(false);\r\n    const [DialogDesc, setDialogDesc] = useState(\"Are you Sure?\");\r\n    const [DialogTitle, setDialogTitle] = useState(\"Notification\");\r\n    const [DialogOk, setDialogOk] = useState(\"Ok\");\r\n    const [progress, setProgress] = useState(10);\r\n    // React Redux\r\n    const theoryReducer = useSelector(state => state.theoryReducer)\r\n    const boardReducer = useSelector(state => state.boardReducer)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (boardReducer.length === 0) {\r\n            history.push(\"/admin/panel/add/papers/\")\r\n        }\r\n        $('.answer_output').slideUp();\r\n        $('.question_output').slideUp();\r\n        const timer = setInterval(() => {\r\n            setProgress((prevProgress) => (prevProgress >= 90 ? 10 : prevProgress + 7));\r\n        }, 800);\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, [])\r\n    // Math compiler\r\n    // question input changehandler\r\n    const questionChange = (e) => {\r\n        setQuestion(e.target.value);\r\n    }\r\n    // SetTime Out Functions\r\n    const mcqButtonChangeBorder = (e) => {\r\n        setTimeout(() => {\r\n            for (var i = 0; i < theoryReducer.length; i++) {\r\n                if (i === e) {\r\n                    $(`.question${e}`).css({ border: '3px solid black' })\r\n                } else {\r\n                    $(`.question${i}`).css({ border: '3px solid white' })\r\n                }\r\n            }\r\n        }, 100)\r\n    }\r\n    // on mcq added\r\n    const add_theory_question = () => {\r\n        const mark = $('.marks').val();\r\n        if (question === \"\" || mark === \"\" || answer === \"\") {\r\n            setDialogDesc(\"All Fields Are Required?\")\r\n            setDialogStatus(true)\r\n        } else {\r\n            const data = {\r\n                question: question,\r\n                answer: answer,\r\n                marks: mark,\r\n                topics: topics\r\n            }\r\n            props.changeState(data)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n        }\r\n    }\r\n    // Get Old Mcq for Update\r\n    const getOldTheroyQuestion = (e) => {\r\n        window.value = e;\r\n        mcqButtonChangeBorder(e)\r\n        setTopics([])\r\n        setQuestion(theoryReducer[e].question)\r\n        setAnswer(theoryReducer[e].answer)\r\n        $('.marks').val(theoryReducer[e].marks);\r\n        setTopics(theoryReducer[e].topics)\r\n        // // Hide and show buttons\r\n        $('.next_theory_button').css(\"display\", \"none\")\r\n        $('.update_theory_button').css(\"display\", \"inline\");\r\n        $('.delete_theory_button').css(\"display\", \"inline\");\r\n    }\r\n    // // Update Mcq By its Id\r\n    const update_theory_question_by_id = () => {\r\n        if (window.value != null) {\r\n            const mark = $('.marks').val();\r\n            if (question === \"\" || mark === \"\" || answer === \"\") {\r\n                setDialogDesc(\"All Fields Are Required?\")\r\n                setDialogStatus(true)\r\n            } else {\r\n                const mark = $('.marks').val();\r\n                const data = {\r\n                    question: question,\r\n                    answer: answer,\r\n                    marks: mark,\r\n                    topics: topics,\r\n                    index: window.value\r\n                }\r\n                props.updateState(data)\r\n                setQuestion(\"\")\r\n                setAnswer(\"\")\r\n                setTopics([])\r\n                mcqButtonChangeBorder(-1)\r\n                $('.next_theory_button').css(\"display\", \"inline\")\r\n                $('.update_theory_button').css(\"display\", \"none\");\r\n                $('.delete_theory_button').css(\"display\", \"none\");\r\n                setAlertValue(\"Updated Successfull\")\r\n                setOpenAlert(true)\r\n            }\r\n        } else {\r\n            setDialogDesc(\"Select MCQ For Delete?\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // // Delete Mcq By its Id\r\n    const delete_theory_question = () => {\r\n        setConfirmDialog(false)\r\n        if (window.value != null) {\r\n            const index = window.value;\r\n            props.deleteState(index)\r\n            setQuestion(\"\")\r\n            setAnswer(\"\")\r\n            setTopics([])\r\n            mcqButtonChangeBorder(-1)\r\n            setAlertValue(\"Deleted Successfull\")\r\n            setOpenAlert(true)\r\n            $('.next_mcq_button').css(\"display\", \"inline\")\r\n            $('.update_mcq_button').css(\"display\", \"none\");\r\n            $('.delete_mcq_button').css(\"display\", \"none\");\r\n        } else {\r\n            setDialogDesc(\"Please Select MCQ for Delete\")\r\n            setDialogStatus(true)\r\n        }\r\n    }\r\n    // Add Topics\r\n    const submitTopic = (e) => {\r\n        e.preventDefault()\r\n        setTopics([...topics, { topic: topic }])\r\n        setTopic(\"\")\r\n    }\r\n    // Delete Topics\r\n    const deleteTopic = (e) => {\r\n        const deleteTopic = topics.filter((item, index) => e !== index);\r\n        setTopics(deleteTopic)\r\n    }\r\n    // Questinon Output Toggle\r\n    const question_output_hide_show = () => {\r\n        $('.question_output').slideToggle();\r\n    }\r\n    const answer_output_hide_show = () => {\r\n        $('.answer_output').slideToggle();\r\n    }\r\n    // // Create JSON\r\n    // const send_json = () => {\r\n    //     const array = new Array(boardReducer[0]);\r\n    //     mcqReducer.map((item, i) => {\r\n    //         array.push(item)\r\n    //     })\r\n    //     const jsonData = JSON.stringify(array);\r\n    //     document.write(jsonData)\r\n    // }\r\n    // // Close Alert\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpenAlert(false)\r\n        setDialogStatus(false);\r\n        setConfirmDialog(false)\r\n    };\r\n    return (\r\n        <section className=\"add_mcq_main pt-3\">\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-2 mb-5 mcqs_list_main \">\r\n                        <div className=\"bg-white py-3 container-fluid\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            {theoryReducer.map((item, i) => (\r\n                                <button key={i} style={{ width: '40px' }} className={`col-3 text-center bg-success text-white question${i}`} onClick={() => getOldTheroyQuestion(i)}>{i + 1}</button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Left Side */}\r\n                    <div className=\"col-lg-7 bg-white pb-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                        {/* Responsive Meta Data */}\r\n                        <div className=\"table-responsive mx-auto\">\r\n                            <table className=\"table p-0 m-0\">\r\n                                <tbody>\r\n                                    {boardReducer.map((item, i) => (\r\n                                        <tr className=\"text-center\">\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.system}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.board}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.subject}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.year}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.month}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.series}</td>\r\n                                            <td style={{ whiteSpace: 'nowrap' }}>{item.paper}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"container-fluid\" style={{ minHeight: '60vh' }}>\r\n                            <div className=\"form-group\">\r\n                                <textarea className=\"form-control\" placeholder=\"Enter Question\" rows=\"5\" value={question} onChange={questionChange} required></textarea>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={question_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group question_output col-12\" style={{ fontSize: markdownFontSize, borderRadius: \"5px\"}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={question} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                            <textarea className=\"form-control\" placeholder=\"Enter Answer\" rows=\"5\" value={answer} onChange={(e) => setAnswer(e.target.value)} required></textarea>\r\n                            <div className=\"row mt-3\">\r\n                                <select value={markdownFontSize} onChange={(e) => setMarkdownFontSize(e.target.value) } className=\"small ml-3\" style={{height: '25px'}}>\r\n                                    <option value=\"12px\">12px</option>\r\n                                    <option value=\"13px\">13px</option>\r\n                                    <option value=\"14px\">14px</option>\r\n                                    <option value=\"15px\">15px</option>\r\n                                    <option value=\"16px\">16px</option>\r\n                                </select>\r\n                                <button type=\"button\" onClick={answer_output_hide_show} className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\">Hide / Show</button>\r\n                            </div>\r\n                            <div className=\"p-2 form-group answer_output col-12\" style={{ fontSize: markdownFontSize, borderRadius: \"5px\"}}>\r\n                                <MathpixLoader>\r\n                                    <MathpixMarkdown text={answer} />\r\n                                </MathpixLoader>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12 mx-auto mt-4\">\r\n                                    <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-between w-100 \">\r\n                                        <div>\r\n                                            <button type=\"button\" onClick={() => history.push(\"/admin/panel/add/images\")} className=\"bg-success mx-2 mt-2 btn mybutton\">Next Step</button>\r\n                                            <button type=\"button\" className=\"bg-success mx-2 mt-2 btn mybutton\">Finish</button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={() => setConfirmDialog(true)} className=\"mr-2 bg-info border mt-2 mybutton delete_theory_button btn\">delete</button>\r\n                                            <button type=\"button\" style={{ display: \"none\" }} onClick={update_theory_question_by_id} className=\"border bg-info mt-2 mybutton update_theory_button btn mybutton\">update</button>\r\n                                            <Button variant=\"contained\" onClick={add_theory_question} className=\"mybutton bg-info next_theory_button\">Next</Button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* Mcqs Right Side */}\r\n                    <div className=\"col-lg-3\">\r\n                        <form onSubmit={submitTopic} className=\"bg-white py-4 px-3\" style={{ borderRadius: '20px', boxShadow: '0px 0px 2px black' }}>\r\n                            <div className=\"form-group mb-4\">\r\n                                <input type=\"number\" className=\"form-control marks w-50 float-left\" placeholder=\"Enter Marks\" max=\"100\" min=\"1\" /><br />\r\n                            </div>\r\n                            <div className=\"topics_main mt-3 container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <input type=\"text\" value={topic} onChange={(e) => setTopic(e.target.value)} className=\"form-control col-10\" placeholder=\"Enter Topic\" required />\r\n                                    <button type=\"submit\" className=\"col-md-2\" style={{ width: '5%', background: \"none\", border: \"none\", outline: \"none\" }}><FcPlus className=\"another_option h2\" /></button>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {topics.map((item, i) => {\r\n                                        return <div key={i} className={`topicDisplay pb-1 h5 `}><p className=\"option_text my-1\">{item.topic}</p><span className=\"delete_topic\" onClick={() => deleteTopic(i)}>&times;</span></div>\r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            {/* Alerts */}\r\n            <Snackbar open={openAlert} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"success\">\r\n                    {AlertValue}\r\n                </Alert>\r\n            </Snackbar>\r\n            {/* Dialog Box */}\r\n            <ModelNotification DialogStatus={DialogStatus} DialogTitle={DialogTitle} DialogDesc={DialogDesc} handleClose={handleClose} DialogOk={DialogOk} />\r\n            {/* Confirm Dialog Box */}\r\n            <Dialog\r\n                open={ConfirmDialog}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                maxWidth=\"xs\"\r\n                fullWidth=\"true\"\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-slide-title\" className=\"py-3 text-center h3\">Notification</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Are You sure you want to delete this field?\r\n                        </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        cancel\r\n                        </Button>\r\n                    <Button color=\"primary\" onClick={delete_theory_question}>\r\n                        Yes\r\n                        </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            {/* Progress Bar */}\r\n            <Backdrop className={classes.backdrop} open={ProgressBarStatus}>\r\n                <LinearProgressWithLabel value={progress} />;\r\n            </Backdrop>\r\n        </section>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeState: (data) => {\r\n            dispatch(add_theory(data))\r\n        },\r\n        updateState: (data) => {\r\n            dispatch(update_theory(data))\r\n        },\r\n        deleteState: (index) => {\r\n            dispatch({ type: \"remove_theory\", index: index })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddTheoryComponent);\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ConfirmDialog.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminPapersComponent.js",["167","168","169","170","171","172"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport EnhancedTableToolbar from './EnhancedTableToolbar'\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: 'system', numeric: false, disablePadding: true, label: 'System' },\r\n  { id: 'board', numeric: false, disablePadding: false, label: 'Board' },\r\n  { id: 'subject', numeric: false, disablePadding: false, label: 'Subject' },\r\n  { id: 'year', numeric: false, disablePadding: false, label: 'Year' },\r\n  { id: 'month', numeric: false, disablePadding: false, label: 'Month' },\r\n  { id: 'series', numeric: false, disablePadding: false, label: 'Series' },\r\n  { id: 'paper', numeric: false, disablePadding: false, label: 'Paper' }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n}));\r\n\r\nexport default function AdminPapersComponent() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = React.useState([]);\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('');\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(true);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n  const [id, setId] = React.useState([])\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [getData, setGetData] = React.useState(\"\")\r\n  const [progressBarStatus, setProgressBarStatus] = React.useState(\"\")\r\n\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    setId([])\r\n    setSelected([])\r\n    setProgressBarStatus('')\r\n    fetch(\"/dashboard/de/metadata\", {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${loginReducer}`\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.message) {\r\n          setRows([])\r\n          setSelected([])\r\n        } else { \r\n          setProgressBarStatus('d-none')\r\n          setRows(res)\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n  }, [getData])\r\n\r\n\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n, index) => index);\r\n      setSelected(newSelecteds);\r\n      const newId = rows.map((n, index) => n.id)\r\n      setId(newId)\r\n      return;\r\n    }\r\n    setId([])\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, index, id2) => {\r\n    const selectedIndex = selected.indexOf(index);\r\n    const selectedId = id.indexOf(id2)\r\n    let newSelected = [];\r\n    let newId = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, index);\r\n      newId = newId.concat(id, id2);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n      newId = newId.concat(id.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n      newId = newId.concat(id.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newId = newId.concat(\r\n        id.slice(0, selectedId),\r\n        id.slice(selectedId + 1)\r\n      )\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setId(newId)\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const callUseEffect = () => {\r\n    if (!getData) {\r\n      setGetData(true)\r\n    } else {\r\n      setGetData(false)\r\n    }\r\n  }\r\n\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setSelected([])\r\n    setId([])\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n\r\n  const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={`${classes.root} container d-flex align-items-center flex-column mt-5`}>\r\n      <Paper className={`${classes.paper} `}>\r\n        <EnhancedTableToolbar data={rows} progressBarStatus={progressBarStatus} id={id} selected={selected} callUseEffect={callUseEffect} />\r\n        <TableContainer style={{ boxShadow: \"0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)\" }}>\r\n          <Table\r\n            className={`${classes.table} mb-3 text-white`}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(index);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, index, row.id)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={index}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                        {row.system}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.board}</TableCell>\r\n                      <TableCell align=\"left\">{row.subject}</TableCell>\r\n                      <TableCell align=\"left\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.month}</TableCell>\r\n                      <TableCell align=\"left\">{row.series}</TableCell>\r\n                      <TableCell align=\"left\">{row.paper}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          style={{ border: 'none' }}\r\n          rowsPerPageOptions={[5, 10, 15, 20, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      {/* <FormControlLabel\r\n        control={<Switch color=\"primary\" checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      /> */}\r\n    </div>\r\n  );\r\n}","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddBoardComponent.js",["173","174","175","176","177","178","179","180"],"import React, { useState } from \"react\";\r\nimport \"../css/AdminAddmcqs.css\";\r\nimport { add_board, reset_mcq } from \"../../action/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport ModelNotification from \"../../Modals/ModelNotification\";\r\nimport ConfirmDialog from \"../../Modals/ConfirmDialog\";\r\nimport { MenuItem, Select } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction AdminAddBoardComponent(props) {\r\n  const history = useHistory();\r\n  const mcqReducer = useSelector((data) => data.mcqReducer);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [notificationStatus, setNotificationStatus] = useState(false);\r\n  const [confirmDialogStatus, setConfirmDialogStatus] = useState(false);\r\n  const [systems, setSystems] = useState([\r\n    { system: \"GCSE\" },\r\n    { system: \"IGCSE\" },\r\n    { system: \"AS\" },\r\n    { system: \"A Level\" },\r\n    { system: \"O Level\" },\r\n    { system: \"Pre U\" },\r\n    { system: \"IB\" },\r\n  ]);\r\n  const [boards, setBoards] = useState([]);\r\n\r\n  const [subjects, setSubjects] = useState([\r\n    { subject: \"Math\" },\r\n    { subject: \"Physics\" },\r\n    { subject: \"Biology\" },\r\n  ]);\r\n\r\n  const [series, setSeries] = useState([\r\n    { series: \"1\" },\r\n    { series: \"2\" },\r\n    { series: \"3\" },\r\n    { series: \"4\" },\r\n    { series: \"5\" },\r\n    { series: \"6\" },\r\n  ]);\r\n\r\n  const [papers, setPapers] = useState([\r\n    { paper: \"Paper 1\" },\r\n    { paper: \"Paper 2\" },\r\n    { paper: \"Paper 3\" },\r\n  ]);\r\n\r\n  const [paper, setPaper] = useState({\r\n    system: \"\",\r\n    board: \"\",\r\n    subject: \"\",\r\n    year: \"\",\r\n    month: \"\",\r\n    series: \"\",\r\n    paper: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (mcqReducer.length !== 0) {\r\n      setConfirmDialogStatus(true);\r\n    }\r\n  }, []);\r\n\r\n  const submit_data = (e) => {\r\n    e.preventDefault();\r\n    if (paper.month === \"\" || paper.year === \"\") {\r\n      setNotificationStatus(true);\r\n    } else {\r\n      props.add_board(paper);\r\n      props.reset_mcq();\r\n      history.push(\"/admin/panel/add/\");\r\n    }\r\n  };\r\n\r\n  const change_input = (e) => {\r\n    if (e.target.name === \"system\") {\r\n      if (e.target.value === \"GCSE\") {\r\n        setBoards([\r\n          { board: \"Edexcel CGSE\" },\r\n          { board: \"AQA GCSE\" },\r\n          { board: \"OCR GCSE\" },\r\n          { board: \"CCEA GCSE\" },\r\n        ]);\r\n      } else if (e.target.value === \"IGCSE\") {\r\n        setBoards([{ board: \"Edexcel IGCSE\" }, { board: \"CIE IGCSE\" }]);\r\n      } else if (e.target.value === \"AS\") {\r\n        setBoards([\r\n          { board: \"Edexcel AS\" },\r\n          { board: \"AQA AS\" },\r\n          { board: \"OCR AS\" },\r\n          { board: \"CIE AS\" },\r\n          { board: \"Edexcel IAL\" },\r\n        ]);\r\n      } else if (e.target.value === \"A Level\") {\r\n        setBoards([\r\n          { board: \"Edexcel A Level\" },\r\n          { board: \"AQA A Level\" },\r\n          { board: \"OCR A Level\" },\r\n          { board: \"CIE A Level\" },\r\n          { board: \"Edexcel IAL\" },\r\n        ]);\r\n      } else if (e.target.value === \"O Level\") {\r\n        setBoards([\r\n          { board: \"Edexcel A Level\" },\r\n          { board: \"AQA A Level\" },\r\n          { board: \"OCR A Level\" },\r\n          { board: \"CIE A Level\" },\r\n          { board: \"Edexcel IAL\" },\r\n        ]);\r\n      } else if (e.target.value === \"O Level\") {\r\n        setBoards([{ board: \"CIE O Level\" }]);\r\n      } else if (e.target.value === \"Pre U\") {\r\n        setBoards([{ board: \"CIE Pre U\" }]);\r\n      } else if (e.target.value === \"IB\") {\r\n        setBoards([{ board: \"No Board\", status: \"disable\" }]);\r\n      }\r\n    }\r\n    setPaper({ ...paper, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const change_month_and_year = (date) => {\r\n    setStartDate(date);\r\n    const monthNumber = date.getMonth();\r\n    const year = date.getFullYear();\r\n    var month = \"\";\r\n    switch (monthNumber.toString()) {\r\n      case \"0\":\r\n        month = \"January\";\r\n        break;\r\n      case \"1\":\r\n        month = \"February\";\r\n        break;\r\n      case \"2\":\r\n        month = \"March\";\r\n        break;\r\n      case \"3\":\r\n        month = \"April\";\r\n        break;\r\n      case \"4\":\r\n        month = \"May\";\r\n        break;\r\n      case \"5\":\r\n        month = \"June\";\r\n        break;\r\n      case \"6\":\r\n        month = \"July\";\r\n        break;\r\n      case \"7\":\r\n        month = \"August\";\r\n        break;\r\n      case \"8\":\r\n        month = \"September\";\r\n        break;\r\n      case \"9\":\r\n        month = \"October\";\r\n        break;\r\n      case \"10\":\r\n        month = \"November\";\r\n        break;\r\n      case \"11\":\r\n        month = \"December\";\r\n        break;\r\n      default:\r\n        alert(\"please try again\");\r\n    }\r\n    setPaper({ ...paper, year: year.toString(), month: month });\r\n  };\r\n\r\n  return (\r\n    <section className=\"add_board_main\">\r\n      <div className=\"add_board_child px-md-5 px-4\">\r\n        <h1 className=\"text-center board_titile py-3\"> Paper Meta Data </h1>\r\n        <form className=\"board_form mx-auto\" onSubmit={submit_data} id=\"myForm\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"system\">Select System : </label>\r\n            <select\r\n              value={paper.system}\r\n              id=\"system\"\r\n              name=\"system\"\r\n              onChange={change_input}\r\n              id=\"grouped-select\"\r\n              className=\"form-control form-select\"\r\n              required\r\n            >\r\n              <option>None</option>\r\n              {systems.map((item, i) => {\r\n                return <option value={item.system}>{item.system}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"\">Select Board : </label>\r\n            <select\r\n              value={paper.board}\r\n              name=\"board\"\r\n              onChange={change_input}\r\n              id=\"grouped-select\"\r\n              className=\"form-control form-select\"\r\n              required\r\n            >\r\n              <option value=\"\">None</option>\r\n              {boards.map((item, i) => {\r\n                return <option value={item.board}>{item.board}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"\">Select Subject :</label>\r\n            <select\r\n              value={paper.subject}\r\n              name=\"subject\"\r\n              onChange={change_input}\r\n              id=\"grouped-select\"\r\n              className=\"form-control form-select\"\r\n              required\r\n            >\r\n              <option value=\"\">None</option>\r\n              {subjects.map((item, i) => {\r\n                return <option value={item.subject}>{item.subject}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group datepicker_main\">\r\n            <label htmlFor=\"\">Select Year And Month :</label>\r\n            <br />\r\n            <DatePicker\r\n              className=\"form-control w-100\"\r\n              selected={startDate}\r\n              showMonthYearPicker\r\n              peekNextMonth\r\n              onChangeRaw={(e) => e.preventDefault()}\r\n              onFocus={(e) => e.preventDefault()}\r\n              onKeyDown={(e) => e.preventDefault()}\r\n              disabledKeyboardNavigation\r\n              dateFormat=\"MMMM yyyy\"\r\n              onChange={change_month_and_year}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"\">Select Series : </label>\r\n            <select\r\n              value={paper.series}\r\n              name=\"series\"\r\n              onChange={change_input}\r\n              id=\"grouped-select\"\r\n              className=\"form-control form-select\"\r\n              required\r\n            >\r\n              <option value=\"\">None</option>\r\n              {series.map((item, i) => {\r\n                return <option value={item.series}>{item.series}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"\">Select Paper :</label>\r\n            <select\r\n              value={paper.paper}\r\n              name=\"paper\"\r\n              onChange={change_input}\r\n              id=\"grouped-select\"\r\n              className=\"form-control form-select\"\r\n              required\r\n            >\r\n              <option value=\"\">None</option>\r\n              {papers.map((item, i) => {\r\n                return <option value={item.paper}>{item.paper}</option>;\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group justify-content-center d-flex\">\r\n            <button type=\"submit\" className=\"btn px-5 py-2 bg-info mybutton\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <ModelNotification\r\n        DialogStatus={notificationStatus}\r\n        DialogTitle=\"Notification\"\r\n        DialogDesc=\"Please Select Year and month.\"\r\n        handleClose={() => setNotificationStatus(false)}\r\n        DialogOk=\"Ok\"\r\n      />{\" \"}\r\n      {/* Modal For Confirmation */} {/* Confirm Modal Dialog Status */}\r\n      <ConfirmDialog\r\n        okButton=\"continue\"\r\n        delete_mcq_by_id={() => history.push(\"/admin/panel/add/mcqs\")}\r\n        ConfirmDialog={confirmDialogStatus}\r\n        ConfirmDesc=\"Your Paper Already in Progress.Are you sure you want to continue with last Paper? if you add another data old data will be deleted.\"\r\n        handleClose={() => setConfirmDialogStatus(false)}\r\n      />{\" \"}\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    add_board: (data) => {\r\n      dispatch(add_board(data));\r\n    },\r\n    reset_mcq: () => {\r\n      dispatch(reset_mcq());\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AdminAddBoardComponent);\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\AdminAddmcqsComponent.js",["181","182","183","184","185","186","187","188","189","190","191","192"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ModelNotification.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\LinearProgressBarWithLabel.js",["193"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n    return (\r\n      <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress variant=\"determinate\" {...props} />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n        width=\"100\"\r\n        heigth=\"100\"\r\n      >\r\n        <Typography variant=\"caption\" component=\"div\" className=\"text-white\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n    )\r\n  }\r\n\r\n  export default LinearProgressWithLabel;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\EnhancedTableToolbar.js",["194","195","196","197"],"import React, { useState, useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Button } from '@material-ui/core'\r\nimport { MdModeEdit } from \"react-icons/md\"\r\nimport { useHistory } from 'react-router-dom'\r\nimport QuestionList from \"./UpdatePaper/QuestionList\";\r\nimport { BsFillEyeFill } from \"react-icons/bs\";\r\nimport DialogModalMetaData from './UpdatePaper/DialogModalMetaData'\r\nimport { useSelector } from 'react-redux'\r\nimport ConfirmDialog from '../../Modals/ConfirmDialog'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\n\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n        color: theme.palette.secondary.main,\r\n        backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n      }\r\n      : {\r\n        color: theme.palette.text.primary,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n      },\r\n  title: {\r\n    flex: '1 1 100%',\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const classes = useToolbarStyles();\r\n  const [editQuestion, setEditQuestion] = useState(false)\r\n  const { selected, id, data } = props;\r\n  const [dialogMetaData, setDialogMetaData] = useState(false)\r\n  const numSelected = selected.length;\r\n  const history = useHistory();\r\n  const [singleIdMetaData, setSingleIdMetaData] = useState([])\r\n  const loginReducer = useSelector(state => state.loginReducer)\r\n  const [confirmDialogStatus, setConfirmDialogStatus] = useState(false)\r\n  const { callUseEffect } = props\r\n\r\n\r\n  const openDialogMetaData = () => {\r\n    data.map((item, i) => {\r\n      if (item.id === id[0]) {\r\n        setSingleIdMetaData(item)\r\n      }\r\n    })\r\n    setDialogMetaData(true)\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setEditQuestion(true);\r\n  };\r\n\r\n\r\n  const deletePapers = async () => {\r\n    if (id) {\r\n      id.map((item,i) => {\r\n        fetch(`/dashboard/de/metadata/${item}`, {\r\n          method: 'DELETE',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${loginReducer}`\r\n          }\r\n        })\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            setConfirmDialogStatus(false)\r\n            callUseEffect();\r\n          })\r\n          .catch(err => console.log(err))\r\n      })  \r\n    }\r\n  }\r\n\r\n  const onHideQuestionList = () => {\r\n    console.log(id)\r\n    if (id.length >= 0) {\r\n      data.map((item, i) => {\r\n        if (item.id === id[0]) {\r\n          setSingleIdMetaData(item)\r\n        }\r\n      })\r\n      setEditQuestion(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n\r\n      {/* Edit Papers */}\r\n      <QuestionList open={editQuestion} metadata={singleIdMetaData} id={id} onClose={onHideQuestionList} />\r\n\r\n      {/* Modal Dialog MetaData */}\r\n      <DialogModalMetaData callUseEffect={callUseEffect} data={singleIdMetaData} DialogStatus={dialogMetaData} id={id} handleClose={() => setDialogMetaData(false)} />\r\n\r\n      {/* Confirm Modal Dialog Status */}\r\n      <ConfirmDialog delete_mcq_by_id={deletePapers} ConfirmDialog={confirmDialogStatus} ConfirmDesc=\"Are you sure you want to delete this Paper?\" handleClose={() => setConfirmDialogStatus(false)} />\r\n\r\n\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          <div className={`spinner-border mr-3 ${props.progressBarStatus}`} role=\"status\"></div>\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n            <Typography className={`${classes.title} align-items-center d-flex`} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n              <div className={`spinner-border mr-3 ${props.progressBarStatus}`} role=\"status\"></div>\r\n              Papers List\r\n            </Typography>\r\n        )}\r\n\r\n      {numSelected > 0 ? (\r\n        (numSelected !== 1 ? (\r\n          <IconButton aria-label=\"Delete Paper\" onClick={() => setConfirmDialogStatus(true)}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        ) : (\r\n            <div className=\"d-flex\">\r\n              <IconButton aria-label=\"Delete Paper\" onClick={() => setConfirmDialogStatus(true)}>\r\n                <DeleteIcon />\r\n              </IconButton>\r\n              <IconButton aria-label=\"Edit Paper\" onClick={openDialogMetaData}>\r\n                <MdModeEdit />\r\n              </IconButton>\r\n              <IconButton aria-label=\"See Questions\" onClick={handleClickOpen}>\r\n                <BsFillEyeFill />\r\n              </IconButton>\r\n            </div>\r\n          ))\r\n      ) : (\r\n          <div className=\"d-flex justify-content-end w-50\">\r\n            <Tooltip title=\"Add Paper\">\r\n              <Button className=\"py-0\" size=\"small\" variant=\"outlined\" color=\"primary\" onClick={() => history.push(\"/admin/panel/add/papers\")}>\r\n                Add Paper\r\n                  </Button>\r\n            </Tooltip>\r\n            <Tooltip title=\"Refresh Data\">\r\n              <IconButton aria-label=\"See Questions\" onClick={() => callUseEffect()}>\r\n                <RefreshIcon />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </div>\r\n        )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\n\r\nexport default EnhancedTableToolbar;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\action\\index.js",[],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\SelectDialog.js",[],["198","199"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\QuestionList.js",["200","201","202","203","204","205"],"import React, { useEffect, useState } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Button from \"@material-ui/core/Button\";\r\n// Dialog Box\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { MdModeEdit } from \"react-icons/md\";\r\nimport { BsFillEyeFill } from \"react-icons/bs\";\r\nimport ConfirmDialog from \"../../../Modals/ConfirmDialog\";\r\nimport EditQuestions from \"./EditQuestions\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport AddQuestion from \"../UpdatePaper/AddQuestion\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport SeeQuestion from \"./SeeQuestion\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition2 = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction QuestionList(props) {\r\n  const classes = useStyles();\r\n  const { open, metadata, onClose, id } = props;\r\n  const [rows, setRows] = React.useState([]);\r\n  const loginReducer = useSelector((state) => state.loginReducer);\r\n  const [openSeeDialog, setOpenSeeDialog] = React.useState(false);\r\n  const [confirmDialogStatus, setConfirmDialogStatus] = React.useState(false);\r\n  const [getQuestions, setGetQuestions] = React.useState(false);\r\n  const [editQuestionsStatus, setEditQuestionsStatus] = React.useState(false);\r\n  const [progressBarStatus, setProgressBarStatus] = React.useState(\"\");\r\n  const [openAddQuestion, setOpenAddQuestion] = React.useState(false);\r\n\r\n  const getAllQuestions = () => {\r\n    if (getQuestions === false) {\r\n      setGetQuestions(true);\r\n    } else {\r\n      setGetQuestions(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseDialogBox = () => {\r\n    onClose(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    setRows([]);\r\n    setProgressBarStatus(\"\");\r\n    if (id.length === 1) {\r\n      fetch(`/dashboard/de/questions/${id}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${loginReducer}`,\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          if (!metadata.subject) {\r\n            onClose(false);\r\n          }\r\n          setRows(res);\r\n          setProgressBarStatus(\"d-none\");\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      onClose(false);\r\n    }\r\n  }, [id, getQuestions]);\r\n\r\n  const deleteQuestion = () => {\r\n    if (window.DeleteQuestionsId !== \"\") {\r\n      if (id.length !== 0) {\r\n        fetch(`/dashboard/de/question/${window.DeleteQuestionsId}/meta/${id}`, {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${loginReducer}`,\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((res) => {\r\n            setConfirmDialogStatus(false);\r\n            getAllQuestions();\r\n            window.DeleteQuestionsId = \"\";\r\n          })\r\n          .catch((err) => console.log(err));\r\n      }\r\n    } else {\r\n      alert(\"Some Went Wrong. Please Try Again...\");\r\n      setConfirmDialogStatus(false);\r\n    }\r\n  };\r\n\r\n  const openConfirmDialog = (Qid) => {\r\n    window.DeleteQuestionsId = Qid;\r\n    setConfirmDialogStatus(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleCloseDialogBox}\r\n        TransitionComponent={Transition2}\r\n        style={{ zIndex: \"1\" }}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Update Questions\r\n            </Typography>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleCloseDialogBox}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <br />\r\n        <div className=\"d-flex justify-content-center\">\r\n          <div\r\n            className={`${progressBarStatus} spinner-border`}\r\n            role=\"status\"\r\n          ></div>\r\n        </div>\r\n        <TableContainer component={Paper}>\r\n          <Table className={`${classes.table}`} aria-label=\"simple table\">\r\n            {rows.map((row, index) => {\r\n              var bg;\r\n              if (index % 2 === 0) {\r\n                bg = \"#F6F6F6\";\r\n              } else {\r\n                bg = \"white\";\r\n              }\r\n              return (\r\n                <TableBody\r\n                  key={index}\r\n                  className=\"p-0 border\"\r\n                  style={{ background: bg }}\r\n                >\r\n                  <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-10 p-0 d-flex align-items-center\">\r\n                        {/* <TableCell className=\"onHoverBoldText\" onClick={() => { window.SeeQuestionId = row.id; setOpenSeeDialog(true) }} style={{ cursor: 'pointer' }}>{(row.questions.length >= 130) ? row.questions.slice(0, 130)+'...' : row.questions }</TableCell> */}\r\n                        <p\r\n                          className=\"seeSomeText onHoverBoldText px-3\"\r\n                          onClick={() => {\r\n                            window.SeeQuestionId = row.id;\r\n                            setOpenSeeDialog(true);\r\n                          }}\r\n                        >\r\n                          {row.questions}\r\n                        </p>\r\n                      </div>\r\n                      <div className=\"col-2\">\r\n                        <div className=\"d-flex\">\r\n                          <IconButton\r\n                            aria-label=\"Delete Question\"\r\n                            onClick={() => openConfirmDialog(row.id)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                          <IconButton\r\n                            aria-label=\"Edit Question\"\r\n                            onClick={() => {\r\n                              window.EditQuestionId = row.id;\r\n                              setEditQuestionsStatus(true);\r\n                            }}\r\n                          >\r\n                            <MdModeEdit />\r\n                          </IconButton>\r\n                          <IconButton\r\n                            aria-label=\"See Question\"\r\n                            onClick={() => {\r\n                              window.SeeQuestionId = row.id;\r\n                              setOpenSeeDialog(true);\r\n                            }}\r\n                          >\r\n                            <BsFillEyeFill />\r\n                          </IconButton>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </TableBody>\r\n              );\r\n            })}\r\n            <Fab\r\n              color=\"primary\"\r\n              style={{ position: \"fixed\", bottom: \"100px\", right: \"50px\" }}\r\n              aria-label=\"refresh\"\r\n              onClick={getAllQuestions}\r\n            >\r\n              <RefreshIcon />\r\n            </Fab>\r\n            <Fab\r\n              color=\"primary\"\r\n              style={{ position: \"fixed\", bottom: \"30px\", right: \"50px\" }}\r\n              aria-label=\"add\"\r\n              onClick={() => {\r\n                window.AddQuestionId = setOpenAddQuestion(true);\r\n              }}\r\n            >\r\n              <AddIcon />\r\n            </Fab>\r\n            {/* Add Question Dialog */}\r\n            <AddQuestion\r\n              getAllQuestions={getAllQuestions}\r\n              id={id}\r\n              open={openAddQuestion}\r\n              handleClose={() => setOpenAddQuestion(false)}\r\n            />\r\n          </Table>\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <br />\r\n        </TableContainer>\r\n      </Dialog>\r\n\r\n      {/* Confirm Modal Dialog */}\r\n      <ConfirmDialog\r\n        delete_mcq_by_id={deleteQuestion}\r\n        ConfirmDialog={confirmDialogStatus}\r\n        ConfirmDesc=\"Are you sure you want to delete this Question?\"\r\n        handleClose={() => setConfirmDialogStatus(false)}\r\n      />\r\n\r\n      {/* Edit Questions Modal Dialog */}\r\n      <EditQuestions\r\n        metadata={metadata}\r\n        open={editQuestionsStatus}\r\n        getAllQuestions={getAllQuestions}\r\n        onClose={() => setEditQuestionsStatus(false)}\r\n      />\r\n      {/* See Quesion Modal Dialog */}\r\n      <SeeQuestion\r\n        open={openSeeDialog}\r\n        handleClose={() => setOpenSeeDialog(false)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionList;\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\DialogModalMetaData.js",["206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useEffect } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { useSelector } from 'react-redux'\r\nimport DatePicker from \"react-datepicker\";\r\nimport ModelNotification from '../../../Modals/ModelNotification'\r\nimport { MenuItem, Select } from '@material-ui/core'\r\nimport $ from 'jquery'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nfunction DialogModalMetaData(props) {\r\n    const [open, setOpen] = React.useState(props.DialogStatus);\r\n    const loginReducer = useSelector(state => state.loginReducer)\r\n    const { callUseEffect } = props;\r\n\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [notificationStatus, setNotificationStatus] = useState(false)\r\n    const [systems, setSystems] = useState([\r\n        { system: \"GCSE\" },\r\n        { system: \"IGCSE\" },\r\n        { system: \"AS\" },\r\n        { system: \"A Level\" },\r\n        { system: \"O Level\" },\r\n        { system: \"Pre U\" },\r\n        { system: \"IB\" },\r\n    ])\r\n    const [boards, setBoards] = useState([])\r\n\r\n    const [subjects, setSubjects] = useState([\r\n        { subject: \"Math\" },\r\n        { subject: \"Physics\" },\r\n        { subject: \"Biology\" },\r\n    ])\r\n\r\n    const [series, setSeries] = useState([\r\n        { series: \"1\" },\r\n        { series: \"2\" },\r\n        { series: \"3\" },\r\n        { series: \"4\" },\r\n        { series: \"5\" },\r\n        { series: \"6\" },\r\n    ])\r\n\r\n    const [papers, setPapers] = useState([\r\n        { paper: \"Paper 1\" },\r\n        { paper: \"Paper 2\" },\r\n        { paper: \"Paper 3\" },\r\n    ])\r\n\r\n    const [paper, setPaper] = useState({\r\n        system: '',\r\n        board: '',\r\n        subject: '',\r\n        year: '',\r\n        month: '',\r\n        series: '',\r\n        paper: ''\r\n    });\r\n\r\n    const submit_data = (e) => {\r\n        e.preventDefault()\r\n        fetch(`/dashboard/de/metadata/${props.id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${loginReducer}`\r\n            },\r\n            body: JSON.stringify(paper)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                props.handleClose();\r\n                callUseEffect();\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n    const change_input = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        if (name === \"system\") {\r\n            if (value === \"GCSE\") {\r\n                setBoards([\r\n                    { board: \"Edexcel CGSE\" },\r\n                    { board: \"AQA GCSE\" },\r\n                    { board: \"OCR GCSE\" },\r\n                    { board: \"CCEA GCSE\" }\r\n                ])\r\n            } else if (value === \"IGCSE\") {\r\n                setBoards([\r\n                    { board: \"Edexcel IGCSE\" },\r\n                    { board: \"CIE IGCSE\" },\r\n                ])\r\n            } else if (value === \"AS\") {\r\n                setBoards([\r\n                    { board: \"Edexcel AS\" },\r\n                    { board: \"AQA AS\" },\r\n                    { board: \"OCR AS\" },\r\n                    { board: \"CIE AS\" },\r\n                    { board: \"Edexcel IAL\" }\r\n                ])\r\n            } else if (value === \"A Level\") {\r\n                setBoards([\r\n                    { board: \"Edexcel A Level\" },\r\n                    { board: \"AQA A Level\" },\r\n                    { board: \"OCR A Level\" },\r\n                    { board: \"CIE A Level\" },\r\n                    { board: \"Edexcel IAL\" }\r\n                ])\r\n            } else if (value === \"O Level\") {\r\n                setBoards([\r\n                    { board: \"Edexcel A Level\" },\r\n                    { board: \"AQA A Level\" },\r\n                    { board: \"OCR A Level\" },\r\n                    { board: \"CIE A Level\" },\r\n                    { board: \"Edexcel IAL\" }\r\n                ])\r\n            } else if (value === \"O Level\") {\r\n                setBoards([\r\n                    { board: \"CIE O Level\" }\r\n                ])\r\n            } else if (value === \"Pre U\") {\r\n                setBoards([\r\n                    { board: \"CIE Pre U\" }\r\n                ])\r\n            } else if (value === \"IB\") {\r\n                setBoards([\r\n                    { board: \"No Board\", status: \"disable\" }\r\n                ])\r\n            } else {\r\n                setBoards([])\r\n            }\r\n        }\r\n        setPaper({ ...paper, [e.target.name]: value })\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        const e = {\r\n            target: { name: \"system\", value: props.data.system }\r\n        }\r\n        change_input(e)\r\n        setPaper({\r\n            system: props.data.system,\r\n            board: props.data.board,\r\n            subject: props.data.subject,\r\n            year: props.data.year,\r\n            month: props.data.month,\r\n            series: props.data.series,\r\n            paper: props.data.paper\r\n        })\r\n        setOpen(props.DialogStatus)\r\n        let year = props.data.year;\r\n        let month = props.data.month;\r\n        let monthNumber = \"\";\r\n        switch (month) {\r\n            case \"January\":\r\n                monthNumber = 0\r\n                break;\r\n            case \"February\":\r\n                monthNumber = 1;\r\n                break;\r\n            case \"March\":\r\n                monthNumber = 2;\r\n                break;\r\n            case \"April\":\r\n                monthNumber = 3;\r\n                break;\r\n            case \"May\":\r\n                monthNumber = 4;\r\n                break;\r\n            case \"June\":\r\n                monthNumber = 5;\r\n                break;\r\n            case \"July\":\r\n                monthNumber = 6;\r\n                break;\r\n            case \"August\":\r\n                monthNumber = 7;\r\n                break;\r\n            case \"September\":\r\n                monthNumber = 8;\r\n                break;\r\n            case \"October\":\r\n                monthNumber = 9;\r\n                break;\r\n            case \"November\":\r\n                monthNumber = 10;\r\n                break;\r\n            case \"December\":\r\n                monthNumber = 11;\r\n                break;\r\n            default:\r\n                monthNumber = 1\r\n                year = 2020\r\n        }\r\n        const newDate = new Date(year, monthNumber)\r\n        setStartDate(newDate)\r\n    }, [props.DialogStatus])\r\n\r\n\r\n    const change_month_and_year = (date) => {\r\n        setStartDate(date)\r\n        const monthNumber = date.getMonth();\r\n        const year = date.getFullYear();\r\n        var month = \"\";\r\n        switch (monthNumber.toString()) {\r\n            case \"0\":\r\n                month = \"January\";\r\n                break;\r\n            case \"1\":\r\n                month = \"February\";\r\n                break;\r\n            case \"2\":\r\n                month = \"March\"\r\n                break;\r\n            case \"3\":\r\n                month = \"April\"\r\n                break;\r\n            case \"4\":\r\n                month = \"May\"\r\n                break;\r\n            case \"5\":\r\n                month = \"June\"\r\n                break;\r\n            case \"6\":\r\n                month = \"July\"\r\n                break;\r\n            case \"7\":\r\n                month = \"August\"\r\n                break;\r\n            case \"8\":\r\n                month = \"September\"\r\n                break;\r\n            case \"9\":\r\n                month = \"October\"\r\n                break;\r\n            case \"10\":\r\n                month = \"November\"\r\n                break;\r\n            case \"11\":\r\n                month = \"December\"\r\n                break;\r\n            default:\r\n                alert(\"please try again\")\r\n        }\r\n        setPaper({ ...paper, year: year.toString(), month: month })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                fullWidth=\"true\"\r\n                maxWidth=\"sm\"\r\n                onClose={props.handleClose}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogContent className=\"px-5\">\r\n                <form className=\"board_form mx-auto\" onSubmit={submit_data} id=\"myForm\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"system\">Select System : </label>\r\n                    <select value={paper.system} id=\"system\" name=\"system\" onChange={change_input} id=\"grouped-select\" className=\"form-control form-select\" required>\r\n                        <option>\r\n                            None\r\n                                </option>\r\n                        {systems.map((item, i) => {\r\n                            return (\r\n                                <option value={item.system}>{item.system}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Select Board : </label>\r\n                    <select value={paper.board} name=\"board\" onChange={change_input} id=\"grouped-select\" className=\"form-control form-select\" required>\r\n                        <option value=\"\">\r\n                            None\r\n                                </option>\r\n                        {boards.map((item, i) => {\r\n                            return (\r\n                                <option value={item.board}>{item.board}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Select Subject :</label>\r\n                    <select value={paper.subject} name=\"subject\" onChange={change_input} id=\"grouped-select\" className=\"form-control form-select\" required>\r\n                        <option value=\"\">\r\n                            None\r\n                                </option>\r\n                        {subjects.map((item, i) => {\r\n                            return (\r\n                                <option value={item.subject}>{item.subject}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group datepicker_main\">\r\n                    <label htmlFor=\"\">Select Year And Month :</label><br />\r\n                    <DatePicker className=\"form-control w-100\" selected={startDate} showMonthYearPicker peekNextMonth onChangeRaw={e => e.preventDefault()} onFocus={e => e.preventDefault()} onKeyDown={e => e.preventDefault()} disabledKeyboardNavigation dateFormat=\"MMMM yyyy\" onChange={change_month_and_year} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Select Series : </label>\r\n                    <select value={paper.series} name=\"series\" onChange={change_input} id=\"grouped-select\" className=\"form-control form-select\" required>\r\n                        <option value=\"\">\r\n                            None\r\n                                </option>\r\n                        {series.map((item, i) => {\r\n                            return (\r\n                                <option value={item.series}>{item.series}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Select Paper :</label>\r\n                    <select value={paper.paper} name=\"paper\" onChange={change_input} id=\"grouped-select\" className=\"form-control form-select\" required>\r\n                        <option value=\"\">\r\n                            None\r\n                                </option>\r\n                        {papers.map((item, i) => {\r\n                            return (\r\n                                <option value={item.paper}>{item.paper}</option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"form-group justify-content-center d-flex\">\r\n                    <button type=\"submit\" className=\"btn px-5 py-2 bg-info mybutton\">Submit</button>\r\n                </div>\r\n            </form>\r\n                    <ModelNotification DialogStatus={notificationStatus} DialogTitle=\"Notification\" DialogDesc=\"Please Select Year and month.\" handleClose={() => setNotificationStatus(false)} DialogOk=\"Ok\" />\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogModalMetaData;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\SeeQuestion.js",["216","217","218","219","220","221","222","223","224"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { useSelector } from 'react-redux'\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport S3 from 'react-aws-s3';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport ImagesCarouselModal from '../../../Modals/ImagesCarouselModal';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function SeeQuestion(props) {\r\n  const { handleClose, open } = props;\r\n  const [data, setData] = React.useState([]);\r\n  const loginReducer = useSelector(state => state.loginReducer);\r\n  const [question, setQuestion] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([]);\r\n  const [topics, setTopics] = React.useState([])\r\n  const [images, setImages] = React.useState([\r\n    {\r\n      imageurl: '',\r\n    }\r\n  ])\r\n  const [imageViewStatus, setImageViewStatus] = React.useState(false)\r\n\r\n\r\n  const ImageViewClose = () => {\r\n    setImageViewStatus(false)\r\n  }\r\n\r\n\r\n\r\n\r\n  React.useEffect(() => {\r\n    if (window.SeeQuestionId !== undefined) {\r\n          setOptions([])\r\n          setTopics([])\r\n          setQuestion(\"\")\r\n          setImages([])\r\n      fetch(`/dashboard/de/question/${window.SeeQuestionId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${loginReducer}`\r\n        }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          setQuestion(res.questions)\r\n          setOptions(res.options)\r\n          if (res.images) {\r\n            setImages(res.images)\r\n          } else {\r\n            setImages([])\r\n          }\r\n          if (res.topics) {\r\n            setTopics(res.topics)\r\n          } else {\r\n            setTopics([])\r\n          }\r\n          console.log(res)\r\n          window.SeeQuestionId = undefined\r\n        })\r\n        .catch(err => console.log(err))\r\n    } else {\r\n      handleClose();\r\n    }\r\n  }, [window.SeeQuestionId])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={() => {\r\n          setOptions([])\r\n          setTopics([])\r\n          setQuestion(\"\")\r\n          setImages([])\r\n          handleClose()\r\n        }\r\n        }\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        {\r\n          (question === \"\" ? (\r\n            <div className=\"d-flex align-items-center justify-content-center\" style={{ height: '50vh' }}>\r\n              <div class=\"spinner-border\" role=\"status\">\r\n              <span class=\"sr-only\">Loading...</span>\r\n            </div>\r\n            </div>\r\n          ): (\r\n      <DialogContent>\r\n        <div style={{ fontSize: \"15px\" }}>\r\n          <MathpixLoader>\r\n            <MathpixMarkdown text={question} />\r\n          </MathpixLoader>\r\n        </div>\r\n        <hr />\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h5 className=\"py-3 simple-header-font font-italic font-weight-bold shadow text-center\">Options</h5>\r\n              <div>\r\n                {options.map((item, i) => (\r\n                  <div className=\"pt-3 d-flex\" style={{ borderBottom: \"1px solid rgba(0,0,0,0.3)\" }}>\r\n                    {(item.correct === true) ? <CheckCircleIcon className=\"text-success\" /> : <CancelIcon className=\"text-danger\" />}\r\n                    <p> &nbsp;{item.option}</p>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              <h5 className=\"py-3 simple-header-font font-italic font-weight-bold shadow text-center\">Topics</h5>\r\n              <div>\r\n                {\r\n                  (topics.length === 0 ? (\r\n                    <h5 className=\"text-center\">This question does not have any topic</h5>\r\n                  ) : (\r\n                      topics.map((item, i) => (\r\n                        <div className=\"pt-3 d-flex\" style={{ borderBottom: \"1px solid rgba(0,0,0,0.3)\" }}>\r\n                          <p> &nbsp;{item.topic}</p>\r\n                        </div>\r\n                      ))\r\n                    )\r\n                  )\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div className=\"row\">\r\n            <h5 className=\"col-12 simple-header-font font-italic font-weight-bold shadow text-center py-3\">Related Images ({images.length})</h5>\r\n            {\r\n              (images.length === 0 ? (\r\n                <div className=\"col-12\">\r\n                  <h5 className=\"text-center\">This question does not have any image</h5>\r\n                </div>\r\n              ) : (\r\n                  images.map((item, i) => {\r\n                    if (item.imageurl) {\r\n                      return <div className=\"position-relative p-2 d-flex align-items-center col-2\" style={{ cursor: 'pointer' }} onClick={() => { window.activeImageinImageCarousel = i; setImageViewStatus(true) }}>\r\n                        <img alt=\"Image Error\" style={{ height: '120px', width: '100%' }} className=\"img-fluid px-1\" src={item.imageurl} />\r\n                      </div>\r\n                    }\r\n                  })\r\n                ))\r\n            }\r\n            {/* Images View Carousel Dialog */}\r\n            {\r\n              (images.lenght === 0) ? (\r\n                <div></div>\r\n              ) : (\r\n                  <ImagesCarouselModal open={imageViewStatus} handleClose={ImageViewClose} data={images} />\r\n                )\r\n            }\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n  ))\r\n}\r\n\r\n\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Cancel\r\n          </Button>\r\n      </DialogActions>\r\n      </Dialog >\r\n    </div >\r\n  );\r\n}\r\n","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\Modals\\ImagesCarouselModal.js",["225","226","227","228","229","230"],"import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst data2 = [\r\n    {\r\n        label: 'San Francisco – Oakland Bay Bridge, United States',\r\n        imgPath:\r\n            'https://images.unsplash.com/photo-1537944434965-cf4679d1a598?auto=format&fit=crop&w=400&h=250&q=60',\r\n    },\r\n    {\r\n        label: 'Bird',\r\n        imgPath:\r\n            'https://images.unsplash.com/photo-1538032746644-0212e812a9e7?auto=format&fit=crop&w=400&h=250&q=60',\r\n    },\r\n    {\r\n        label: 'Bali, Indonesia',\r\n        imgPath:\r\n            'https://images.unsplash.com/photo-1537996194471-e657df975ab4?auto=format&fit=crop&w=400&h=250&q=80',\r\n    },\r\n    {\r\n        label: 'NeONBRAND Digital Marketing, Las Vegas, United States',\r\n        imgPath:\r\n            'https://images.unsplash.com/photo-1518732714860-b62714ce0c59?auto=format&fit=crop&w=400&h=250&q=60',\r\n    },\r\n    {\r\n        label: 'Goč, Serbia',\r\n        imgPath:\r\n            'https://images.unsplash.com/photo-1512341689857-198e7e2f3ca8?auto=format&fit=crop&w=400&h=250&q=60',\r\n    },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: 50,\r\n        paddingLeft: theme.spacing(4),\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    img: {\r\n        height: 500,\r\n        overflow: 'hidden',\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst ImagesCarouselModal = (props) => {\r\n    const { data, open, handleClose } = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const maxSteps = data.length;\r\n\r\n    React.useEffect(() => {\r\n        if (window.activeImageinImageCarousel !== undefined) {\r\n            setActiveStep(window.activeImageinImageCarousel)\r\n        }\r\n    },[window.activeImageinImageCarousel])\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    if (!data[activeStep]) {\r\n        return (\r\n            <div></div>\r\n        )\r\n    } else {\r\n\r\n        return (\r\n            <div>\r\n                <Dialog\r\n                    open={open}\r\n                    fullWidth={true}\r\n                    maxWidth=\"sm\"\r\n                    TransitionComponent={Transition}\r\n                    keepMounted\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"alert-dialog-slide-title\"\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    {/* Image View Start */}\r\n                    <div className={classes.root}>\r\n                        <Paper square elevation={0} className={classes.header}>\r\n                            <Typography>{data[activeStep].imageurl.split('/').pop()}</Typography>\r\n                        </Paper>\r\n                        <img\r\n                            className={classes.img}\r\n                            src={data[activeStep].imageurl}\r\n                            alt={data[activeStep].label}\r\n                        />\r\n                        <MobileStepper\r\n                            steps={maxSteps}\r\n                            position=\"static\"\r\n                            variant=\"text\"\r\n                            activeStep={activeStep}\r\n                            nextButton={\r\n                                <Button size=\"small\" onClick={handleNext} disabled={activeStep === maxSteps - 1}>\r\n                                    Next\r\n                                    {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n                                </Button>\r\n                            }\r\n                            backButton={\r\n                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                            {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                            Back\r\n                        </Button>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ImagesCarouselModal;","F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\EditQuestions.js",["231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"F:\\PROGRAMMING\\CompanyWork\\exam105\\frontend\\src\\AdminPanel\\Components\\UpdatePaper\\AddQuestion.js",["245","246","247","248","249","250","251","252","253","254"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  AppBar,\r\n  Dialog,\r\n  Typography,\r\n  Slide,\r\n  Toolbar,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { FcPlus } from \"react-icons/fc\";\r\nimport $ from \"jquery\";\r\nimport { MathpixLoader, MathpixMarkdown } from \"mathpix-markdown-it\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n// Dialog Box\r\nimport ModelNotification from \"../../../Modals/ModelNotification\";\r\nimport S3 from \"react-aws-s3\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport LinearProgressWithLabel from \"../LinearProgressBarWithLabel\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition2 = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction AddQuestion(props) {\r\n  const classes2 = useStyles2();\r\n  const { open } = props;\r\n\r\n  //   Add Question\r\n  // React State hooks\r\n  const [question, setQuestion] = useState(\"\");\r\n  const [topic, setTopic] = useState(\"\");\r\n  const [options, setOptions] = useState([]);\r\n  const [topics, setTopics] = useState([]);\r\n  const [markdownFontSize, setMarkdownFontSize] = React.useState(\"14px\");\r\n  const [images, setImages] = React.useState([]);\r\n  const [config, setConfig] = React.useState();\r\n  const [ProgressBarStatus, setProgressBarStatus] = useState(false);\r\n  const [progress, setProgress] = useState(10);\r\n  // Dialog Hooks\r\n  const [DialogStatus, setDialogStatus] = React.useState(false);\r\n  const [DialogDesc, setDialogDesc] = React.useState(\"Are you Sure?\");\r\n  const [DialogTitle, setDialogTitle] = React.useState(\"Notification\");\r\n  const [DialogOk, setDialogOk] = React.useState(\"Ok\");\r\n  const classes = useStyles();\r\n  // React Redux\r\n  const loginReducer = useSelector((state) => state.loginReducer);\r\n\r\n  // UseEffect Hook\r\n  React.useEffect(() => {\r\n    // GET S3 CREDANTIONS\r\n    fetch(\"/dashboard/de/question/s3credentials\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${loginReducer}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        if (!res.message) {\r\n          setConfig({\r\n            bucketName: \"exam105\",\r\n            region: res.region,\r\n            accessKeyId: res.accesskey,\r\n            secretAccessKey: res.secretkey,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) =>\r\n        prevProgress >= 90 ? 10 : prevProgress + 7\r\n      );\r\n    }, 800);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  // question input changehandler\r\n  const questionChange = (e) => {\r\n    setQuestion(e.target.value);\r\n  };\r\n\r\n  const SelectedOptionsBackgroundChange = (optionsbyindex) => {\r\n    setTimeout(() => {\r\n      for (var i = 0; i < optionsbyindex.length; i++) {\r\n        if (optionsbyindex[i].correct === true) {\r\n          $(`.mcq${i}`).addClass(\"mcq_selected\");\r\n        } else {\r\n          $(`.mcq${i}`).removeClass(\"mcq_selected\");\r\n        }\r\n      }\r\n    }, 100);\r\n  };\r\n  // on option created\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    let opt = $(\".static_option\").val();\r\n    const option = opt.trim();\r\n    if (option.length > 0) {\r\n      setOptions([...options, { correct: false, option: option }]);\r\n      $(\".static_option\").val(\"\");\r\n    }\r\n    SelectedOptionsBackgroundChange(options);\r\n  };\r\n  // on option delete\r\n  const deleteOption = (e) => {\r\n    const newOptions = options.filter((_, index) => index !== e);\r\n    setOptions(newOptions);\r\n    var optionsbyindex = newOptions;\r\n    SelectedOptionsBackgroundChange(optionsbyindex);\r\n  };\r\n  // on option selected\r\n  const onselect = (e) => {\r\n    let items = [...options];\r\n    let item = { ...items[e] };\r\n    for (var i = 0; i < items.length; i++) {\r\n      if (items[i].correct === true) {\r\n        $(`.mcq${i}`).removeClass(\"mcq_selected\");\r\n        item.correct = true;\r\n        let item2 = { ...items[i] };\r\n        item2.correct = false;\r\n        items[i] = item2;\r\n      } else {\r\n        $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n        item.correct = true;\r\n      }\r\n    }\r\n    if (item.correct === true) {\r\n      $(`.mcq${e}`).addClass(\"mcq_selected\");\r\n      item.correct = true;\r\n    }\r\n    items[e] = item;\r\n    setOptions(items);\r\n  };\r\n  // Add Topics\r\n  const submitTopic = (e) => {\r\n    e.preventDefault();\r\n    setTopics([...topics, { topic: topic }]);\r\n    setTopic(\"\");\r\n  };\r\n  // Delete Topics\r\n  const deleteTopic = (e) => {\r\n    const deleteTopic = topics.filter((item, index) => e !== index);\r\n    setTopics(deleteTopic);\r\n  };\r\n  // Questinon Output Toggle\r\n  const question_output_hide_show = () => {\r\n    $(\".question_output\").slideToggle();\r\n  };\r\n  // Close Alert\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setDialogStatus(false);\r\n  };\r\n\r\n  // on mcq added\r\n  const add_questions_after_image_upload = (imageLocations, mark) => {\r\n    if (props.id.length === 1) {\r\n      const data = {\r\n        questions: question,\r\n        marks: mark,\r\n        options: options,\r\n        topics: topics,\r\n        images: imageLocations,\r\n      };\r\n      fetch(`/dashboard/de/question/meta/${props.id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${loginReducer}`,\r\n        },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          props.getAllQuestions();\r\n          setTopics([]);\r\n          setProgressBarStatus(false);\r\n          setOptions([]);\r\n          setQuestion(\"\");\r\n          setImages([]);\r\n          props.handleClose();\r\n          $(\".marks\").val(\"\");\r\n        })\r\n        .catch((err) => console.log(err));\r\n    } else {\r\n      props.handleClose();\r\n    }\r\n  };\r\n\r\n  const add_mcq = async () => {\r\n    if (props.id.length === 1) {\r\n      // Validation\r\n      const mark = $(\".marks\").val();\r\n      if (question === \"\" || mark === \"\" || options.length === 0) {\r\n        if (question === \"\") {\r\n          setDialogDesc(\"Question Field Are Required!\");\r\n        } else if (mark === \"\") {\r\n          setDialogDesc(\"Marks Field Are Required!\");\r\n        } else {\r\n          setDialogDesc(\"Options are Missing!\");\r\n        }\r\n\r\n        setDialogStatus(true);\r\n      } else {\r\n        const items = [...options];\r\n        let status = 0;\r\n        for (var i = 0; i < items.length; i++) {\r\n          if (items[i].correct === true) {\r\n            status = 1;\r\n          }\r\n        }\r\n        if (status === 1) {\r\n          setProgressBarStatus(true);\r\n          const ReactS3Client = new S3(config);\r\n\r\n          var imageLocations = [];\r\n          if (images.length !== 0) {\r\n            images.map((image, i) => {\r\n              ReactS3Client.uploadFile(image, image.name)\r\n                .then((res) => {\r\n                  const imageURL = { imageurl: res.location };\r\n                  imageLocations.push(imageURL);\r\n                  if (imageLocations.length === images.length) {\r\n                    add_questions_after_image_upload(imageLocations, mark);\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            });\r\n          } else {\r\n            add_questions_after_image_upload(imageLocations, mark);\r\n          }\r\n        } else {\r\n          setDialogDesc(\"Chose The correct Option\");\r\n          setDialogStatus(true);\r\n        }\r\n      }\r\n    } else {\r\n      props.handleClose();\r\n    }\r\n  };\r\n\r\n  const deleteImage = (index) => {\r\n    setImages(images.filter((item, i) => i !== index));\r\n  };\r\n\r\n  const handleAddImage = (e) => {\r\n    const files = e.target.files;\r\n    setImages([...files]);\r\n    var filesInput = $(\".upload_images_input_for_mcqs\");\r\n    filesInput.replaceWith(filesInput.val(\"\"));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={props.handleClose}\r\n        TransitionComponent={Transition2}\r\n      >\r\n        <AppBar className={classes2.appBar}>\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes2.title}>\r\n              Add Question\r\n            </Typography>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={props.handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <main>\r\n          {/* Add Question UI */}\r\n          {/* ///////////////////////////////////////////////////////////////////////////////// */}\r\n          <section\r\n            className=\"pt-3\"\r\n            style={{\r\n              background: \"#F5F3F9\",\r\n              height: \"auto\",\r\n              paddingBottom: \"70px\",\r\n            }}\r\n          >\r\n            {/* Add MCQs Child  */}\r\n            <div className=\"add_mcq_child container\">\r\n              <div className=\"row\">\r\n                {/* Mcqs Left Side */}\r\n                <div\r\n                  className=\"col-lg-8 bg-white pb-3\"\r\n                  style={{\r\n                    borderRadius: \"20px\",\r\n                    boxShadow: \"0px 0px 2px black\",\r\n                  }}\r\n                >\r\n                  <form\r\n                    onSubmit={submit}\r\n                    className=\"mt-4 container-fluid\"\r\n                    autoComplete=\"off\"\r\n                    style={{ minHeight: \"60vh\" }}\r\n                  >\r\n                    <div className=\"form-group\">\r\n                      <textarea\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter Question\"\r\n                        rows=\"5\"\r\n                        value={question}\r\n                        onChange={questionChange}\r\n                        required\r\n                      ></textarea>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <select\r\n                        value={markdownFontSize}\r\n                        onChange={(e) => setMarkdownFontSize(e.target.value)}\r\n                        className=\"small ml-3\"\r\n                        style={{ height: \"25px\" }}\r\n                      >\r\n                        <option value=\"12px\">12px</option>\r\n                        <option value=\"13px\">13px</option>\r\n                        <option value=\"14px\">14px</option>\r\n                        <option value=\"15px\">15px</option>\r\n                        <option value=\"16px\">16px</option>\r\n                      </select>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={question_output_hide_show}\r\n                        className=\"btn mr-3 btn-sm btn-info mybutton mb-2 d-flex ml-auto\"\r\n                      >\r\n                        Hide / Show\r\n                      </button>\r\n                    </div>\r\n                    <div\r\n                      className=\"p-2 form-group question_output col-12\"\r\n                      style={{ fontSize: markdownFontSize }}\r\n                    >\r\n                      <MathpixLoader>\r\n                        <MathpixMarkdown text={question} />\r\n                      </MathpixLoader>\r\n                    </div>\r\n                    <div className=\"form-group m-0\">\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"option_input\"\r\n                        placeholder=\"Enter Option\"\r\n                        style={{ width: \"90%\" }}\r\n                        className=\"d-inline static_option form-control\"\r\n                        required\r\n                      />{\" \"}\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"p-1 mt-1\"\r\n                        style={{\r\n                          width: \"5%\",\r\n                          background: \"none\",\r\n                          border: \"none\",\r\n                          outline: \"none\",\r\n                        }}\r\n                      >\r\n                        <FcPlus className=\"another_option h2\" />\r\n                      </button>\r\n                    </div>\r\n                    {options.map((item, i) => {\r\n                      return (\r\n                        <div key={i} className={`mcqDisplay mcq${i}`}>\r\n                          <p\r\n                            style={{\r\n                              width: \"80%\",\r\n                              fontSize: \"15px\",\r\n                              wordWrap: \"break-word\",\r\n                            }}\r\n                            className=\"option_text py-auto mb-2\"\r\n                          >\r\n                            {item.option}\r\n                          </p>\r\n                          <div className=\"mcqDisplay__button\">\r\n                            <svg\r\n                              onClick={() => onselect(i)}\r\n                              className=\"MuiSvgIcon-root mcqDisplay__correct\"\r\n                              style={{ cursor: \"pointer\" }}\r\n                              focusable=\"false\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              aria-hidden=\"true\"\r\n                            >\r\n                              <path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"></path>\r\n                            </svg>\r\n                            <svg\r\n                              onClick={() => deleteOption(i)}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\"MuiSvgIcon-root mcqDisplay__delete\"\r\n                              focusable=\"false\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              aria-hidden=\"true\"\r\n                            >\r\n                              <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path>\r\n                            </svg>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </form>\r\n                  <div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-12 mx-auto mt-4\">\r\n                        <div className=\"all_mcq_operations_button d-flex mx-auto justify-content-center w-100 \">\r\n                          <div onClick={add_mcq}>\r\n                            <button\r\n                              type=\"button\"\r\n                              onClick={add_mcq}\r\n                              className=\"bg-success mx-2 mt-2 btn mybutton\"\r\n                            >\r\n                              <p className=\"m-0\" onClick={add_mcq}>\r\n                                add\r\n                              </p>\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Mcqs Right Side */}\r\n                <div className=\"col-lg-4\">\r\n                  <form\r\n                    onSubmit={submitTopic}\r\n                    className=\"bg-white py-4 px-3\"\r\n                    style={{\r\n                      borderRadius: \"20px\",\r\n                      boxShadow: \"0px 0px 2px black\",\r\n                    }}\r\n                  >\r\n                    <div className=\"form-group mb-4\">\r\n                      <input\r\n                        type=\"number\"\r\n                        className=\"form-control marks w-50 float-left\"\r\n                        placeholder=\"Enter Marks\"\r\n                        max=\"100\"\r\n                        min=\"1\"\r\n                      />\r\n                      <br />\r\n                    </div>\r\n                    <div className=\"topics_main mt-3 container-fluid\">\r\n                      <div className=\"row\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={topic}\r\n                          onChange={(e) => setTopic(e.target.value)}\r\n                          className=\"form-control col-10\"\r\n                          placeholder=\"Enter Topic\"\r\n                          required\r\n                        />\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"col-md-2\"\r\n                          style={{\r\n                            width: \"5%\",\r\n                            background: \"none\",\r\n                            border: \"none\",\r\n                            outline: \"none\",\r\n                          }}\r\n                        >\r\n                          <FcPlus className=\"another_option h2\" />\r\n                        </button>\r\n                      </div>\r\n                      <div className=\"row\">\r\n                        {topics.map((item, i) => {\r\n                          return (\r\n                            <div\r\n                              key={i}\r\n                              className={`topicDisplay`}\r\n                              style={{ fontSize: \"12px\", fontWeight: \"500\" }}\r\n                            >\r\n                              <p className=\"option_text my-1\">{item.topic}</p>\r\n                              <span\r\n                                className=\"delete_topic\"\r\n                                style={{ fontSize: \"16px\" }}\r\n                                onClick={() => deleteTopic(i)}\r\n                              >\r\n                                &times;\r\n                              </span>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </form>\r\n                  <form\r\n                    className=\"bg-white mt-3 py-4 px-3\"\r\n                    style={{\r\n                      borderRadius: \"20px\",\r\n                      boxShadow: \"0px 0px 2px black\",\r\n                    }}\r\n                  >\r\n                    <input\r\n                      accept=\"image/*\"\r\n                      className={`upload_images_input_for_mcqs small`}\r\n                      id=\"raised-button-file\"\r\n                      onChange={handleAddImage}\r\n                      multiple\r\n                      type=\"file\"\r\n                    />\r\n                    <div className=\"row\">\r\n                      {images.map((item, i) => {\r\n                        var url = URL.createObjectURL(item);\r\n                        return (\r\n                          <div className=\"position-relative d-flex align-items-center w-50\">\r\n                            <img\r\n                              alt=\"Image Error\"\r\n                              style={{ height: \"80px\", width: \"100%\" }}\r\n                              className=\"img-fluid p-2\"\r\n                              src={url}\r\n                            />\r\n                            <DeleteIcon\r\n                              onClick={() => deleteImage(i)}\r\n                              className=\"bg-dark text-white rounded cursor-pointer\"\r\n                              style={{\r\n                                position: \"absolute\",\r\n                                top: \"0\",\r\n                                right: \"0\",\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <ModelNotification\r\n              DialogStatus={DialogStatus}\r\n              DialogTitle={DialogTitle}\r\n              DialogDesc={DialogDesc}\r\n              handleClose={handleClose}\r\n              DialogOk={DialogOk}\r\n            />\r\n          </section>\r\n          {/* Progress Bar */}\r\n          <Backdrop className={classes.backdrop} open={ProgressBarStatus}>\r\n            <LinearProgressWithLabel value={progress} />\r\n          </Backdrop>\r\n        </main>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddQuestion;\r\n",{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","severity":1,"message":"260","line":36,"column":8,"nodeType":"261","endLine":36,"endColumn":10,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":4,"column":21,"nodeType":"265","messageId":"266","endLine":4,"endColumn":28},{"ruleId":"263","severity":1,"message":"267","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"268","line":23,"column":11,"nodeType":"265","messageId":"266","endLine":23,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":92,"column":28,"nodeType":"271","messageId":"272","endLine":92,"endColumn":30},{"ruleId":"273","severity":1,"message":"274","line":93,"column":25,"nodeType":"275","messageId":"276","endLine":93,"endColumn":27},{"ruleId":"263","severity":1,"message":"277","line":4,"column":3,"nodeType":"265","messageId":"266","endLine":4,"endColumn":16},{"ruleId":"259","severity":1,"message":"278","line":39,"column":6,"nodeType":"261","endLine":39,"endColumn":8,"suggestions":"279"},{"ruleId":"263","severity":1,"message":"280","line":6,"column":22,"nodeType":"265","messageId":"266","endLine":6,"endColumn":35},{"ruleId":"263","severity":1,"message":"281","line":17,"column":8,"nodeType":"265","messageId":"266","endLine":17,"endColumn":19},{"ruleId":"263","severity":1,"message":"282","line":23,"column":10,"nodeType":"265","messageId":"266","endLine":23,"endColumn":21},{"ruleId":"263","severity":1,"message":"283","line":51,"column":32,"nodeType":"265","messageId":"266","endLine":51,"endColumn":52},{"ruleId":"263","severity":1,"message":"284","line":56,"column":25,"nodeType":"265","messageId":"266","endLine":56,"endColumn":39},{"ruleId":"263","severity":1,"message":"285","line":57,"column":22,"nodeType":"265","messageId":"266","endLine":57,"endColumn":33},{"ruleId":"259","severity":1,"message":"286","line":76,"column":8,"nodeType":"261","endLine":76,"endColumn":10,"suggestions":"287"},{"ruleId":"263","severity":1,"message":"288","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":25},{"ruleId":"263","severity":1,"message":"267","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"289","line":3,"column":8,"nodeType":"265","messageId":"266","endLine":3,"endColumn":12},{"ruleId":"263","severity":1,"message":"290","line":4,"column":10,"nodeType":"265","messageId":"266","endLine":4,"endColumn":17},{"ruleId":"263","severity":1,"message":"291","line":140,"column":17,"nodeType":"265","messageId":"266","endLine":140,"endColumn":25},{"ruleId":"259","severity":1,"message":"292","line":173,"column":6,"nodeType":"261","endLine":173,"endColumn":15,"suggestions":"293"},{"ruleId":"263","severity":1,"message":"294","line":10,"column":10,"nodeType":"265","messageId":"266","endLine":10,"endColumn":18},{"ruleId":"263","severity":1,"message":"295","line":10,"column":20,"nodeType":"265","messageId":"266","endLine":10,"endColumn":26},{"ruleId":"263","severity":1,"message":"296","line":19,"column":19,"nodeType":"265","messageId":"266","endLine":19,"endColumn":29},{"ruleId":"263","severity":1,"message":"297","line":30,"column":20,"nodeType":"265","messageId":"266","endLine":30,"endColumn":31},{"ruleId":"263","severity":1,"message":"298","line":36,"column":18,"nodeType":"265","messageId":"266","endLine":36,"endColumn":27},{"ruleId":"263","severity":1,"message":"299","line":45,"column":18,"nodeType":"265","messageId":"266","endLine":45,"endColumn":27},{"ruleId":"259","severity":1,"message":"300","line":65,"column":6,"nodeType":"261","endLine":65,"endColumn":8,"suggestions":"301"},{"ruleId":"302","severity":1,"message":"303","line":184,"column":15,"nodeType":"304","endLine":184,"endColumn":34},{"ruleId":"263","severity":1,"message":"305","line":18,"column":8,"nodeType":"265","messageId":"266","endLine":18,"endColumn":13},{"ruleId":"263","severity":1,"message":"306","line":20,"column":8,"nodeType":"265","messageId":"266","endLine":20,"endColumn":13},{"ruleId":"263","severity":1,"message":"284","line":57,"column":23,"nodeType":"265","messageId":"266","endLine":57,"endColumn":37},{"ruleId":"263","severity":1,"message":"285","line":58,"column":20,"nodeType":"265","messageId":"266","endLine":58,"endColumn":31},{"ruleId":"259","severity":1,"message":"307","line":105,"column":6,"nodeType":"261","endLine":105,"endColumn":8,"suggestions":"308"},{"ruleId":"269","severity":1,"message":"270","line":250,"column":33,"nodeType":"271","messageId":"272","endLine":250,"endColumn":35},{"ruleId":"309","severity":1,"message":"310","line":324,"column":18,"nodeType":"265","messageId":"311","endLine":324,"endColumn":19},{"ruleId":"269","severity":1,"message":"270","line":330,"column":33,"nodeType":"271","messageId":"272","endLine":330,"endColumn":35},{"ruleId":"269","severity":1,"message":"270","line":417,"column":30,"nodeType":"271","messageId":"272","endLine":417,"endColumn":32},{"ruleId":"309","severity":1,"message":"310","line":462,"column":14,"nodeType":"265","messageId":"311","endLine":462,"endColumn":15},{"ruleId":"312","severity":1,"message":"313","line":785,"column":25,"nodeType":"314","endLine":790,"endColumn":27},{"ruleId":"312","severity":1,"message":"313","line":802,"column":23,"nodeType":"314","endLine":807,"endColumn":25},{"ruleId":"263","severity":1,"message":"315","line":2,"column":8,"nodeType":"265","messageId":"266","endLine":2,"endColumn":17},{"ruleId":"263","severity":1,"message":"267","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"269","severity":1,"message":"270","line":55,"column":24,"nodeType":"271","messageId":"272","endLine":55,"endColumn":26},{"ruleId":"269","severity":1,"message":"270","line":70,"column":23,"nodeType":"271","messageId":"272","endLine":70,"endColumn":25},{"ruleId":"269","severity":1,"message":"270","line":91,"column":26,"nodeType":"271","messageId":"272","endLine":91,"endColumn":28},{"ruleId":"255","replacedBy":"316"},{"ruleId":"257","replacedBy":"317"},{"ruleId":"263","severity":1,"message":"267","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":26},{"ruleId":"263","severity":1,"message":"288","line":1,"column":28,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"318","line":8,"column":8,"nodeType":"265","messageId":"266","endLine":8,"endColumn":14},{"ruleId":"263","severity":1,"message":"319","line":14,"column":8,"nodeType":"265","messageId":"266","endLine":14,"endColumn":17},{"ruleId":"263","severity":1,"message":"320","line":16,"column":8,"nodeType":"265","messageId":"266","endLine":16,"endColumn":16},{"ruleId":"259","severity":1,"message":"321","line":91,"column":6,"nodeType":"261","endLine":91,"endColumn":24,"suggestions":"322"},{"ruleId":"263","severity":1,"message":"267","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"294","line":9,"column":10,"nodeType":"265","messageId":"266","endLine":9,"endColumn":18},{"ruleId":"263","severity":1,"message":"295","line":9,"column":20,"nodeType":"265","messageId":"266","endLine":9,"endColumn":26},{"ruleId":"263","severity":1,"message":"323","line":10,"column":8,"nodeType":"265","messageId":"266","endLine":10,"endColumn":9},{"ruleId":"263","severity":1,"message":"296","line":24,"column":21,"nodeType":"265","messageId":"266","endLine":24,"endColumn":31},{"ruleId":"263","severity":1,"message":"297","line":35,"column":22,"nodeType":"265","messageId":"266","endLine":35,"endColumn":33},{"ruleId":"263","severity":1,"message":"298","line":41,"column":20,"nodeType":"265","messageId":"266","endLine":41,"endColumn":29},{"ruleId":"263","severity":1,"message":"299","line":50,"column":20,"nodeType":"265","messageId":"266","endLine":50,"endColumn":29},{"ruleId":"259","severity":1,"message":"324","line":206,"column":8,"nodeType":"261","endLine":206,"endColumn":28,"suggestions":"325"},{"ruleId":"302","severity":1,"message":"303","line":273,"column":100,"nodeType":"304","endLine":273,"endColumn":119},{"ruleId":"263","severity":1,"message":"326","line":6,"column":8,"nodeType":"265","messageId":"266","endLine":6,"endColumn":25},{"ruleId":"263","severity":1,"message":"281","line":7,"column":8,"nodeType":"265","messageId":"266","endLine":7,"endColumn":19},{"ruleId":"263","severity":1,"message":"327","line":13,"column":8,"nodeType":"265","messageId":"266","endLine":13,"endColumn":10},{"ruleId":"263","severity":1,"message":"328","line":14,"column":8,"nodeType":"265","messageId":"266","endLine":14,"endColumn":18},{"ruleId":"263","severity":1,"message":"329","line":23,"column":10,"nodeType":"265","messageId":"266","endLine":23,"endColumn":14},{"ruleId":"263","severity":1,"message":"330","line":23,"column":16,"nodeType":"265","messageId":"266","endLine":23,"endColumn":23},{"ruleId":"259","severity":1,"message":"331","line":77,"column":6,"nodeType":"261","endLine":77,"endColumn":28,"suggestions":"332"},{"ruleId":"269","severity":1,"message":"333","line":156,"column":40,"nodeType":"271","messageId":"334","endLine":156,"endColumn":42},{"ruleId":"312","severity":1,"message":"313","line":159,"column":25,"nodeType":"314","endLine":159,"endColumn":140},{"ruleId":"263","severity":1,"message":"335","line":10,"column":8,"nodeType":"265","messageId":"266","endLine":10,"endColumn":21},{"ruleId":"263","severity":1,"message":"336","line":11,"column":8,"nodeType":"265","messageId":"266","endLine":11,"endColumn":21},{"ruleId":"263","severity":1,"message":"326","line":12,"column":8,"nodeType":"265","messageId":"266","endLine":12,"endColumn":25},{"ruleId":"263","severity":1,"message":"281","line":13,"column":8,"nodeType":"265","messageId":"266","endLine":13,"endColumn":19},{"ruleId":"263","severity":1,"message":"337","line":21,"column":7,"nodeType":"265","messageId":"266","endLine":21,"endColumn":12},{"ruleId":"259","severity":1,"message":"338","line":79,"column":7,"nodeType":"261","endLine":79,"endColumn":42,"suggestions":"339"},{"ruleId":"263","severity":1,"message":"267","line":1,"column":17,"nodeType":"265","messageId":"266","endLine":1,"endColumn":26},{"ruleId":"263","severity":1,"message":"340","line":12,"column":10,"nodeType":"265","messageId":"266","endLine":12,"endColumn":20},{"ruleId":"263","severity":1,"message":"341","line":33,"column":7,"nodeType":"265","messageId":"266","endLine":33,"endColumn":17},{"ruleId":"263","severity":1,"message":"342","line":75,"column":10,"nodeType":"265","messageId":"266","endLine":75,"endColumn":29},{"ruleId":"263","severity":1,"message":"284","line":83,"column":23,"nodeType":"265","messageId":"266","endLine":83,"endColumn":37},{"ruleId":"263","severity":1,"message":"285","line":84,"column":20,"nodeType":"265","messageId":"266","endLine":84,"endColumn":31},{"ruleId":"263","severity":1,"message":"343","line":86,"column":9,"nodeType":"265","messageId":"266","endLine":86,"endColumn":16},{"ruleId":"259","severity":1,"message":"344","line":158,"column":6,"nodeType":"261","endLine":158,"endColumn":8,"suggestions":"345"},{"ruleId":"259","severity":1,"message":"346","line":199,"column":6,"nodeType":"261","endLine":199,"endColumn":38,"suggestions":"347"},{"ruleId":"309","severity":1,"message":"310","line":337,"column":20,"nodeType":"265","messageId":"311","endLine":337,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":343,"column":35,"nodeType":"271","messageId":"272","endLine":343,"endColumn":37},{"ruleId":"309","severity":1,"message":"310","line":414,"column":14,"nodeType":"265","messageId":"311","endLine":414,"endColumn":15},{"ruleId":"312","severity":1,"message":"313","line":678,"column":29,"nodeType":"314","endLine":683,"endColumn":31},{"ruleId":"312","severity":1,"message":"313","line":702,"column":27,"nodeType":"314","endLine":707,"endColumn":29},{"ruleId":"263","severity":1,"message":"267","line":1,"column":27,"nodeType":"265","messageId":"266","endLine":1,"endColumn":36},{"ruleId":"263","severity":1,"message":"318","line":16,"column":8,"nodeType":"265","messageId":"266","endLine":16,"endColumn":14},{"ruleId":"263","severity":1,"message":"348","line":17,"column":8,"nodeType":"265","messageId":"266","endLine":17,"endColumn":16},{"ruleId":"263","severity":1,"message":"341","line":47,"column":7,"nodeType":"265","messageId":"266","endLine":47,"endColumn":17},{"ruleId":"263","severity":1,"message":"349","line":51,"column":10,"nodeType":"265","messageId":"266","endLine":51,"endColumn":15},{"ruleId":"263","severity":1,"message":"284","line":73,"column":23,"nodeType":"265","messageId":"266","endLine":73,"endColumn":37},{"ruleId":"263","severity":1,"message":"285","line":74,"column":20,"nodeType":"265","messageId":"266","endLine":74,"endColumn":31},{"ruleId":"259","severity":1,"message":"292","line":112,"column":6,"nodeType":"261","endLine":112,"endColumn":8,"suggestions":"350"},{"ruleId":"269","severity":1,"message":"270","line":257,"column":35,"nodeType":"271","messageId":"272","endLine":257,"endColumn":37},{"ruleId":"312","severity":1,"message":"313","line":550,"column":29,"nodeType":"314","endLine":555,"endColumn":31},"no-native-reassign",["351"],"no-negated-in-lhs",["352"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'loginReducer'. Either include them or remove the dependency array.","ArrayExpression",["353"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'loginReducer' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FcRemoveImage' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'loginReducer', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["354"],"'remove_theory' is defined but never used.","'DialogTitle' is defined but never used.","'ProgressBar' is defined but never used.","'setProgressBarStatus' is assigned a value but never used.","'setDialogTitle' is assigned a value but never used.","'setDialogOk' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardReducer.length' and 'history'. Either include them or remove the dependency array.",["355"],"'useState' is defined but never used.","'clsx' is defined but never used.","'lighten' is defined but never used.","'setDense' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'loginReducer'. Either include it or remove the dependency array.",["356"],"'MenuItem' is defined but never used.","'Select' is defined but never used.","'setSystems' is assigned a value but never used.","'setSubjects' is assigned a value but never used.","'setSeries' is assigned a value but never used.","'setPapers' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'mcqReducer.length'. Either include it or remove the dependency array.",["357"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'axios' is defined but never used.","'Slide' is defined but never used.","React Hook useEffect has missing dependencies: 'boardReducer', 'history', and 'loginReducer'. Either include them or remove the dependency array.",["358"],"no-redeclare","'i' is already defined.","redeclared","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'PropTypes' is defined but never used.",["351"],["352"],"'Button' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","React Hook React.useEffect has missing dependencies: 'loginReducer', 'metadata.subject', and 'onClose'. Either include them or remove the dependency array.",["359"],"'$' is defined but never used.","React Hook React.useEffect has missing dependencies: 'change_input', 'props.data.board', 'props.data.month', 'props.data.paper', 'props.data.series', 'props.data.subject', 'props.data.system', and 'props.data.year'. Either include them or remove the dependency array. If 'setPaper' needs the current value of 'props.data.system', you can also switch to useReducer instead of useState and read 'props.data.system' in the reducer.",["360"],"'DialogContentText' is defined but never used.","'S3' is defined but never used.","'DeleteIcon' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'handleClose' and 'loginReducer'. Either include them or remove the dependency array. Outer scope values like 'window.SeeQuestionId' aren't valid dependencies because mutating them doesn't re-render the component.",["361"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'data2' is assigned a value but never used.","React Hook React.useEffect has an unnecessary dependency: 'window.activeImageinImageCarousel'. Either exclude it or remove the dependency array. Outer scope values like 'window.activeImageinImageCarousel' aren't valid dependencies because mutating them doesn't re-render the component.",["362"],"'useHistory' is defined but never used.","'Transition' is assigned a value but never used.","'ConfirmDialogStatus' is assigned a value but never used.","'classes' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'config', 'loginReducer', 'metadata.subject', 'onClose', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["363"],"React Hook React.useEffect has missing dependencies: 'loginReducer', 'metadata.subject', 'onClose', and 'props'. Either include them or remove the dependency array. Outer scope values like 'window.EditQuestionId' aren't valid dependencies because mutating them doesn't re-render the component.",["364"],"'Snackbar' is defined but never used.","'Alert' is defined but never used.",["365"],"no-global-assign","no-unsafe-negation",{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [history, loginReducer]",{"range":"392","text":"393"},"Update the dependencies array to be: [history, loginReducer, props]",{"range":"394","text":"395"},"Update the dependencies array to be: [boardReducer.length, history]",{"range":"396","text":"397"},"Update the dependencies array to be: [getData, loginReducer]",{"range":"398","text":"399"},"Update the dependencies array to be: [mcqReducer.length]",{"range":"400","text":"401"},"Update the dependencies array to be: [boardReducer, history, loginReducer]",{"range":"402","text":"403"},"Update the dependencies array to be: [id, getQuestions, loginReducer, metadata.subject, onClose]",{"range":"404","text":"405"},"Update the dependencies array to be: [change_input, props.DialogStatus, props.data.board, props.data.month, props.data.paper, props.data.series, props.data.subject, props.data.system, props.data.year]",{"range":"406","text":"407"},"Update the dependencies array to be: [handleClose, loginReducer]",{"range":"408","text":"409"},"Update the dependencies array to be: []",{"range":"410","text":"411"},"Update the dependencies array to be: [config, loginReducer, metadata.subject, onClose, props]",{"range":"412","text":"413"},"Update the dependencies array to be: [getData, loginReducer, metadata.subject, onClose, props]",{"range":"414","text":"415"},"Update the dependencies array to be: [loginReducer]",{"range":"416","text":"417"},[1401,1403],"[history, loginReducer]",[1177,1179],"[history, loginReducer, props]",[3148,3150],"[boardReducer.length, history]",[5595,5604],"[getData, loginReducer]",[1895,1897],"[mcqReducer.length]",[3769,3771],"[boardReducer, history, loginReducer]",[3214,3232],"[id, getQuestions, loginReducer, metadata.subject, onClose]",[6564,6584],"[change_input, props.DialogStatus, props.data.board, props.data.month, props.data.paper, props.data.series, props.data.subject, props.data.system, props.data.year]",[2504,2526],"[handleClose, loginReducer]",[2774,2809],"[]",[5372,5374],"[config, loginReducer, metadata.subject, onClose, props]",[6734,6766],"[getData, loginReducer, metadata.subject, onClose, props]",[3444,3446],"[loginReducer]"]